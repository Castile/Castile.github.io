<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Castile</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://castile.github.io/"/>
  <updated>2020-02-22T15:58:23.197Z</updated>
  <id>https://castile.github.io/</id>
  
  <author>
    <name>朱宏梁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anchor Diffusion for Unsupervised Video Object Segmentation</title>
    <link href="https://castile.github.io/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/"/>
    <id>https://castile.github.io/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/</id>
    <published>2020-02-21T13:42:03.000Z</published>
    <updated>2020-02-22T15:58:23.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Anchor-Diffusion-for-Unsupervised-Video-Object-Segmentation"><a href="#Anchor-Diffusion-for-Unsupervised-Video-Object-Segmentation" class="headerlink" title="Anchor Diffusion for Unsupervised Video Object Segmentation"></a>Anchor Diffusion for Unsupervised Video Object Segmentation</h1><h1 id="基于“锚扩散”的无监督视频目标分割"><a href="#基于“锚扩散”的无监督视频目标分割" class="headerlink" title="基于“锚扩散”的无监督视频目标分割"></a>基于“锚扩散”的无监督视频目标分割</h1><h3 id="github：-https-github-com-yz93-anchor-diff-VOS"><a href="#github：-https-github-com-yz93-anchor-diff-VOS" class="headerlink" title="github：  https://github.com/yz93/anchor-diff-VOS"></a>github：  <a href="https://github.com/yz93/anchor-diff-VOS" target="_blank" rel="noopener">https://github.com/yz93/anchor-diff-VOS</a></h3><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​        论文指出了目前的视频目标分割方法存在的缺点。提出更简单的方法，基它基于学习属于帧的像素之间的相似性，这些帧在时间上可以任意地相隔很远。这种方法能够处理long-term的依赖关系。</p><p>​        这篇论文受<strong>Non-local operators</strong>的启发提出了一个简单而有效的模型无监督视频目标分割模型，可以捕获<strong>长期依赖</strong>。通过将“锚帧”的嵌入像素与当前的帧建立联系，可以学习到任意长距离的成对依赖关系。在Davis2016数据集上取得了第一名的成绩。</p><p>​        追踪基于时间变化的的目标，现在流行的方法是通过在视频序列中的<strong>光流</strong>或者使用RNN对运动信息进行建模。这些方法持续将前面的特征传到当前帧，让当前帧的预测依赖于整个历史的帧。但是RNNs常常依赖于训练技术，如通过时间的截断反向传播来降低参数更新的成本，这限制了它们的长期建模能力。虽然LSTM的门控机制缓解了梯度消失的问题。但在训练中，梯度爆炸的现象往往需要对梯度的范数进行裁剪或重新调整。</p><p>​        光流向量只能预测视频中每一帧的<strong>单步运动</strong>线索，这样会累积误差。而且计算成本很高。使用这些方法会产生不准确的结果，<strong>特别是当前景物体几乎是静态的时候</strong>。</p><p>​        基于双流的模型有三个缺点：</p><p>​        第一：流估计网络通常是在合成数据集上训练的，因此在现实世界中部署时可能会导致较差的性能。<br>​        第二：虽然建模长期的时间依赖关系对于适应重大的在线变化是至关重要的，但是向量场只能建模短期的一                    步依赖关系。<br>​        第三： 当前景和背景以同步方式移动时，向量场无法区分它们，即前景与背景相同的运动。</p><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582273121006.png" data-fancybox="group" data-caption="1582273121006" class="fancybox"><img alt="1582273121006" style="zoom:200%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582273121006.png" class="lazyload" title="1582273121006"></a></p><p>我们的方法从属于锚帧的单个像素嵌入到当前帧(左侧)的所有像素嵌入之间学习<strong>一对多相似性</strong>的例子(右侧)。稠密相似点的轮廓与锚框中相应像素嵌入的颜色相匹配。注意的相似之处与前景的像素嵌入汽车(红色)产生一个整洁的热图,识别对象,而两组相似的像素嵌入“错误选择”车(绿色)和道路(紫色)更高的通信背景。这些学习到的相似性是一种简单而有效的分割前景对象的方法。彩色效果最佳。</p><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295328791.png" data-fancybox="group" data-caption="1582295328791" class="fancybox"><img alt="1582295328791" style="zoom:100%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295328791.png" class="lazyload" title="1582295328791"></a></p><p>最终的热图是所有输出热图的平均值。0.5的阈值产生最终的二进制标签。</p><hr><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295374722.png" data-fancybox="group" data-caption="1582295374722" class="fancybox"><img alt="1582295374722" style="zoom:100%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295374722.png" class="lazyload" title="1582295374722"></a></p><p><strong>输入：</strong> 图片对，锚帧和目标帧 $I_t$，锚帧 $ I_0 $  是视频序列的第一个帧，随机采样视频中的一帧作为第二张图片</p><p><strong>特征编码：</strong>DeepLabv3将锚帧和当前要分割的帧编码成相关的嵌入向量 </p><script type="math/tex; mode=display">    X_0 ∈ R^{hw × c}</script><script type="math/tex; mode=display">X_t ∈ R^{hw ×c }</script><p>​        将每个位置的c维特征向量称为像素嵌入。</p><p>三个分支：锚扩散分支、帧内分支、跳层连接分支</p><blockquote><p>a skip connection with an identity mapping</p><p>the intraframe branch</p><p>the anchor-diffusion branch</p><p>在帧内分支的情况下，每个输出像素嵌入可以被认为是所有输入像素嵌入的全局集合，通过两两外观相似度加权。已有研究表明，这种<strong>非局部操作可以利用长程空间信息，有利于语义分割</strong></p></blockquote><p>第一阶段的输出会喂入三个平行的分支 ， $X_t$ 会送到所有的分支中， $X_0$ 只会送入到Anchor-Diffusion中。</p><p>最后三个分支的特征沿着通道维度Concatenate  。</p><h2 id="Anchor-diffusion"><a href="#Anchor-diffusion" class="headerlink" title="Anchor diffusion"></a><strong>Anchor diffusion</strong></h2><p>为了增强前景信号，了解目标帧中的哪个像素嵌入对应于整个视频中引入的背景是很重要的。</p><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295535830.png" data-fancybox="group" data-caption="1582295535830" class="fancybox"><img alt="1582295535830" style="zoom:80%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295535830.png" class="lazyload" title="1582295535830"></a></p><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295572127.png" data-fancybox="group" data-caption="1582295572127" class="fancybox"><img alt="1582295572127" style="zoom:80%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295572127.png" class="lazyload" title="1582295572127"></a></p><script type="math/tex; mode=display">Z = \sqrt{c}</script><p>​        过渡矩阵 P 建立了 $X_0 $ 和 $X_t$ 像 素对之间的密集对应关系。转换矩阵P学习了一个相似度度量，可以很好地识别两帧内的共同object，因此，在式中，P可以增强锚帧中具有较强对应关系的像素点的信号，减弱不具有较强对应关系的像素点的信号。由于前景目标对象几乎总是出现在两帧中，而背景变化相对较快，我们的扩散过程通常是增强前景，压制背景。</p><p>​        <code>Softmax</code>函数将里面的式子的每一行进行归一化，可以保持像素嵌入的尺度不变性。如果不进行归一化，上式子可能会完全改变像素嵌入的比例。</p><p>​     像素嵌入随时间的时间一致性，测量为锚帧中的前景像素嵌入与逐渐变远的帧中的前景像素嵌入之间的余弦距离，得到以下结果：</p><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295606508.png" data-fancybox="group" data-caption="1582295606508" class="fancybox"><img alt="1582295606508" style="zoom:80%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295606508.png" class="lazyload" title="1582295606508"></a></p><p>这表明，AD-Net能够在较长时间内保存视频中第一帧的前景信息。</p><h1 id="后处理Instance-Pruning"><a href="#后处理Instance-Pruning" class="headerlink" title="后处理Instance Pruning"></a><strong>后处理Instance Pruning</strong></h1><p>​        因为AD-net主要区分前景和背景，将前景分割，但是对于有一些视频序列有很多类似前景的像素，使用<strong>Instance Pruning</strong> <strong>可以细化分割效果。</strong></p><p>​        首先，（这个实例裁剪算法）SmallStatic返回一组包围框和对应的实例掩码，它们表示小的和几乎静态的实例。输入，并为每一帧生成一个修剪掩码，该掩码合并所有比当前帧中的最大实例小得多的小型和静态实例。最后，每个输入掩码与相应的修剪掩码相乘然后，将这些实例和原始掩码作为 输出最终的预测。</p><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295731939.png" data-fancybox="group" data-caption="1582295731939" class="fancybox"><img alt="1582295731939" style="zoom:80%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295731939.png" class="lazyload" title="1582295731939"></a></p><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295754571.png" data-fancybox="group" data-caption="1582295754571" class="fancybox"><img alt="1582295754571" style="zoom:150%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295754571.png" class="lazyload" title="1582295754571"></a></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><a href="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295802040.png" data-fancybox="group" data-caption="1582295802040" class="fancybox"><img alt="1582295802040" style="zoom:150%;" data-src="/2020/02/21/Anchor%20Diffusion%20for%20Unsupervised%20Video%20Object%20Segmentation/1582295802040.png" class="lazyload" title="1582295802040"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="论文阅读" scheme="https://Castile.github.io/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="UVOS" scheme="https://Castile.github.io/tags/UVOS/"/>
    
      <category term="papers" scheme="https://Castile.github.io/tags/papers/"/>
    
  </entry>
  
  <entry>
    <title>Java专题之Socket编程</title>
    <link href="https://castile.github.io/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/"/>
    <id>https://castile.github.io/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/</id>
    <published>2020-02-19T13:45:00.410Z</published>
    <updated>2020-02-22T16:19:01.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、-概述"><a href="#一、-概述" class="headerlink" title="一、 概述"></a>一、 概述</h1><p>Java 中的网络支持：</p><ul><li><code>InetAddress</code>：用于表示网络上的硬件资源，即 IP 地址；</li><li><code>URL</code>：统一资源定位符；</li><li><code>Sockets</code>：使用 TCP 协议实现网络通信；</li><li><code>Datagram</code>：使用 UDP 协议实现网络通信。</li></ul><hr><h1 id="二、-InetAddress"><a href="#二、-InetAddress" class="headerlink" title="二、 InetAddress"></a>二、 InetAddress</h1><p> 没有公有的构造函数，只能通过静态方法来创建实例。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * IP  InetAddress</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-19 21:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        InetAddress address = InetAddress.getLocalHost(); <span class="comment">// 192.168.145.1</span></span><br><span class="line">        System.out.println(address.getHostAddress());</span><br><span class="line">        System.out.println(address.getHostName()); <span class="comment">// zhuhongliang</span></span><br><span class="line">        <span class="comment">// 根据域名得到InetAddress</span></span><br><span class="line">        <span class="comment">//根据域名得到InetAddress对象</span></span><br><span class="line">        address = InetAddress.getByName(<span class="string">"www.163.com"</span>);</span><br><span class="line">        System.out.println(address.getHostAddress());<span class="comment">//返回 163服务器的ip:183.216.182.9</span></span><br><span class="line">        System.out.println(address.getHostName());  <span class="comment">//输出：www.163.com</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据ip得到InetAddress对象</span></span><br><span class="line">        address = InetAddress.getByName(<span class="string">"183.216.182.7"</span>);</span><br><span class="line">        System.out.println(address.getHostAddress());  <span class="comment">//返回 163服务器的ip:61.135.253.15</span></span><br><span class="line">        System.out.println(address.getHostName());<span class="comment">//输出ip而不是域名。如果这个IP地 址不存在或DNS 服务器不允许进行IP地址和域名的映射，getHostName方法就直接返回这个IP地址。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>ip地址用来标识一台计算机，端口用来区分不同的程序。</p><blockquote><p>常用的命令：</p><p>查看所有端口： netstat -ano</p><p>查看指定端口： netstat -ano | findstr “5023”</p><p>查看指定进程： tasklist | findstr “5032”</p><p>查看具体程序： 使用任务管理器查看pid</p></blockquote><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582167681824.png" data-fancybox="group" data-caption="1582167681824" class="fancybox"><img alt="1582167681824" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582167681824.png" class="lazyload" title="1582167681824"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包含端口</span></span><br><span class="line">InetSocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">8080</span>); <span class="comment">//指定了端口</span></span><br><span class="line">InetSocketAddress socketAddress2 = <span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">9000</span>);</span><br><span class="line">System.out.println(socketAddress.getHostName()); <span class="comment">// 127.0.0.1</span></span><br><span class="line">System.out.println(socketAddress2.getAddress()); <span class="comment">//  localhost/127.0.0.1</span></span><br><span class="line">System.out.println(socketAddress.getPort()); <span class="comment">// 8080</span></span><br></pre></td></tr></table></figure></div><hr><h1 id="三、-URL"><a href="#三、-URL" class="headerlink" title="三、 URL"></a>三、 URL</h1><p>URL（Uniform Resource Locator）：  统一资源定位符 ， 由4部分组成：协议 、存放资源的主机域名、端口号和资源文件名。 如： <a href="http://www.www.baidu.com:9090/index.html" target="_blank" rel="noopener">http://www.www.baidu.com:9090/index.html</a></p><p>URL是指向互联网“资源”的指针。资源可以是简单的文件或目录，也可以是对更为复杂的对象的引用，例如对数据库或搜索引 擎的查询。</p><blockquote><p>互联网的三大基石： html， http， url</p></blockquote><p>URI（Universal Resource Identifier）： 统一资源标志符，用来标识抽象或者物理资源的一个紧凑字符串。</p><p>URN（Universal Resource Name）：统一资源名称， 通过特定命名空间中的唯一名称或ID来标识资源。</p><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582123666801.png" data-fancybox="group" data-caption="1582167681824" class="fancybox"><img alt="1582167681824" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582123666801.png" class="lazyload" title="1582167681824"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * URL: 统一资源定位符  区分资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-19 22:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com:9090/index.html?uname=zhu&amp;age=18#a"</span>);</span><br><span class="line">        <span class="comment">// 获取四个值</span></span><br><span class="line">        System.out.println(<span class="string">"协议："</span>+ url.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">"域名|ip： "</span>+ url.getHost());</span><br><span class="line">        System.out.println(<span class="string">"请求的资源1："</span>+ url.getFile());</span><br><span class="line">        System.out.println(<span class="string">"请求的资源2： "</span>+ url.getPath());</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        System.out.println(<span class="string">"参数："</span>+ url.getQuery());</span><br><span class="line">        <span class="comment">// 锚点</span></span><br><span class="line">        System.out.println(<span class="string">"锚点： "</span>+ url.getRef());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>协议：http<br>域名|ip： www.baidu.com<br>请求的资源1：/index.html?uname=zhu&amp;age=18<br>请求的资源2： /index.html<br>参数：uname=zhu&amp;age=18<br>锚点： a</p></blockquote><h2 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h2><p>使用url来下载资源</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * URL下载资源  爬虫原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-20 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpyderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.jd.com"</span>);</span><br><span class="line"><span class="comment">//        URL url = new URL("https://www.dianping.com"); //不是所有的网站都可以爬</span></span><br><span class="line">        InputStream is  = url.openStream(); <span class="comment">//</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is, <span class="string">"utf8"</span>));</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != (msg=br.readLine()))&#123;</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>对于不能直接通过URL来获取资源的，可以通过浏览器请求方式来获取：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *爬虫原理  : 模拟浏览器访问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-20 10:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpyderTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.dianping.com"</span>);</span><br><span class="line">        HttpURLConnection conn = (HttpURLConnection)url.openConnection();</span><br><span class="line">        conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">        conn.setRequestProperty(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36"</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"utf8"</span>));</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">null</span> != (msg = br.readLine()))&#123;</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h1 id="四、-传输协议TCP-amp-UDP"><a href="#四、-传输协议TCP-amp-UDP" class="headerlink" title="四、 传输协议TCP&amp;UDP"></a>四、 传输协议TCP&amp;UDP</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。 </p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。 </p><h2 id="套接字Socket"><a href="#套接字Socket" class="headerlink" title="套接字Socket"></a>套接字Socket</h2><p>​        我们开发的网络应用程序位于<strong>应用层</strong>，TCP和UDP属于传输层协议，在应用层如何使用传输层 的服务呢？在应用层和传输层之间，则是使用套接字来进行分离。 </p><p>​        套接字就像是传输层为应用层开的一个小口，应用程序通过这个小口向远程发送数据，或者 接收远程发来的数据；而这个小口以内，也就是数据进入这个口之后，或者数据从这个口出来之前，是不知道也不需要知道的，也不会关心它如何传输，这属于网络其它层次的工作。</p><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582169809295.png" data-fancybox="group" data-caption="1582169809295" class="fancybox"><img alt="1582169809295" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582169809295.png" class="lazyload" title="1582169809295"></a></p><p>​        Socket实际是网络传输层供给应用层的编程接口。传输层则在网络层的基础上提供进 程到进程问的逻辑通道，而应用层的进程则利用传输层向另一台主机的某一进程通 信。Socket就是应用层与传输层之间的桥梁 。</p><p>​        使用Socket编程可以开发客户机和服务器应用程序，可以在本地网络上进行通信，也 可通过Internet在全球范围内通信。</p><blockquote><p>生活案例1：</p><p>​        如果你想写封邮件发给远方的朋友，如何写信、将信 打包，属于应用层。信怎么写，怎么打包完全由我们做主；<br>​        而当我们将信投入邮筒时，邮筒的那个口就是套接字， 在进入套接字之后，就是传输层、网络层等（邮局、公路交管或者航线等）其它层次的工作了。我们从来不会去关心信是如何从西安发往北京的，我们只知道 写好了投入邮筒就OK了。</p></blockquote><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582170182414.png" data-fancybox="group" data-caption="1582170182414" class="fancybox"><img alt="1582170182414" style="zoom:80%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582170182414.png" class="lazyload" title="1582170182414"></a></p><blockquote><p>生活案例2:</p><p>如果你想发货给国外，你只要把 货物放入集装箱，然后交给码头就可以了。发送什么货物，货物如何打包, 完全有你做主。 码头就是套接字，剩下的事情就 交给港口和货运公司处理就行了，具体细节我们无需了解。</p></blockquote><p>​                                     <a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/socket.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:60%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/socket.jpg" class="lazyload" title="img"></a> </p><hr><h1 id="五、-UDP编程"><a href="#五、-UDP编程" class="headerlink" title="五、 UDP编程"></a>五、 UDP编程</h1><h2 id="Datagram"><a href="#Datagram" class="headerlink" title="Datagram"></a>Datagram</h2><ul><li>DatagramSocket：通信类 :  用于发送或者接受数据包的套接字</li><li>DatagramPacket：数据包类</li></ul><p>使用基于UDP协议的Socket网络编程实现 ：</p><p>​        不需要利用IO流实现数据的传输。 每个数据发送单元被统一封装成数据包的方式，发送方将数据包发送到网络中，数据包在网络中去寻找他的目的地。</p><p>UDP编程 ： 一切转换成字节数组</p><p>接收端：</p><blockquote><p>1.使用DatagramSocket 指定端口 创建接收端</p><p>2.指定容器， 封装DatagramPacket包</p><p>3.阻塞式接受包裹receive（DatagramPacket p）</p><p>4.分析数据  byte[]    getData()     getLength()</p><p>5.释放资源</p></blockquote><p>发送端</p><blockquote><p>1.使用DatagramSocket 指定端口 创建发送端</p><p>2.准备数据  ==》  一定要转成字节数组</p><p>3.封装 DatagramPacket包，需要指定目的地 + 端口</p><p>4.发送包裹  send( DatagramPacket p）</p><p>5.释放资源</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接受端：</span></span><br><span class="line"><span class="comment"> * 1. 使用DatagramSocket 指定端口 创建接收端</span></span><br><span class="line"><span class="comment"> * 2. 指定容器， 封装DatagramPacket包</span></span><br><span class="line"><span class="comment"> * 3. 阻塞式接受包裹receive（DatagramPacket p）</span></span><br><span class="line"><span class="comment"> * 4. 分析数据</span></span><br><span class="line"><span class="comment"> *  byte[] getData()</span></span><br><span class="line"><span class="comment"> *          getLength()</span></span><br><span class="line"><span class="comment"> *  5.  释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span> 2020-02-20 11:51</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收端启动中..."</span>);</span><br><span class="line">        <span class="comment">// 1. 使用DatagramSocket 指定端口 创建接收端</span></span><br><span class="line">        DatagramSocket server = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2. 指定容器， 封装DatagramPacket包</span></span><br><span class="line">        <span class="keyword">byte</span>[] contiainer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">60</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(contiainer, <span class="number">0</span>, contiainer.length);</span><br><span class="line">        <span class="comment">// 3. 阻塞式接受包裹receive（DatagramPacket p）</span></span><br><span class="line">        server.receive(packet);</span><br><span class="line">        <span class="comment">// 4. 分析数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] datas = packet.getData();</span><br><span class="line">        <span class="keyword">int</span> len = packet.getLength();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(datas, <span class="number">0</span>, len));</span><br><span class="line">        <span class="comment">// 5.  释放资源</span></span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送端：</span></span><br><span class="line"><span class="comment"> * 1. 使用DatagramSocket 指定端口 创建发送端</span></span><br><span class="line"><span class="comment"> * 2. 准备数据 一定转成字节数组</span></span><br><span class="line"><span class="comment"> * 3. 封装DatagramPacket包，需要指定目的地</span></span><br><span class="line"><span class="comment"> * 4. 发送包裹send( DatagramPacket p）</span></span><br><span class="line"><span class="comment"> * 5.  释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-20 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UPDCilent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送方启动中..."</span>);</span><br><span class="line">        <span class="comment">// 1. 使用DatagramSocket 指定端口 创建发送端</span></span><br><span class="line">        DatagramSocket client = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 准备数据 一定转成字节数组</span></span><br><span class="line">        String data = <span class="string">"Hello world"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] datas = data.getBytes();</span><br><span class="line">        <span class="comment">//3. 封装DatagramPacket包，需要指定目的地</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas, <span class="number">0</span>, datas.length,</span><br><span class="line">                <span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 4. 发送包裹send( DatagramPacket p）</span></span><br><span class="line">        client.send(packet);</span><br><span class="line">        <span class="comment">// 5.  释放资源</span></span><br><span class="line">        client.close();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="UDP编程：-传输基本数据类型和引用"><a href="#UDP编程：-传输基本数据类型和引用" class="headerlink" title="UDP编程： 传输基本数据类型和引用"></a>UDP编程： 传输基本数据类型和引用</h2><p>服务端（接收端）： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接受端： 基本数据类型和引用  </span></span><br><span class="line"><span class="comment"> * 1. 使用DatagramSocket 指定端口 创建接收端</span></span><br><span class="line"><span class="comment"> * 2. 指定容器， 封装DatagramPacket包</span></span><br><span class="line"><span class="comment"> * 3. 阻塞式接受包裹receive（DatagramPacket p）</span></span><br><span class="line"><span class="comment"> * 4. 分析数据</span></span><br><span class="line"><span class="comment"> *  5.  释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-20 19:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTypeServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"传输基本数据类型==&gt;接收端启动中。。。。"</span>);</span><br><span class="line">        DatagramSocket server = <span class="keyword">new</span> DatagramSocket(<span class="number">9898</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] datas = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">90</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas, <span class="number">0</span>, datas.length);</span><br><span class="line">        server.receive(packet);</span><br><span class="line">        <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">        <span class="keyword">int</span> len = packet.getLength();</span><br><span class="line">        ObjectInputStream dis = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> ByteArrayInputStream(data)));</span><br><span class="line">        <span class="comment">// 按照顺序读取</span></span><br><span class="line">        String msg = dis.readUTF(); <span class="comment">//  读取</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = dis.readBoolean();</span><br><span class="line">        <span class="keyword">int</span> a = dis.readInt();</span><br><span class="line">        Object o = dis.readObject();</span><br><span class="line">        System.out.println(len);</span><br><span class="line">        System.out.println(a+<span class="string">"=&gt;"</span>+msg+<span class="string">"--&gt;"</span>+flag);</span><br><span class="line"><span class="comment">//        o.toString();</span></span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Employee)&#123;</span><br><span class="line">            Employee e = (Employee)o;</span><br><span class="line">            e.toString();</span><br><span class="line">            System.out.println(<span class="string">"的确是马云"</span>);</span><br><span class="line">            System.out.println(e.getName() +<span class="string">":"</span>+  e.getMoney());</span><br><span class="line">        &#125;</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>客户端（发送端）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送端： 基本数据类型和引用</span></span><br><span class="line"><span class="comment"> * 1. 使用DatagramSocket 指定端口 创建发送端</span></span><br><span class="line"><span class="comment"> * 2. 准备数据 一定转成字节数组</span></span><br><span class="line"><span class="comment"> * 3. 封装DatagramPacket包，需要指定目的地</span></span><br><span class="line"><span class="comment"> * 4. 发送包裹send( DatagramPacket p）</span></span><br><span class="line"><span class="comment"> * 5.  释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-20 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UPDTypeCilent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"传输基本数据类型==&gt;发送方启动中..."</span>);</span><br><span class="line">        <span class="comment">// 1. 使用DatagramSocket 指定端口 创建发送端</span></span><br><span class="line">        DatagramSocket client = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 准备数据 一定转成字节数组</span></span><br><span class="line">        ByteArrayOutputStream  bao = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream dos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> BufferedOutputStream(bao));</span><br><span class="line">        dos.writeUTF(<span class="string">"Hello world!"</span>);</span><br><span class="line">        dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">        dos.writeInt(<span class="number">99</span>);</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        Employee e = <span class="keyword">new</span> Employee(<span class="string">"马云"</span>, <span class="number">900000</span>);</span><br><span class="line">        dos.writeObject(e);</span><br><span class="line">        dos.flush();</span><br><span class="line">        <span class="keyword">byte</span>[] datas = bao.toByteArray();</span><br><span class="line">        <span class="comment">//3. 封装DatagramPacket包，需要指定目的地</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas, <span class="number">0</span>, datas.length,</span><br><span class="line">                <span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">9898</span>));</span><br><span class="line">        <span class="comment">// 4. 发送包裹send( DatagramPacket p）</span></span><br><span class="line">        client.send(packet);</span><br><span class="line">        <span class="comment">// 5.  释放资源</span></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>传输基本数据类型==&gt;发送方启动中…</p><p>66<br>99=&gt;Hello world!—&gt;true<br>的确是马云<br>null:900000.0</p></blockquote><h2 id="UDP编程：-传输文件"><a href="#UDP编程：-传输文件" class="headerlink" title="UDP编程： 传输文件"></a>UDP编程： 传输文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送端： 发送文件</span></span><br><span class="line"><span class="comment"> * 1. 使用DatagramSocket 指定端口 创建发送端</span></span><br><span class="line"><span class="comment"> * 2. 准备数据 一定转成字节数组</span></span><br><span class="line"><span class="comment"> * 3. 封装DatagramPacket包，需要指定目的地</span></span><br><span class="line"><span class="comment"> * 4. 发送包裹send( DatagramPacket p）</span></span><br><span class="line"><span class="comment"> * 5.  释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-20 17:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UPDFileCilent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件 ==&gt; 发送方启动中..."</span>);</span><br><span class="line">        <span class="comment">// 1. 使用DatagramSocket 指定端口 创建发送端</span></span><br><span class="line">        DatagramSocket client = <span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 准备数据 一定转成字节数组</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"./socket/socket.png"</span>);  <span class="comment">// 注意图片不能太大，否则会报异常</span></span><br><span class="line">        BufferedInputStream bi = <span class="keyword">new</span> BufferedInputStream(is);</span><br><span class="line">        ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] data  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">60</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ( -<span class="number">1</span> !=  (len = is.read(data,<span class="number">0</span>, data.length)))&#123;</span><br><span class="line">            os.write(data, <span class="number">0</span>, len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] datas = os.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 封装DatagramPacket包，需要指定目的地</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas, <span class="number">0</span>, datas.length,</span><br><span class="line">                <span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">// 4. 发送包裹send( DatagramPacket p）</span></span><br><span class="line">        client.send(packet);</span><br><span class="line">        <span class="comment">// 5.  释放资源</span></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接受端：</span></span><br><span class="line"><span class="comment"> * 1. 使用DatagramSocket 指定端口 创建接收端</span></span><br><span class="line"><span class="comment"> * 2. 指定容器， 封装DatagramPacket包</span></span><br><span class="line"><span class="comment"> * 3. 阻塞式接受包裹receive（DatagramPacket p）</span></span><br><span class="line"><span class="comment"> * 4. 分析数据</span></span><br><span class="line"><span class="comment"> *  byte[] getData()</span></span><br><span class="line"><span class="comment"> *          getLength()</span></span><br><span class="line"><span class="comment"> *  5.  释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@create</span> 2020-02-20 11:51</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPFileServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收端启动中..."</span>);</span><br><span class="line">        <span class="comment">// 1. 使用DatagramSocket 指定端口 创建接收端</span></span><br><span class="line">        DatagramSocket server = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2. 指定容器， 封装DatagramPacket包</span></span><br><span class="line">        <span class="keyword">byte</span>[] contiainer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">60</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(contiainer, <span class="number">0</span>, contiainer.length);</span><br><span class="line">        <span class="comment">// 3. 阻塞式接受包裹receive（DatagramPacket p）</span></span><br><span class="line">        server.receive(packet);</span><br><span class="line">        <span class="comment">// 4. 分析数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] datas = packet.getData();</span><br><span class="line">        <span class="keyword">int</span> len = packet.getLength();</span><br><span class="line"><span class="comment">//        System.out.println(new String(datas, 0, len));</span></span><br><span class="line">        BufferedOutputStream os =<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./socket/copy.png"</span>)); <span class="comment">//接受数据</span></span><br><span class="line">        os.write(datas, <span class="number">0</span>, datas.length);</span><br><span class="line">        os.flush();</span><br><span class="line">        <span class="comment">// 5.  释放资源</span></span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="UDP案例：-多线程实现在线咨询"><a href="#UDP案例：-多线程实现在线咨询" class="headerlink" title="UDP案例： 多线程实现在线咨询"></a>UDP案例： 多线程实现在线咨询</h2><h3 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送端： 使用面向对象封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 10:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">talkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket client ; <span class="comment">// 发送端套接字</span></span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader; <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="keyword">private</span> String toIP; <span class="comment">// 发送到服务端的IP</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort; <span class="comment">// 服务端的端口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">talkSend</span><span class="params">(<span class="keyword">int</span> port, String toIP, <span class="keyword">int</span> toPort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toIP = toIP;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.client = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            String msg = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg = reader.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] datas = msg.getBytes();</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas, <span class="number">0</span>, datas.length, <span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.toIP, <span class="keyword">this</span>.toPort));</span><br><span class="line">                client.send(packet); <span class="comment">// 发送</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"bye"</span>.equals(msg))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">talkRecieve</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket server;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">talkRecieve</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.server = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">60</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,<span class="number">0</span>, data.length);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                server.receive(packet);</span><br><span class="line">                <span class="keyword">byte</span>[] datas = packet.getData();</span><br><span class="line">                String msg = <span class="keyword">new</span> String(datas);</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"bye"</span>.equals(msg))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建学生端：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生端： 加入多线程，实现在线交流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> talkSend(<span class="number">8989</span>, <span class="string">"localhost"</span>, <span class="number">9999</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> talkRecieve(<span class="number">10024</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建教师端：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 教室端： 加入多线程，实现在线交流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 11:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkTeacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> talkRecieve(<span class="number">9999</span>)).start(); <span class="comment">// 接受信息</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> talkSend(<span class="number">10025</span>, <span class="string">"localhost"</span>, <span class="number">10024</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582258221891.png" data-fancybox="group" data-caption="1582258221891" class="fancybox"><img alt="1582258221891" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582258221891.png" class="lazyload" title="1582258221891"></a></p><hr><h1 id="六、-TCP-编程"><a href="#六、-TCP-编程" class="headerlink" title="六、 TCP 编程"></a>六、 TCP 编程</h1><p>TCP协议基于请求-响应模式，  在网络通讯中，第一次主动发起通讯的程序被称作客户端(Client)程序，第一次通讯中等待连接的程序被称作服务器端 (Server)程序。利用IO流实现数据的传输。</p><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582261736199.png" data-fancybox="group" data-caption="1582261736199" class="fancybox"><img alt="1582261736199" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582261736199.png" class="lazyload" title="1582261736199"></a></p><h2 id="TCP通信原理"><a href="#TCP通信原理" class="headerlink" title="TCP通信原理"></a>TCP通信原理</h2><p> 服务器创建<code>ServerSocket</code>，在指定端口监听并并处理请求。</p><p>客户端创建<code>Socket</code>，向服务器发送请求。</p><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582262725020.png" data-fancybox="group" data-caption="1582262725020" class="fancybox"><img alt="1582262725020" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582262725020.png" class="lazyload" title="1582262725020"></a></p><h2 id="完成网络登录功能"><a href="#完成网络登录功能" class="headerlink" title="完成网络登录功能"></a>完成网络登录功能</h2><p>使用基于TCP协议的Socket网络编程实现。</p><blockquote><p>单向：客户端向服务器端发送字符串，服务器获取字符串并输出<br>双向：服务器端给出客户端反馈，客户端得到反馈并输出<br>对象：客户端向服务器端发送User对象，服务器端获取对象并输出<br>多线程：服务器接收多个客户端的请求，并给出反馈每个客户请求开启一个线程</p></blockquote><p>服务端：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * TCP单向： 服务端</span><br><span class="line"> * @author Hongliang Zhu</span><br><span class="line"> * @create 2020-02-21 13:28</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class TCPServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;-----------服务端--------------&quot;);</span><br><span class="line">        ServerSocket server &#x3D; new ServerSocket(9696);</span><br><span class="line">        Socket cilent &#x3D; server.accept(); &#x2F;&#x2F;  监听连接请求， 返回对应的客户端</span><br><span class="line">        System.out.println(&quot;建立了一个连接&quot;);</span><br><span class="line">        InputStream is &#x3D; cilent.getInputStream();</span><br><span class="line">        DataInputStream dis &#x3D; new DataInputStream(is);</span><br><span class="line">        &#x2F;&#x2F; 读取</span><br><span class="line">        String uname &#x3D; null;</span><br><span class="line">        String upwd &#x3D; null;</span><br><span class="line">        String msg &#x3D; dis.readUTF();</span><br><span class="line">        String []datas &#x3D; msg.split(&quot;&amp;&quot;);</span><br><span class="line">        for(String s: datas)&#123;</span><br><span class="line">            String[] info &#x3D; s.split(&quot;&#x3D;&quot;);</span><br><span class="line">            if(&quot;uname&quot;.equals(info[0]))&#123;</span><br><span class="line">                System.out.println(&quot;您的用户名为：&quot;+ info[1]);</span><br><span class="line">                uname &#x3D; info[1];</span><br><span class="line">            &#125;</span><br><span class="line">            if(&quot;upwd&quot;.equals(info[0]))&#123;</span><br><span class="line">                System.out.println(&quot;您的密码为：&quot;+ info[1]);</span><br><span class="line">                upwd &#x3D; info[1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;判断：返回给客户端的信息</span><br><span class="line">        String back &#x3D; null;</span><br><span class="line">        DataOutputStream dos &#x3D; new DataOutputStream(cilent.getOutputStream());</span><br><span class="line">        if(&quot;zhuhongliang&quot;.equals(uname) &amp;&amp; &quot;123456&quot;.equals(upwd))&#123;</span><br><span class="line">            back &#x3D; &quot;登录成功， 欢迎回来&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            back &#x3D; &quot;用户名或者密码错误！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        dos.writeUTF(back);</span><br><span class="line">        dos.flush();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 关闭资源</span><br><span class="line">        dos.close();</span><br><span class="line">        dis.close();</span><br><span class="line">        cilent.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>客户端</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCp 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 13:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------------客户端---------------"</span>);</span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">9696</span>); <span class="comment">//服务器的ip和端口</span></span><br><span class="line">        <span class="comment">// 操作： 输入输出流</span></span><br><span class="line">        String uname;</span><br><span class="line">        String upwd;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">        uname = br.readLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">        upwd = br.readLine();</span><br><span class="line">        String msg = <span class="string">"uname="</span>+ uname +<span class="string">"&amp;"</span>+<span class="string">"upwd="</span>+upwd;</span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">        dos.writeUTF(msg);</span><br><span class="line">        dos.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收服务端返回的结果</span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">        String res = dis.readUTF();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        dos.close();</span><br><span class="line">        br.close();</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582267524749.png" data-fancybox="group" data-caption="1582267524749" class="fancybox"><img alt="1582267524749" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582267524749.png" class="lazyload" title="1582267524749"></a></p><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582267597408.png" data-fancybox="group" data-caption="1582267597408" class="fancybox"><img alt="1582267597408" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582267597408.png" class="lazyload" title="1582267597408"></a></p><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582267550778.png" data-fancybox="group" data-caption="1582267550778" class="fancybox"><img alt="1582267550778" style="zoom:100%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582267550778.png" class="lazyload" title="1582267550778"></a></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCp 客户端  文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 13:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------------客户端---------------"</span>);</span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">9696</span>); <span class="comment">//服务器的ip和端口</span></span><br><span class="line">        <span class="comment">// 操作： 输入输出流</span></span><br><span class="line">        <span class="comment">// 文件拷贝</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./io/io.png"</span>));</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> BufferedOutputStream(client.getOutputStream());</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (-<span class="number">1</span> != (len = is.read(buff)))&#123;</span><br><span class="line">            os.write(buff,<span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        os.flush();</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP:服务端  保存文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 13:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------服务端--------------"</span>);</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9696</span>);</span><br><span class="line">        Socket cilent = server.accept(); <span class="comment">//  监听连接请求， 返回对应的客户端</span></span><br><span class="line">        System.out.println(<span class="string">"建立了一个连接"</span>);</span><br><span class="line">        <span class="comment">// 接受数据</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> BufferedInputStream(cilent.getInputStream());</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"./socket/tcp.png"</span>)));</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (-<span class="number">1</span> != (len = is.read(buff)))&#123;</span><br><span class="line">            os.write(buff,<span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        os.flush();</span><br><span class="line">        is.close();</span><br><span class="line">        os.close();</span><br><span class="line">        cilent.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="多用户登录"><a href="#多用户登录" class="headerlink" title="多用户登录"></a>多用户登录</h2><p>服务端： 使用了<strong>多线程</strong>实现多个用户同时处理，将对接管道封装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP多用户登录： 服务端  多线程处理  面向对象高度封装！</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-21 13:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPMutiServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------服务端--------------"</span>);</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9696</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isRuning = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (isRuning)&#123;</span><br><span class="line">            Socket cilent = server.accept(); <span class="comment">//  监听连接请求， 返回对应的客户端</span></span><br><span class="line">            System.out.println(<span class="string">"建立了一个连接"</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Channel(cilent)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 封装管道 里面有输入流和输出流 ，使用多线程可以服务多个客户端</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Channel</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket client; <span class="comment">// 客户端</span></span><br><span class="line">        <span class="keyword">private</span> DataInputStream dis; <span class="comment">// 输入流  ==&gt; 用于客户端请求服务端的信息</span></span><br><span class="line">        <span class="keyword">private</span> DataOutputStream dos; <span class="comment">//  输出流 ==&gt; 服务端给客户端的响应信息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Channel</span><span class="params">(Socket client)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.client = client;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">this</span>.client.getInputStream()); <span class="comment">// 获取客户端输入</span></span><br><span class="line">                dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">this</span>.client.getOutputStream()); <span class="comment">// 给客户端的响应</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">recieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">            String msg = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg = dis.readUTF();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//发送给客户端数据</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dos.writeUTF(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != dos)</span><br><span class="line">                    dos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != dis)</span><br><span class="line">                    dis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != client)</span><br><span class="line">                    client.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 读取读取</span></span><br><span class="line">            String msg = recieve();</span><br><span class="line">            String uname = <span class="keyword">null</span>;</span><br><span class="line">            String upwd = <span class="keyword">null</span>;</span><br><span class="line">            String []datas = msg.split(<span class="string">"&amp;"</span>);</span><br><span class="line">            <span class="keyword">for</span>(String s: datas)&#123;</span><br><span class="line">                String[] info = s.split(<span class="string">"="</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"uname"</span>.equals(info[<span class="number">0</span>]))&#123;</span><br><span class="line">                    System.out.println(<span class="string">"您的用户名为："</span>+ info[<span class="number">1</span>]);</span><br><span class="line">                    uname = info[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"upwd"</span>.equals(info[<span class="number">0</span>]))&#123;</span><br><span class="line">                    System.out.println(<span class="string">"您的密码为："</span>+ info[<span class="number">1</span>]);</span><br><span class="line">                    upwd = info[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断：返回给客户端的信息</span></span><br><span class="line">            String back = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"zhuhongliang"</span>.equals(uname) &amp;&amp; <span class="string">"123456"</span>.equals(upwd))&#123;</span><br><span class="line">                back = <span class="string">"登录成功， 欢迎回来"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                back = <span class="string">"用户名或者密码错误！"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            send(back); <span class="comment">// 发送给客户端</span></span><br><span class="line">            release(); <span class="comment">// 释放资源</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>客户端： 对发送和接受高度封装：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多用户登录： 面向对象思维高度封装！</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020年2月21日23:57:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPMultiClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------------客户端---------------"</span>);</span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">9696</span>); <span class="comment">//服务器的ip和端口</span></span><br><span class="line">        <span class="comment">// 操作： 输入输出流</span></span><br><span class="line">        <span class="keyword">new</span> Send(client).send();</span><br><span class="line">        <span class="comment">//接收</span></span><br><span class="line">        <span class="keyword">new</span> Recieve(client).recieve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送给服务器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket client;</span><br><span class="line">        <span class="keyword">private</span> BufferedReader br;</span><br><span class="line">        <span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line">        String msg = <span class="string">""</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Send</span><span class="params">(Socket client)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.client = client;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">                dos = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">                msg = init();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">            String uname = <span class="string">""</span>;</span><br><span class="line">            String upwd = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">                uname = br.readLine();</span><br><span class="line">                System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">                upwd = br.readLine();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"uname="</span>+ uname +<span class="string">"&amp;"</span>+<span class="string">"upwd="</span>+upwd;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 写出</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dos.writeUTF(msg);</span><br><span class="line">                dos.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收服务器的返回消息</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Recieve</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket client;</span><br><span class="line">        <span class="keyword">private</span> DataInputStream dis;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Recieve</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.client = client;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dis = <span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String res = dis.readUTF();</span><br><span class="line">                System.out.println(res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="七、-实例：-手写在线聊天室"><a href="#七、-实例：-手写在线聊天室" class="headerlink" title="七、 实例： 手写在线聊天室"></a>七、 实例： 手写在线聊天室</h1><h2 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1.  服务器"></a>1.  服务器</h2><p>功能：相当于消息的中转站（转发器）</p><blockquote><p>1.可以同时处理多个客户端的请求。</p><p>2.当一个用户进入群聊的时候，会给群聊中所有的用户群发一条系统消息，提示所有用户有人进来了群聊当中。</p><p>3.当一个用户成功进入群聊的时候， 服务器会发送一条问候语给当前客户。</p><p>4.当一个用户离开群聊的时候，会给群聊中所有的用户群发一条系统消息，提示所有用户xxx离开了群聊。</p><p>5.一个用户发送的消息可以给群聊中的所有用户发送。</p><p>6.可以对指定的用户私聊，消息只对指定的用户看见。格式： @xxx：message</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatVersion;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.relation.Relation;</span><br><span class="line"><span class="keyword">import</span> javax.print.attribute.standard.MediaSize.Other;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在线聊天室： 群聊版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZHLAS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> CopyOnWriteArrayList&lt;Channel&gt; all = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------------服务器启动中------------------"</span>);</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">// 等待连接</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Socket client = server.accept();</span><br><span class="line">System.out.println(<span class="string">"建立一个连接"</span>);</span><br><span class="line">Channel c = <span class="keyword">new</span> Channel(client);</span><br><span class="line">all.add(c); <span class="comment">// 加入一个客户端</span></span><br><span class="line"><span class="keyword">new</span> Thread(c).start();<span class="comment">// 开始服务</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个Channel代表一个客户端</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Channel</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket client;</span><br><span class="line"><span class="keyword">private</span> DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isRuning = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> String name; <span class="comment">//当前客户端的名字</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Channel</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">dos= <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line"><span class="comment">//欢迎您的到来</span></span><br><span class="line"><span class="keyword">this</span>.name = recieve(); <span class="comment">///接收到客户端的名字</span></span><br><span class="line"><span class="keyword">this</span>.send(<span class="string">"欢迎您来到聊天室！"</span>); <span class="comment">// 发送给对应客户端的欢迎词</span></span><br><span class="line">sendOthers(<span class="keyword">this</span>.name+ <span class="string">"加入了群聊..."</span>, <span class="keyword">true</span>); <span class="comment">//告诉大家谁加入了群聊</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">relese();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 服务器接收到客户端发送的数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">recieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = dis.readUTF();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">relese();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器给客户点发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos.writeUTF(msg);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">relese();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 群发 ： 获取自己的消息， 发送给别人</span></span><br><span class="line"><span class="comment"> * 私聊： 约定数据格式 ： <span class="doctag">@xxx</span>:msg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendOthers</span><span class="params">(String msg, <span class="keyword">boolean</span> isSys)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isPrivate = msg.startsWith(<span class="string">"@"</span>); <span class="comment">//私聊</span></span><br><span class="line"><span class="keyword">if</span>(isPrivate)&#123; <span class="comment">//私聊</span></span><br><span class="line"><span class="keyword">int</span> idx = msg.indexOf(<span class="string">":"</span>); <span class="comment">//冒号的位置</span></span><br><span class="line"><span class="comment">// 获取目标和数据</span></span><br><span class="line">String targetName = msg.substring(<span class="number">1</span>, idx);</span><br><span class="line">msg = msg.substring(idx+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 遍历客户，找到指定目标</span></span><br><span class="line"><span class="keyword">for</span>(Channel target : all)&#123;</span><br><span class="line"><span class="keyword">if</span>(target.name.equals(targetName))&#123;</span><br><span class="line">target.send(<span class="keyword">this</span>.name +<span class="string">"悄悄地对你说： "</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 遍历容器</span></span><br><span class="line"><span class="keyword">for</span>(Channel c: all)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == c)&#123; <span class="comment">//自己</span></span><br><span class="line"><span class="keyword">continue</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!isSys)</span><br><span class="line">c.send(<span class="keyword">this</span>.name+<span class="string">"对所有人说： "</span>+msg);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">c.send(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relese</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.isRuning = <span class="keyword">false</span>;</span><br><span class="line">Release.reslese(dos, dis, client);</span><br><span class="line"><span class="comment">// 移除容器的客户端</span></span><br><span class="line">all.remove(<span class="keyword">this</span>);</span><br><span class="line">sendOthers(<span class="keyword">this</span>.name+<span class="string">"离开了群聊..."</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String msg =<span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span>(isRuning)&#123;</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line">msg  = recieve();</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="string">""</span>.equals(msg))&#123;</span><br><span class="line"><span class="comment">//send(msg);</span></span><br><span class="line">sendOthers(msg, <span class="keyword">false</span>); <span class="comment">// 群聊</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2. 客户端"></a>2. 客户端</h2><p>功能：</p><blockquote><p>1.发送消息给服务器</p><p>2.从服务器那边接收消息</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatVersion;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.nio.Buffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextExtPackage.StringNameHelper;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在线聊天室：客户端  </span></span><br><span class="line"><span class="comment"> * 目标：群聊 </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZHLAS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------------客户端--------------"</span>);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"请输入你的姓名："</span>);</span><br><span class="line">String name = br.readLine();</span><br><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">8888</span>); <span class="comment">// 建立连接</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Send(client, name)).start();  <span class="comment">//  发送</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Recieve(client)).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatVersion;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 发送端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZHLAS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket client;</span><br><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line"><span class="keyword">private</span> BufferedReader br; </span><br><span class="line"><span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isRuning = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Send</span><span class="params">(Socket client, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line">br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">send(name); <span class="comment">// 把客户端的名称发送给服务器</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">this</span>.isRuning = <span class="keyword">false</span>;</span><br><span class="line">Release.reslese(dos, br, client);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 写出</span></span><br><span class="line">dos.writeUTF(msg);</span><br><span class="line">dos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">this</span>.isRuning = <span class="keyword">false</span>;</span><br><span class="line">Release.reslese(dos, br);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(isRuning)&#123;</span><br><span class="line">String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = br.readLine();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">this</span>.isRuning = <span class="keyword">false</span>;</span><br><span class="line">Release.reslese(br);</span><br><span class="line">&#125;</span><br><span class="line">send(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatVersion;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZHLAS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recieve</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket client;</span><br><span class="line"><span class="keyword">private</span> DataInputStream dis;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isRuning = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Recieve</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">this</span>.isRuning = <span class="keyword">false</span>;</span><br><span class="line">Release.reslese(dis, client);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">recieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String msg =<span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = dis.readUTF();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">Release.reslese(dis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(isRuning)&#123;</span><br><span class="line">String msg = recieve();</span><br><span class="line"><span class="keyword">if</span>(!<span class="string">""</span>.equals(msg))</span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3-释放资源"><a href="#3-释放资源" class="headerlink" title="3. 释放资源"></a>3. 释放资源</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatVersion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Release</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reslese</span><span class="params">(Closeable... targets)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Closeable target: targets)&#123;</span><br><span class="line"><span class="keyword">if</span>(target != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">target.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="4-运行效果"><a href="#4-运行效果" class="headerlink" title="4. 运行效果"></a>4. 运行效果</h2><p><a href="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582388285811.png" data-fancybox="group" data-caption="1582388285811" class="fancybox"><img alt="1582388285811" style="zoom:150%;" data-src="/2020/02/19/Java%E4%B8%93%E9%A2%98%E4%B9%8BSocket%E7%BC%96%E7%A8%8B/1582388285811.png" class="lazyload" title="1582388285811"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://Castile.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://Castile.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Zero-Shot Video Object Segmentation via Attentive Graph Neural Networks-ICCV2019</title>
    <link href="https://castile.github.io/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/"/>
    <id>https://castile.github.io/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/</id>
    <published>2020-02-19T07:45:52.000Z</published>
    <updated>2020-02-19T13:43:00.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Zero-Shot-Video-Object-Segmentation-via-Attentive-Graph-Neural-Networks（ICCV2019）"><a href="#Zero-Shot-Video-Object-Segmentation-via-Attentive-Graph-Neural-Networks（ICCV2019）" class="headerlink" title="Zero-Shot Video Object Segmentation via Attentive Graph Neural Networks（ICCV2019）"></a>Zero-Shot Video Object Segmentation via Attentive Graph Neural Networks（ICCV2019）</h1><p>  Wenguan Wang1∗,  Xiankai Lu1∗,  Jianbing Shen1y,  David Crandall2,  Ling Shao1<br>       Inception Institute of Artificial Intelligence,   UAE  Indiana University, USA  </p><h1 id="通过图注意力神经网络的Zero-Shot视频目标分割"><a href="#通过图注意力神经网络的Zero-Shot视频目标分割" class="headerlink" title="通过图注意力神经网络的Zero-Shot视频目标分割"></a>通过图注意力神经网络的Zero-Shot视频目标分割</h1><h2 id="代码：-https-github-com-Castile-AGNNForVOS"><a href="#代码：-https-github-com-Castile-AGNNForVOS" class="headerlink" title="代码：  https://github.com/Castile/AGNNForVOS"></a>代码：  <a href="https://github.com/Castile/AGNNForVOS" target="_blank" rel="noopener">https://github.com/Castile/AGNNForVOS</a></h2><h1 id="一、-概述"><a href="#一、-概述" class="headerlink" title="一、 概述"></a>一、 概述</h1><p>​        提出了一种基于图注意力神经网络的用于Zero-Shot的视频目标分割算法。 AGNN将此任务重新定义为在图上进行迭代信息融合的过程 。 具体来说，AGNN构建一个全连通图，有效地将帧表示为节点，任意帧对之间的关系表示为边。 潜在的两两关系由一个可微分的注意机制来描述。通过参数化消息传递，AGNN能够有效地捕获和挖掘视频帧之间更丰富、更高阶的关系，从而更全面地理解视频内容，更准确地估计前景。大量的实验验证了AGNN能够学习视频帧或相关图像之间潜在的语义或者外观关系，并找出共同的目标。【基于全局的视角】  </p><hr><h1 id="二、-目前的方法"><a href="#二、-目前的方法" class="headerlink" title="二、 目前的方法"></a>二、 目前的方法</h1><p>​        基于深度学习的方法需要大量的训练数据，利用<strong>双流网络</strong>来结合局部信息和外观信息，使用光流来对连续两帧进行运动的建模，使用RNN对时序建模。但是它们普遍存在两个<strong>局限性</strong>。首先，它们主要关注连续帧之间的局部成对或顺序关系，而忽略了帧之间普遍存在的高阶关系(因为来自同一视频的帧通常是相关的)。其次，由于他们没有充分利用丰富的关系，他们不能完全捕捉视频内容，因此对前景的估计效果很差。从另一个角度来看，由于视频对象通常存在底层对象遮挡、尺度变化大、外观变化大，仅考虑视频中连续关系或局部成对关系时，很难正确推断前景。</p><p>Zero-Shot参考：《  <a href="https://arxiv.org/pdf/1903.05612" target="_blank" rel="noopener">Rvos: End to-end recurrent network for video object segmentation</a>  》</p><p> 采用双流网络结合局部运动和外观信息，采用RNN逐帧建模 ：</p><ol><li>Segflow: Joint learning for video object segmentation and optical flow. In ICCV, 2017  </li><li>Fusionseg: Learning to combine motion and appearance for fully automatic segmention of generic objects in videos. In CVPR,2017.</li><li>Learning video object segmentation with visual memory. In ICCV, 2017.  </li><li>Unsupervised video object segmentation with motion-based bilateral networks. In ECCV, 2018.  </li><li>Pyramid dilated deeper convlstm for video salient object detection. In ECCV, 2018  </li></ol><hr><h2 id="1-Zero-Shot-solution"><a href="#1-Zero-Shot-solution" class="headerlink" title="1. Zero-Shot solution"></a>1. Zero-Shot solution</h2><ol><li><p>Learning to segment moving objects in videos. In CVPR, 2015 ： 设计了一种基于多层感知的运动目标检测系统</p></li><li><p><strong>Fusionseg</strong>: Learning to combine motion and appearance for fully automatic segmention of generic objects in videos. In CVPR,2017. ： </p></li><li><p><strong>Learning video object segmentation with visual memory. In <em>ICCV</em>, 2017.</strong> </p></li><li><p>Segflow: Joint learning for video object segmentation and optical flow. In <em>ICCV</em>, 2017</p></li><li><p><strong>Instance embedding transfer to unsupervised video object segmentation. In <em>CVPR</em>, 2018.</strong> ： 整合深度学习的实例嵌入和运动显著性来提高性能。</p></li><li><p><strong>Unsupervised video object segmentation with motion-based bilateral networks. In <em>ECCV</em>, 2018.</strong></p></li><li><p>Flow guided recurrent neural encoder for video salient object detection. In <em>CVPR</em>, 2018.</p></li><li><p><strong>See more, know more: Unsupervised video object segmentation with co-attention Siamese networks. In <em>CVPR</em>, 2019.</strong></p></li><li><p>The graph neural network model. <em>IEEE TNNLS</em>, 20(1):61–80, 2009</p></li><li><p>Neural message passing for quantum chemistry. In <em>ICML</em>, 2017</p></li></ol><hr><h2 id="2-基于FCN的："><a href="#2-基于FCN的：" class="headerlink" title="2. 基于FCN的："></a>2. 基于FCN的：</h2><ol><li><p>Triply supervised decoder networks for joint detection and segmentation. In <em>CVPR</em>, 2019</p></li><li><p>Fully convolutional networks for semantic segmentation. In <em>CVPR</em>, 2015.</p></li><li><p>Ranet: Ranking attention network for fast video object segmentation. In <em>ICCV</em>, 2019.</p></li></ol><hr><h2 id="3-双流网络来融合外观信息和运动信息"><a href="#3-双流网络来融合外观信息和运动信息" class="headerlink" title="3. 双流网络来融合外观信息和运动信息"></a>3. 双流网络来融合外观信息和运动信息</h2><ol><li><p>Flow guided recurrent neural encoder for video salient object detection. In <em>CVPR</em>, 2018.</p></li><li><p><strong>Fusionseg: Learning to combine motion and appearance for fully automatic segmention of generic objects in videos. In <em>CVPR</em>, 2017.</strong></p></li><li><p>Segflow: Joint learning for video object segmentation and optical flow. In <em>ICCV</em>, 2017</p></li></ol><hr><h1 id="三、-提出的方法-ZVOS"><a href="#三、-提出的方法-ZVOS" class="headerlink" title="三、 提出的方法-ZVOS"></a>三、 提出的方法-ZVOS</h1><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582099550176.png" data-fancybox="group" data-caption="1582099550176" class="fancybox"><img alt="1582099550176" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582099550176.png" class="lazyload" title="1582099550176"></a></p><p>​        提出了一种注意力图神经网络(<code>AGNN</code>)来解决<code>Zero-Shot</code>视频目标分割(ZVOS)问题，将<code>ZVOS</code>重新定义为一种端到端的、基于消息传递的图信息融合过程(如上图b所示)。具体地，构造了一个全连通图，其中视频帧被表示为节点，两帧之间的两两关系被描述为对应节点之间的边。两帧之间的关联被一个注意力机制有效地捕获，这避免了耗时的光流估计。</p><hr><h1 id="四、-图神经网络GNN"><a href="#四、-图神经网络GNN" class="headerlink" title="四、 图神经网络GNN"></a>四、 图神经网络GNN</h1><p>​        GNN最初是在《 A new model for learning in graph domains. In IJCNN, 2005.》中提出的，并在《         The graph neural network model. IEEE TNNLS, 20(1):61–80, 2009.  》中进一步发展，以处理结构化数据之间的底层关系。</p><p>​        在《The graph neural network model》中，使用RNN对每个节点的状态进行建模，通过传递相邻节点的参数化消息来挖掘节点之间的底层关联。近年来，GNNs已成功应用于分子生物学、计算机视觉、机器学习、自然语言处理等诸多领域。GNNs的另一个流行趋势是将卷积体系结构泛化到任意图形结构数据上，即图卷积神经网络(graph convolution neural network, GCNN)</p><p>​        提出的AGNN属于前一类;它是一个基于GNN的消息传递，其中所有的节点、边和消息传递函数都由神经网络参数化。它与图上的挖掘关系的一般思想相同，但是有显著的差异。</p><p>​        首先，我们的AGNN在空间信息的保留方面是独特的，这与传统的全连通是不同的，而且GNNs对于逐像素预测任务至关重要。其次，为了有效地捕获两个图像帧之间的关系，我们引入了一个可微注意力机制，该机制处理相关信息并产生进一步的鉴别边缘特征。</p><h2 id="1-GNN-的-Survey-papers"><a href="#1-GNN-的-Survey-papers" class="headerlink" title="1. GNN 的 Survey papers"></a>1. GNN 的 Survey papers</h2><ol><li><p><strong>Graph Neural Networks: A Review of Methods and Applications.</strong> arxiv 2018. <a href="https://arxiv.org/pdf/1812.08434.pdf" target="_blank" rel="noopener">paper</a></p><p><em>Jie Zhou, Ganqu Cui, Zhengyan Zhang, Cheng Yang, Zhiyuan Liu, Maosong Sun.</em></p></li><li><p><strong>A Comprehensive Survey on Graph Neural Networks.</strong> arxiv 2019. <a href="https://arxiv.org/pdf/1901.00596.pdf" target="_blank" rel="noopener">paper</a></p><p><em>Zonghan Wu, Shirui Pan, Fengwen Chen, Guodong Long, Chengqi Zhang, Philip S. Yu.</em></p></li><li><p><strong>Deep Learning on Graphs: A Survey.</strong> arxiv 2018. <a href="https://arxiv.org/pdf/1812.04202.pdf" target="_blank" rel="noopener">paper</a></p><p><em>Ziwei Zhang, Peng Cui, Wenwu Zhu.</em></p></li><li><p><strong>Relational Inductive Biases, Deep Learning, and Graph Networks.</strong> arxiv 2018. <a href="https://arxiv.org/pdf/1806.01261.pdf" target="_blank" rel="noopener">paper</a></p><p><em>Battaglia, Peter W and Hamrick, Jessica B and Bapst, Victor and Sanchez-Gonzalez, Alvaro and Zambaldi, Vinicius and Malinowski, Mateusz and Tacchetti, Andrea and Raposo, David and Santoro, Adam and Faulkner, Ryan and others.</em></p></li><li><p><strong>Geometric Deep Learning: Going beyond Euclidean data.</strong> IEEE SPM 2017. <a href="https://arxiv.org/pdf/1611.08097.pdf" target="_blank" rel="noopener">paper</a></p><p><em>Bronstein, Michael M and Bruna, Joan and LeCun, Yann and Szlam, Arthur and Vandergheynst, Pierre.</em></p></li><li><p><strong>Computational Capabilities of Graph Neural Networks.</strong> IEEE TNN 2009. <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4703190" target="_blank" rel="noopener">paper</a></p><p><em>Scarselli, Franco and Gori, Marco and Tsoi, Ah Chung and Hagenbuchner, Markus and Monfardini, Gabriele.</em></p></li><li><p><strong>Neural Message Passing for Quantum Chemistry.</strong> ICML 2017. <a href="https://arxiv.org/pdf/1704.01212.pdf" target="_blank" rel="noopener">paper</a></p><p><em>Gilmer, Justin and Schoenholz, Samuel S and Riley, Patrick F and Vinyals, Oriol and Dahl, George E.</em></p></li><li><p><strong>Non-local Neural Networks.</strong> CVPR 2018. <a href="http://openaccess.thecvf.com/content_cvpr_2018/papers/Wang_Non-Local_Neural_Networks_CVPR_2018_paper.pdf" target="_blank" rel="noopener">paper</a></p><p><em>Wang, Xiaolong and Girshick, Ross and Gupta, Abhinav and He, Kaiming.</em></p></li><li><p><strong>The Graph Neural Network Model.</strong> IEEE TNN 2009. <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4700287" target="_blank" rel="noopener">paper</a></p><p><em>Scarselli, Franco and Gori, Marco and Tsoi, Ah Chung and Hagenbuchner, Markus and Monfardini, Gabriele.</em></p></li></ol><h2 id="2-GNN-的表示"><a href="#2-GNN-的表示" class="headerlink" title="2. GNN 的表示"></a>2. GNN 的表示</h2><p>参考：</p><ol><li><a href="https://blog.csdn.net/u011748542/article/details/86289511" target="_blank" rel="noopener">图神经网络模型 The Graph Neural Network Model</a></li><li><a href="https://zhuanlan.zhihu.com/p/76290138" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/76290138</a> </li></ol><h1 id="五、-AGNN"><a href="#五、-AGNN" class="headerlink" title="五、 AGNN"></a>五、 AGNN</h1><h2 id="1-AGNN"><a href="#1-AGNN" class="headerlink" title="1. AGNN"></a>1. AGNN</h2><blockquote><p>AGNN ： </p><p>1) 提供统一的、端到端可训练的、基于图模型的ZVOS解决方案;</p><p>2) 通过在图上迭代传播和融合消息，有效挖掘视频内部丰富多样的高阶关系;</p><p>3) 利用可微注意机制捕获帧对之间的相关信息。</p></blockquote><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582102330688.png" data-fancybox="group" data-caption="1582102330688" class="fancybox"><img alt="1582102330688" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582102330688.png" class="lazyload" title="1582102330688"></a></p><h2 id="2-符号表示"><a href="#2-符号表示" class="headerlink" title="2. 符号表示"></a>2. 符号表示</h2><p>训练和测视频序列： ${I = \{I_i ∈ R^{w<em>h</em>3} \}_{i = 1}^N}$     大小是 473 x 473</p><p>ZVOS的目的是：产生相关帧的二值分割掩码:    ${S= \{ S_i ∈ \{0, 1\}^{W*H}\}_{i = 1}^N }$</p><p>AGNN将$I $ 表示成有向图 $G = (V, E)$:</p><ul><li>节点<code>node</code>  $v_i ∈ V$， 代表第 $i$ 帧 $I_i$  .</li><li>边 <code>edge</code>  $e_{ij} = (v_i,  v_j) ∈ E$ ,  代表 $I_i 到 I_j 的关系$。</li></ul><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582104154693.png" data-fancybox="group" data-caption="1582104154693" class="fancybox"><img alt="1582104154693" style="zoom:80%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582104154693.png" class="lazyload" title="1582104154693"></a></p><p>​        AGNN的核心思想是在G上执行K个消息传播迭代，以有效地挖掘  $ I $  各个节点（帧）间丰富的高阶关系。这有助于更好地从全局视图捕获视频内容，并获得更准确的前景估计。内注意通过关注同一节点嵌入内的所有位置来计算某个位置的响应。</p><p>​        然后从最后的节点状态 $ \{h_i^K\}_{i = 1}^N$  使用读出函数得到 分割的预测 $ \hat{S}$ </p><h2 id="FCN-Based-Node-Embedding"><a href="#FCN-Based-Node-Embedding" class="headerlink" title="FCN-Based Node Embedding"></a>FCN-Based Node Embedding</h2><p>我们利用DeepLabV3—-一个经典的基于FCN的语义分割架构，提取有效的帧特征，作为节点表示。</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582105002179.png" data-fancybox="group" data-caption="1582105002179" class="fancybox"><img alt="1582105002179" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582105002179.png" class="lazyload" title="1582105002179"></a></p><p>对于一个节点$v_i$  , 初始的 embedding $h_i^0$ 计算：</p><script type="math/tex; mode=display">h_i^0 =  V_i =  F_{DeepLab}(I_i) ∈ R^{W * H * C}</script><p>  $h_i^0$是一个三维的Tensor， 保存了一些空间信息和语义信息。</p><h2 id="Intra-Attention-Based-Loop-Edge-Embedding"><a href="#Intra-Attention-Based-Loop-Edge-Embedding" class="headerlink" title="Intra-Attention Based Loop-Edge Embedding"></a>Intra-Attention Based Loop-Edge Embedding</h2><p>Loop Edge :  $e_{i,i} ∈ E $ ，  Loop Edge Embeddings :  $e_{i,i}^k$  用于捕捉帧内的节点表示（$ h_i^k$）之间的关系。</p><p>把 $e_{i,i}^k$  当做一种   <code>intra-attention mechanism</code>  ：比如（  Non-local neural networks  、Attention is all有need）。 有助于建模的长期，多层次的依赖图像区域 ，即可以捕获图像的长期依赖，属于self-attention（  Self-attention generative adversarial networks. In ICML, 2019. ）。 <code>Intra-Attention</code> 通过关注同一节点Embeddings内的所有位置来计算某个位置的响应 。</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582105775054.png" data-fancybox="group" data-caption="1582105775054" class="fancybox"><img alt="1582105775054" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582105775054.png" class="lazyload" title="1582105775054"></a></p><blockquote><p>*代表卷积操作</p><p>W 代表可以训练的卷积核</p><p> α 是可学习的尺度参数 </p></blockquote><p>上面公式使得 $h_i^k$ 中每个位置的输出元素在对上下文信息进行编码的同时，也对其原始信息进行编码，从而提高了表达能力。</p><h2 id="Inter-Attention-Based-Line-Edge-Embedding"><a href="#Inter-Attention-Based-Line-Edge-Embedding" class="headerlink" title="Inter-Attention Based Line-Edge Embedding"></a>Inter-Attention Based Line-Edge Embedding</h2><p>line edge :  $e_{ij} ∈ E$  连接两个不同的节点。 line-edge Embedding： $e_{i,j}^k$ 用于挖掘两个节点之间的关系。</p><blockquote><p><code>inter-attention mechanism</code>  ：  <a href="https://arxiv.org/pdf/1606.00061.pdf" target="_blank" rel="noopener">《Hierarchical question-image co-attention for visual question     answering. In NIPS, 2016.  》</a></p></blockquote><p>使用inter-attention mechanism来捕获两个节点之间的双向关系：</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582111196501.png" data-fancybox="group" data-caption="1582111196501" class="fancybox"><img alt="1582111196501" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582111196501.png" class="lazyload" title="1582111196501"></a></p><p>$ e_{i,j}^k$ =  $e_{j,i}^k$   。 对于节点$v_i$来说，  $ e_{i,j}^k$  表示 输出边的特征，  $e_{j,i}^k$表示输入边的特征。 $W_c  ∈ ^{C * C}$是一个可学习的权重矩阵。</p><p>$h_i^k ∈ R^{(WH) <em> C}$和 $h_j^k ∈ R^{(WH) </em> C}$  被展平成矩阵的形式。 $ e_{i,j}^k$的每个元素 反映了 $h_i^k$的每一行与$h_j^k$的每一列之间的相似度。</p><p>所以，$ e_{i,j}^k$ 就可以看做节点$v_i$的Embedding 对节点 $v_j$的重要性， 反之亦然。</p><h2 id="Gated-Message-Aggregation"><a href="#Gated-Message-Aggregation" class="headerlink" title="Gated Message Aggregation"></a>Gated Message Aggregation</h2><p>在AGNN中，对于在loop-edge中传递的message，将环边嵌入向量  $e_{i,j}^{k-1}$  本身视为一个message，因为它已经包含了上下文和原始节点信息 。</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582112367589.png" data-fancybox="group" data-caption="1582112367589" class="fancybox"><img alt="1582112367589" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582112367589.png" class="lazyload" title="1582112367589"></a></p><p>$m_{j,i}^k$   : 表示 $v_j$  传递到 $v_i$ 的message， 从而有：</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582112571079.png" data-fancybox="group" data-caption="1582112571079" class="fancybox"><img alt="1582112571079" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582112571079.png" class="lazyload" title="1582112571079"></a></p><p>  softmax(·)  normalizes each row of the input  .</p><p>因此： $m_{j,i}^k$  的每一行是 $h_i^{k-1}$ 的每一行(位置)的加权组合，其中权值来自 $e_{i, j}^{k-1}$  的对应列。  通过这种方式，消息函数M(·)分配其边缘加权特征(即，消息)到邻居节点 。(  <a href="https://arxiv.org/abs/1710.10903" target="_blank" rel="noopener">Graph attention networks</a>. In ICLR, 2018. )</p><p>然后$m_{j,i}^k$ 被重新reshape成 一个三维张量 W <em> H </em> C。</p><p>此外，由于某些节点由于摄像机移位或视野外而产生噪声，因此它们的message可能是无用的甚至有害的。我们应用一个可学习的 门G(·) 来评估一个消息 $m_{j,i}^k$ 的置信度 。</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582113546163.png" data-fancybox="group" data-caption="1582113546163" class="fancybox"><img alt="1582113546163" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582113546163.png" class="lazyload" title="1582113546163"></a></p><p>$F_{GAP}(.)$  表示使用全局平均池化来对通道之间作出响应。 $\sigma$  表示 sigmoid函数。$W_g$ 和 $b_g$ 表示卷积核参数和偏置。</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582113956308.png" data-fancybox="group" data-caption="1582113956308" class="fancybox"><img alt="1582113956308" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582113956308.png" class="lazyload" title="1582113956308"></a></p><p> 这里，门机制用于过滤噪声帧中不相关的信息。 </p><h2 id="ConvGRU-based-Node-State-Update-更新节点状态"><a href="#ConvGRU-based-Node-State-Update-更新节点状态" class="headerlink" title="ConvGRU based Node-State Update[更新节点状态]"></a>ConvGRU based Node-State Update[更新节点状态]</h2><p>在第k次迭代，在收集到所有相邻节点和它自身的信息（$m_i$）后 ，通过将先前的状态$h_i^{k-1}$和 它接收到的消息$m_i^k$       要一起考虑，$v_i$变成一个新的状态$h_i^k$,  为了保留$h_i^{k-1}$和$m_i^k$   的时间信息，使用ConVGRU来更新节点的状态：</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582114662750.png" data-fancybox="group" data-caption="1582114662750" class="fancybox"><img alt="1582114662750" style="zoom:80%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582114662750.png" class="lazyload" title="1582114662750"></a></p><h2 id="Readout-Function-读出函数-预测"><a href="#Readout-Function-读出函数-预测" class="headerlink" title="Readout Function  [读出函数-预测]"></a>Readout Function  [读出函数-预测]</h2><p>在进行了K次迭代的消息传递之后，获得了每个节点$v_i$的最终状态  $ h_i^K $ ,  在读出的阶段通过 <strong>读出函数R()</strong>  获得了分割的预测图 $\hat{S} ∈ [0, 1]^{W * H}$ 。将最终状态节点$ h_i^K $  与 原始节点 $V_i$   concatenate 之后使用读出函数的到预测结果：</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582114987509.png" data-fancybox="group" data-caption="1582114987509" class="fancybox"><img alt="1582114987509" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582114987509.png" class="lazyload" title="1582114987509"></a></p><p>再次，为了保存空间信息，将读出函数实现为一个小型的FCN网络，该网络由三个卷积层和一个<code>sigmoid</code>函数将预测归一化为[0， 1]。</p><p>​        在intra-attention和update function 中，卷积运算是通过1×1个卷积层来实现的。读出函数由两个3×3个卷积层组成，每个卷积层有一个1×1个卷积层。作为基于GNN模型的消息传递，这些函数在所有节点之间共享权重。此外，以上所有函数都经过精心设计，避免了干扰空间信息，这对于ZVOS是必不可少的，因为它是一个像素级的预测任务 。</p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582114107708.png" data-fancybox="group" data-caption="1582114107708" class="fancybox"><img alt="1582114107708" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582114107708.png" class="lazyload" title="1582114107708"></a></p><hr><h1 id="六、-网络的具体信息"><a href="#六、-网络的具体信息" class="headerlink" title="六、 网络的具体信息"></a>六、 网络的具体信息</h1><p>整个模型是端到端的。</p><p>特征提取： DeepLadV3的前5个卷积块 对每个节点 得到初始的状态 $V_i$ =  $h_i^0$  ∈ $R^{60 <em> 60 </em> 256}$</p><p>然后经过K次迭之后得到分割预测图$\hat{S} ∈ [0 ,1] ^{60 × 60}$。</p><h2 id="训练：损失函数"><a href="#训练：损失函数" class="headerlink" title="训练：损失函数"></a>训练：损失函数</h2><p>  binary cross entropy loss   : </p><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582115711854.png" data-fancybox="group" data-caption="1582115711854" class="fancybox"><img alt="1582115711854" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582115711854.png" class="lazyload" title="1582115711854"></a></p><p>值得一提的是，由于AGNN在同一时间处理多个视频帧，因此在组合候选帧数量众多的情况下，它带来了一种非常有效的训练数据扩充策略。在我们的实验中，在训练过程中，由于计算的限制，我们从训练视频集中随机选择2个视频，每个视频采样3帧(N0 = 3)。另外，我们将迭代总数设为K = 3。</p><h1 id="七、-结果"><a href="#七、-结果" class="headerlink" title="七、 结果"></a>七、 结果</h1><p><a href="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582115863806.png" data-fancybox="group" data-caption="1582115863806" class="fancybox"><img alt="1582115863806" style="zoom:100%;" data-src="/2020/02/19/Zero-Shot%20Video%20Object%20Segmentation%20via%20Attentive%20Graph%20Neural%20Networks/1582115863806.png" class="lazyload" title="1582115863806"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="论文阅读" scheme="https://Castile.github.io/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="papers" scheme="https://Castile.github.io/tags/papers/"/>
    
      <category term="VOS" scheme="https://Castile.github.io/tags/VOS/"/>
    
  </entry>
  
  <entry>
    <title>Java之IO流</title>
    <link href="https://castile.github.io/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/"/>
    <id>https://castile.github.io/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/</id>
    <published>2020-02-17T02:36:13.000Z</published>
    <updated>2020-02-19T05:05:22.528Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、-概览"><a href="#一、-概览" class="headerlink" title="一、 概览"></a>一、 概览</h1><p> <a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/io.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:150%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/io.png" class="lazyload" title="img"></a></p><p>Java 的 I/O 大概可以分成以下几类：</p><ul><li>磁盘操作：<code>File</code></li><li>字节操作：<code>InputStream</code> 和 <code>OutputStream</code></li><li>字符操作：<code>Reader</code> 和 <code>Writer</code></li><li>对象操作：<code>Serializable</code></li><li>网络操作：<code>Socket</code></li><li>新的输入/输出：<code>NIO</code></li></ul><h2 id="流分类"><a href="#流分类" class="headerlink" title="流分类"></a>流分类</h2><p>按照方向：<strong>一切以程序为中心</strong></p><ul><li><p>输入流： 数据源到程序（InputStream、Reader 读进来）</p></li><li><p>输出流：  程序到目的地（OutputStream、 Writer 写出去）</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581908492985.png" data-fancybox="group" data-caption="1581908492985" class="fancybox"><img alt="1581908492985" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581908492985.png" class="lazyload" title="1581908492985"></a></p></li></ul><p>按照功能划分：</p><ul><li><strong>节点流</strong>： 可以直接从数据源或者目的地读写数据===&gt; 直接操作数据源</li></ul><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581908122130.png" data-fancybox="group" data-caption="1581908122130" class="fancybox"><img alt="1581908122130" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581908122130.png" class="lazyload" title="1581908122130"></a></p><ul><li><p>处理流(包装流)： 不是直接连接到数据源火目的地，是其他流进行封装。目的主要是简化操作和提高性能。</p><p>装饰者设计模式。</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581908288856.png" data-fancybox="group" data-caption="1581908288856" class="fancybox"><img alt="1581908288856" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581908288856.png" class="lazyload" title="1581908288856"></a></p></li></ul><p><strong>关系</strong>：节点流是在IO的第一线，所有操作必须同节点流。处理流是对节点流的性能进行提升。</p><p>通常很少使用单个流对象，而是将一系列的流以包装的形式链接起来处理数据。</p><p>包装可以在不改变被包装流的前提下，获得更强的流处理功能 。</p><p>按照数据分类：</p><ul><li><p>字节流： 按照字节读取数据（<code>InputStream</code> 、 <code>OutputStream</code>)</p></li><li><p>字符流： 按照字符读取数据（<code>Reader</code>、 <code>Writer</code>）</p><p>编码的不同，从而有了对字符进行高效操作的字符流对象。</p><p>原理： 底层还是基于字节流，自动搜索了指定的码表（UTF-8、GBK、Unicode等）</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581909883561.png" data-fancybox="group" data-caption="1581909883561" class="fancybox"><img alt="1581909883561" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581909883561.png" class="lazyload" title="1581909883561"></a></p><p>典型的字符输入流/输出流的链接如下：</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581910065259.png" data-fancybox="group" data-caption="1581910065259" class="fancybox"><img alt="1581910065259" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581910065259.png" class="lazyload" title="1581910065259"></a></p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581910081342.png" data-fancybox="group" data-caption="1581910081342" class="fancybox"><img alt="1581910081342" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581910081342.png" class="lazyload" title="1581910081342"></a></p><hr></li></ul><h1 id="二、-磁盘操作File"><a href="#二、-磁盘操作File" class="headerlink" title="二、 磁盘操作File"></a>二、 磁盘操作File</h1><p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。 File代表的是一个抽象的表示形式，用于连接java程序与磁盘的桥梁，java只能跟OS交流。</p><h2 id="File类的构造方法"><a href="#File类的构造方法" class="headerlink" title="File类的构造方法"></a>File类的构造方法</h2><ul><li><ul><li><p>| <code>File(File parent, String child)</code>  从父抽象路径名和子路径名字符串创建新的 <code>File</code>实例。 |<br>| —————————————————————————————— |<br>| <code>File(String pathname)</code>  通过将给定的路径名字符串转换为抽象路径名来创建新的 <code>File</code>实例。 |<br>| <code>File(String parent,  String child)</code>  从父路径名字符串和子路径名字符串创建新的 <code>File</code>实例。 |<br>| <code>File(URI uri)</code>  通过将给定的 <code>file:</code> URI转换为抽象路径名来创建新的 <code>File</code>实例。 |</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 11:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"F:/java/base/io/io.png"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        System.out.println(file.length());</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"F:/java/base/io"</span>, <span class="string">"io.png"</span>);</span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"F:/java/base"</span>), <span class="string">"/io/io.png"</span>);</span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line"></span><br><span class="line">        System.out.println(file.getAbsoluteFile()); <span class="comment">// 绝对路径</span></span><br><span class="line">        <span class="comment">// 相对路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">"user.dir"</span>));  <span class="comment">// F:\java\base</span></span><br><span class="line">        <span class="comment">// 构建不存在的文件</span></span><br><span class="line">        File src = <span class="keyword">new</span> File(<span class="string">"kkk/ooo.png"</span>);</span><br><span class="line">        System.out.println(src); <span class="comment">// kkk\ooo.png</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>416160<br>416160<br>416160<br>F:\java\base\io\io.png<br>F:\java\base<br>kkk\ooo.png</p></blockquote></li></ul></li></ul><p>从 Java7 开始，可以使用 Paths 和 Files 代替 File。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Path p = Paths.get(<span class="string">"F:/java/base"</span>,<span class="string">"io/io.png"</span>);</span><br><span class="line">System.out.println(p); <span class="comment">// F:\java\base\io\io.png</span></span><br></pre></td></tr></table></figure></div><h2 id="查看文件的基本信息"><a href="#查看文件的基本信息" class="headerlink" title="查看文件的基本信息"></a>查看文件的基本信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 12:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"F:/java/base/io/io.png"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        System.out.println(<span class="string">"名称："</span> + file.getName());</span><br><span class="line">        System.out.println(<span class="string">"路径: "</span>+ file.getPath());</span><br><span class="line">        System.out.println(<span class="string">"绝对路径: "</span>+ file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"父路径："</span> + file.getParent());</span><br><span class="line">        System.out.println(file.getParentFile().getName()); <span class="comment">// 父对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>名称：io.png<br>路径: F:\java\base\io\io.png<br>绝对路径: F:\java\base\io\io.png<br>父路径：F:\java\base\io<br>io</p></blockquote><h2 id="查看文件的状态"><a href="#查看文件的状态" class="headerlink" title="查看文件的状态"></a>查看文件的状态</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件的状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 12:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File src  = <span class="keyword">new</span> File(<span class="string">"io/io.png"</span>);</span><br><span class="line">        System.out.println(src.length()); <span class="comment">// 字节数 文件的长度</span></span><br><span class="line">        System.out.println(src.getPath());</span><br><span class="line">        System.out.println(src.getAbsoluteFile());</span><br><span class="line">        System.out.println(<span class="string">"是否存在： "</span>+ src.exists());</span><br><span class="line">        System.out.println(<span class="string">"是否是文件： "</span>+ src.isFile());</span><br><span class="line">        System.out.println(<span class="string">"是否是文件夹： "</span>+ src.isDirectory());</span><br><span class="line">        <span class="comment">// 文件状态</span></span><br><span class="line">        src = <span class="keyword">new</span> File(<span class="string">"kkk.jpg"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!src.exists())&#123;</span><br><span class="line">            System.out.println(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(src.isFile())&#123;</span><br><span class="line">                System.out.println(<span class="string">"文件操作"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"文件夹操作"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>416160<br>io\io.png<br>F:\java\base\io\io.png<br>是否存在： true<br>是否是文件： true<br>是否是文件夹： false<br>文件不存在</p></blockquote><h2 id="操作文件夹"><a href="#操作文件夹" class="headerlink" title="操作文件夹"></a>操作文件夹</h2><ul><li><ul><li>| <code>boolean</code> | <code>mkdir()</code>  创建由此抽象路径名命名的目录。                    |<br>| ————- | —————————————————————————————— |<br>| <code>boolean</code> | <code>mkdirs()</code>  创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。 |</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件夹</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 12:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建目录 mkdir() : 确保上级目录存在，不然创建失败</span></span><br><span class="line">        File file =  <span class="keyword">new</span> File(<span class="string">"./io/dir/test"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = file.mkdir();</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        flag = file.mkdirs();  <span class="comment">// 推荐</span></span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>false<br>true</p></blockquote><p>list文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件夹</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 12:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"./io"</span>);</span><br><span class="line">        <span class="comment">// 下级名称</span></span><br><span class="line">        String[] subNames = dir.list(); <span class="comment">// 下面一层的文件名</span></span><br><span class="line">        <span class="keyword">for</span>(String name: subNames)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">        <span class="comment">// 下级对象</span></span><br><span class="line">        File[] subFiles = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File s: subFiles)&#123;</span><br><span class="line">            System.out.println(s.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  所有盘符：</span></span><br><span class="line">        File[] roots = dir.listRoots();</span><br><span class="line">        <span class="keyword">for</span>(File f : roots)&#123;</span><br><span class="line">            System.out.println(f.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>dir<br>io.iml<br>io.png</p><p>src</p><p>dir<br>io.iml<br>io.png</p><p>src</p><p>C:\<br>D:\<br>F:\<br>H:\</p></blockquote><p>递归列出一个目录下的所有文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAllFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="keyword">null</span> || !dir.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dir.isFile()) &#123;</span><br><span class="line">        System.out.println(dir.getName());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (File file : dir.listFiles()) &#123;</span><br><span class="line">        listAllFiles(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>计算文件夹的大小：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 计算一个文件夹的大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 13:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">countFiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"./io"</span>);</span><br><span class="line">        count(file);</span><br><span class="line">        System.out.println(length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(File src)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(src == <span class="keyword">null</span> || !src.exists())&#123; <span class="comment">//文件不存在</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(src.isFile())&#123;</span><br><span class="line">            <span class="comment">// 是一个文件，计算大小</span></span><br><span class="line">            length += src.length();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 不是文件</span></span><br><span class="line">            <span class="keyword">for</span>(File f : src.listFiles())&#123;</span><br><span class="line">                count(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>421864</p></blockquote><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581916190639.png" data-fancybox="group" data-caption="1581916190639" class="fancybox"><img alt="1581916190639" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581916190639.png" class="lazyload" title="1581916190639"></a></p><p>进阶一下：使用面向对象的思维对文件夹进行统计大小。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用面向对象的思维对文件夹进行统计大小。  封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 13:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirCount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> length; <span class="comment">// 文件的长度</span></span><br><span class="line">    <span class="comment">// 源文件</span></span><br><span class="line">    <span class="keyword">private</span> File src;</span><br><span class="line">    <span class="keyword">private</span> String path; <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirCount</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">        src = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">this</span>.count(src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(File src)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(src == <span class="keyword">null</span> || !src.exists())&#123; <span class="comment">//文件不存在</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(src.isFile())&#123;</span><br><span class="line">            <span class="comment">// 是一个文件，计算大小</span></span><br><span class="line">            length += src.length();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 不是文件</span></span><br><span class="line">            <span class="keyword">for</span>(File f : src.listFiles())&#123;</span><br><span class="line">                count(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DirCount dir = <span class="keyword">new</span> DirCount(<span class="string">"./io"</span>);</span><br><span class="line">        System.out.println(dir.getLength());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>422905</p></blockquote><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581916719181.png" data-fancybox="group" data-caption="1581916719181" class="fancybox"><img alt="1581916719181" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581916719181.png" class="lazyload" title="1581916719181"></a></p><hr><h1 id="三、-字符编码"><a href="#三、-字符编码" class="headerlink" title="三、 字符编码"></a>三、 字符编码</h1><blockquote><p>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</p></blockquote><p><strong>编码就是把字符转换为字节，而解码是把字节重新组合成字符。</strong> </p><p>如果编码和解码过程使用不同的编码方式那么就出现了乱码。 </p><ul><li>GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；</li><li>UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；</li><li>UTF-16be 编码中，中文字符和英文字符都占 2 个字节。</li></ul><p>UTF-16be 中的 be 指的是 <code>Big Endian</code>，也就是大端。相应地也有 UTF-16le，le 指的是 <code>Little Endian</code>，也就是小端。</p><p>Java 的内存编码使用双字节编码 <code>UTF-16be</code>，这不是指 Java 只支持这一种编码方式，而是说 <code>char</code> 这种类型使用 <code>UTF-16be</code> 进行编码。<code>char</code> 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 <code>char</code> 来存储。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编码： 字符串 ---&gt; 字节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 15:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentEncode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String msg = <span class="string">"性命生命使命"</span>;  <span class="comment">// 这里使用的是UTF-8编码，中文占3个字节</span></span><br><span class="line">        <span class="comment">// 编码： 字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] datas = msg.getBytes(); <span class="comment">// 使用工程默认的字符集</span></span><br><span class="line">        System.out.println(datas.length); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         编码其他字符集</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            datas = msg.getBytes(<span class="string">"UTF-16LE"</span>); <span class="comment">// 每个用2个字节</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(datas.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        msg = <span class="keyword">new</span> String(datas, <span class="number">0</span>, datas.length, <span class="string">"UTF-16LE"</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// 乱码问题</span></span><br><span class="line">        <span class="comment">// 1. 字节数不够</span></span><br><span class="line">        msg = <span class="keyword">new</span> String(datas,<span class="number">0</span>, datas.length - <span class="number">1</span>, <span class="string">"UTF-16LE"</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 字符集不统一</span></span><br><span class="line">        msg = <span class="keyword">new</span> String(datas,<span class="number">0</span>, datas.length , <span class="string">"gbk"</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>18<br>12<br>性命生命使命<br>性命生命使�<br>‘`}Tu}TO}T</p></blockquote><hr><h2 id="String的编码方式"><a href="#String的编码方式" class="headerlink" title="String的编码方式"></a>String的编码方式</h2><p>String 可以看成一个字符序列，可以指定一个编码方式将它编码为字节序列，也可以指定一个编码方式将一个字节序列解码为 String。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"中文"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">String str2 = <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure></div><p>在调用无参数 <code>getBytes()</code> 方法时，默认的编码方式不是 UTF-16be。双字节编码的好处是可以使用一个 <code>char</code> 存储中文和英文，而将 String 转为 bytes[] 字节数组就不再需要这个好处，因此也就不再需要双字节编码。<code>getBytes()</code> 的默认编码方式与平台有关，一般为 UTF-8。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes();</span><br></pre></td></tr></table></figure></div><hr><h1 id="四、-四大抽象类"><a href="#四、-四大抽象类" class="headerlink" title="四、 四大抽象类"></a>四、 四大抽象类</h1><div class="table-container"><table><thead><tr><th>抽象基类</th><th><strong>字节流</strong></th><th><strong>字符流</strong></th><th>常用方法</th></tr></thead><tbody><tr><td><strong>输入流</strong></td><td><strong>InputStream</strong>   字节输入流</td><td><strong>Reader</strong>  字符输入流</td><td>int read()、void close()</td></tr><tr><td><strong>输出流</strong></td><td><strong>OutputStream</strong>   字节输出流</td><td><strong>Writer</strong>  字符输出流</td><td>void write(int)、void flush()、 void close（）</td></tr></tbody></table></div><ol><li><p>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。</p></li><li><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p></li></ol><h2 id="标准步骤"><a href="#标准步骤" class="headerlink" title="标准步骤"></a>标准步骤</h2><p>想象成搬家的程序：</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581926173859.png" data-fancybox="group" data-caption="1581926173859" class="fancybox"><img alt="1581926173859" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581926173859.png" class="lazyload" title="1581926173859"></a></p><p>①. 创建源    ②. 选择流    ③. 操作(读、写)    ④. 释放资源</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *标准步骤：</span></span><br><span class="line"><span class="comment"> * ①. 创建源</span></span><br><span class="line"><span class="comment"> * ②. 选择流</span></span><br><span class="line"><span class="comment"> * ③. 操作(读、写)</span></span><br><span class="line"><span class="comment"> * ④. 释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="comment">//①. 创建源</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"F:\\java\\base\\io\\a.txt"</span>);</span><br><span class="line">         <span class="comment">//②. 选择流</span></span><br><span class="line">        InputStream in = <span class="keyword">null</span>; <span class="comment">// 作用域提前</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="comment">//③. 操作(读、写)</span></span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="keyword">while</span> ((temp = in.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>)temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文件末尾返回-1</span></span><br><span class="line">            <span class="comment">// ④. 释放资源</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != in)  <span class="comment">// 避免空指针异常，需要加上判断</span></span><br><span class="line">                    in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>H<br>e<br>l<br>l<br>o</p><p>W<br>o<br>r<br>l<br>d<br>!</p></blockquote><h2 id="文件字节输入流FileInputStream"><a href="#文件字节输入流FileInputStream" class="headerlink" title="文件字节输入流FileInputStream"></a>文件字节输入流FileInputStream</h2><p>选择流就相当于选择搬家公司，read()方法就是一个字节一个字节地读取，就相当于一件物品的去搬， 而read(bytr[] a) 相当于用卡车来搬！更加快速。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *标准步骤：</span></span><br><span class="line"><span class="comment"> * ①. 创建源</span></span><br><span class="line"><span class="comment"> * ②. 选择流</span></span><br><span class="line"><span class="comment"> * ③. 操作(读、写)</span></span><br><span class="line"><span class="comment"> * ④. 释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="comment">//①. 创建源</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"F:\\java\\base\\io\\a.txt"</span>);</span><br><span class="line">         <span class="comment">//②. 选择流</span></span><br><span class="line">        InputStream in = <span class="keyword">null</span>; <span class="comment">// 作用域提前</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="comment">//③. 操作(读、写)</span></span><br><span class="line">            <span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 缓冲容器</span></span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>; <span class="comment">// 接受长度</span></span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(flush)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//字节数组 --&gt; 字符串 （解码）</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(car, <span class="number">0</span>, len);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 文件末尾返回-1</span></span><br><span class="line">            <span class="comment">// ④. 释放资源</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != in)  <span class="comment">// 避免空指针异常，需要加上判断</span></span><br><span class="line">                    in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Hello World! zhu hong liang</p></blockquote><h2 id="文件字节流输出流FileOutputStream"><a href="#文件字节流输出流FileOutputStream" class="headerlink" title="文件字节流输出流FileOutputStream"></a>文件字节流输出流FileOutputStream</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 文件字节输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 16:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTes02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// create resource</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"./io/dext.txt"</span>);</span><br><span class="line">        <span class="comment">//choose Stream</span></span><br><span class="line">        FileOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(file, <span class="keyword">true</span>); <span class="comment">// 追加标志</span></span><br><span class="line">            String msg = <span class="string">"Hello , welcome to BeiJing !"</span>;</span><br><span class="line">            <span class="comment">// buffer array</span></span><br><span class="line">            <span class="keyword">byte</span>[] buff = msg.getBytes();</span><br><span class="line">            <span class="comment">// write</span></span><br><span class="line">            os.write(buff,<span class="number">0</span>, buff.length);</span><br><span class="line">            <span class="comment">// flush</span></span><br><span class="line">            os.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581929276665.png" data-fancybox="group" data-caption="1581929276665" class="fancybox"><img alt="1581929276665" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581929276665.png" class="lazyload" title="1581929276665"></a></p><h2 id="实现文件拷贝"><a href="#实现文件拷贝" class="headerlink" title="实现文件拷贝"></a>实现文件拷贝</h2><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581929414683.png" data-fancybox="group" data-caption="1581929414683" class="fancybox"><img alt="1581929414683" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581929414683.png" class="lazyload" title="1581929414683"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现文件拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 16:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File src = <span class="keyword">new</span> File(<span class="string">"./io/io.png"</span>);</span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(<span class="string">"./io/io_cpoy.png"</span>); <span class="comment">// 写出的文件</span></span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> cnt;</span><br><span class="line">            <span class="keyword">while</span> ((cnt = in.read(buff, <span class="number">0</span>, buff.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buff, <span class="number">0</span>, cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123; <span class="comment">// 关闭资源  先打开的后关闭</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(os != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="思考：进阶—-gt-实现文件夹的拷贝"><a href="#思考：进阶—-gt-实现文件夹的拷贝" class="headerlink" title="思考：进阶—&gt; 实现文件夹的拷贝"></a>思考：进阶—&gt; 实现文件夹的拷贝</h2><h2 id="Reader-与-Writer"><a href="#Reader-与-Writer" class="headerlink" title="Reader 与 Writer"></a>Reader 与 Writer</h2><p>不管是磁盘还是网络传输，最小的存储单元都是<strong>字节</strong>，而不是字符。但是在程序中操作的通常是字符形式的数据，因此需要提供对字符进行操作的方法。</p><ul><li>InputStreamReader 实现从字节流解码成字符流；</li><li>OutputStreamWriter 实现字符流编码成为字节流。</li></ul><p>实现逐行输出文本文件的内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFileContent</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileReader fileReader = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(fileReader);</span><br><span class="line"></span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装饰者模式使得 BufferedReader 组合了一个 Reader 对象</span></span><br><span class="line">    <span class="comment">// 在调用 BufferedReader 的 close() 方法时会去调用 Reader 的 close() 方法</span></span><br><span class="line">    <span class="comment">// 因此只要一个 close() 调用即可</span></span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="ByteArrayInputStream-amp-ByteArrayOuputStream"><a href="#ByteArrayInputStream-amp-ByteArrayOuputStream" class="headerlink" title="ByteArrayInputStream &amp;  ByteArrayOuputStream"></a>ByteArrayInputStream &amp;  ByteArrayOuputStream</h2><p>上面的FileInputStream中源都是一个文件，文件是存储在磁盘中的，Java程序无法直接访问到，需要通过OS来连接，这里的字节数组流ByteArrayInputStream 的源是内存中的一个字节数组，JVM是可以直接访问的，与操作系统无关了，并且字节数组流不需要close资源，因为JVM有GC来管理，会由JVM来释放，不需要自己手动关闭。</p><p>字符串、一切数据，所有的都可以转换成字节数组，方便网络的传输，在底层使用的较多。</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581937779174.png" data-fancybox="group" data-caption="1581937779174" class="fancybox"><img alt="1581937779174" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581937779174.png" class="lazyload" title="1581937779174"></a></p><p>ByteArrayInputStream中的构造函数:</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581937843825.png" data-fancybox="group" data-caption="1581937843825" class="fancybox"><img alt="1581937843825" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581937843825.png" class="lazyload" title="1581937843825"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字节数组输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020年2月17日19:12:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="comment">//①. 创建源</span></span><br><span class="line">        <span class="keyword">byte</span>[] src = <span class="string">"talk is cheap show me the code"</span>.getBytes();</span><br><span class="line">         <span class="comment">//②. 选择流</span></span><br><span class="line">        InputStream in = <span class="keyword">null</span>; <span class="comment">// 作用域提前</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> ByteArrayInputStream(src);</span><br><span class="line">            <span class="comment">//③. 操作(读、写)</span></span><br><span class="line">            <span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>]; <span class="comment">// 缓冲容器 每三个字符读一次</span></span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>; <span class="comment">// 接受长度</span></span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(flush)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//字节数组 --&gt; 字符串 （解码）</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(flush, <span class="number">0</span>, len);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文件末尾返回-1</span></span><br><span class="line">            <span class="comment">// ④. 释放资源</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != in)  <span class="comment">// 可以不用关闭</span></span><br><span class="line">                    in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>ByteArrayOutputStream</code>该类实现了将数据写入字节数组的输出流。当数据写入缓冲区时，缓冲区会自动增长。数据可以使用<code>toByteArray()</code>和<code>toString()</code> 。不需要在构造方法中传入目的数组。</p><p>关闭<code>ByteArrayOutputStream</code>没有任何效果。  该流中的方法可以在流关闭后调用，而不生成<code>IOException</code> 。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 字节数组输出流`ByteArrayOutputStream`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 16:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOTes04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// create resource</span></span><br><span class="line">        <span class="keyword">byte</span>[] dest = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//choose Stream 要使用新增方法，不能使用多态</span></span><br><span class="line">        ByteArrayOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = <span class="keyword">new</span> ByteArrayOutputStream(); <span class="comment">// 不需要传入目的地</span></span><br><span class="line">            String msg = <span class="string">"Hello , welcome to BeiJing !"</span>;</span><br><span class="line">            <span class="comment">// buffer array</span></span><br><span class="line">            <span class="keyword">byte</span>[] buff = msg.getBytes();</span><br><span class="line">            <span class="comment">// write</span></span><br><span class="line">            os.write(buff,<span class="number">0</span>, buff.length);</span><br><span class="line">            <span class="comment">// flush</span></span><br><span class="line">            os.flush();</span><br><span class="line">            dest = os.toByteArray(); <span class="comment">// 获取数据</span></span><br><span class="line">            System.out.println(dest.length+<span class="string">"===&gt;"</span>+<span class="keyword">new</span> String(dest,<span class="number">0</span>, os.size()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="综合-对接流"><a href="#综合-对接流" class="headerlink" title="综合-对接流"></a>综合-对接流</h2><p>例：将一张图片读取到一个字节数组中，先使用文件输入流，通过程序做一个中转，程序再写出到字节数组中。然后字节数组通过字节数组输入流到程序中，再使用文件输出流将字节数组写回到文件中（图片）。</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581941301174.png" data-fancybox="group" data-caption="1581941301174" class="fancybox"><img alt="1581941301174" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581941301174.png" class="lazyload" title="1581941301174"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 字节数组输出流`ByteArrayOutputStream`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 16:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">picTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 图片转换成字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] datas = FileToByteArray(<span class="string">"./io/io.png"</span>);</span><br><span class="line">        System.out.println(datas.length);</span><br><span class="line">        ByteArrayToFile(datas, <span class="string">"./io/ppp_img.png"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  图片到字节数组中</span></span><br><span class="line"><span class="comment">     *  1. 图片到程序： FileInputStream</span></span><br><span class="line"><span class="comment">     *  2. 程序到数组： ByteArrayOutputStream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] FileToByteArray(String filepath)&#123;</span><br><span class="line">        <span class="comment">//①. 创建源  目的地</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(filepath);</span><br><span class="line">        <span class="keyword">byte</span>[] dext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//②. 选择流</span></span><br><span class="line">        InputStream in = <span class="keyword">null</span>; <span class="comment">// 作用域提前</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="comment">//③. 操作</span></span><br><span class="line">            <span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 缓冲容器</span></span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>; <span class="comment">// 接受长度</span></span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(flush)) != -<span class="number">1</span>)&#123;</span><br><span class="line">              bos.write(flush, <span class="number">0</span>, len); <span class="comment">//写出到字节数组</span></span><br><span class="line">            &#125;</span><br><span class="line">            bos.flush();</span><br><span class="line">            <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> != in)  <span class="comment">// 避免空指针异常，需要加上判断</span></span><br><span class="line">                    in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *字节数组写出到图片</span></span><br><span class="line"><span class="comment">     * 1. 字节数组读取到程序中 : ByteArrayOutputStream</span></span><br><span class="line"><span class="comment">     * 2. 程序写出到文件: FileOutputStream</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ByteArrayToFile</span><span class="params">(<span class="keyword">byte</span>[] datas, String filePath)</span></span>&#123;</span><br><span class="line">        <span class="comment">//①. 创建源</span></span><br><span class="line">        File dest = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="comment">//②. 选择流(增加方法) 不能使用多态</span></span><br><span class="line">        InputStream in = <span class="keyword">null</span>; <span class="comment">// 作用域提前</span></span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> ByteArrayInputStream(datas);</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line">            <span class="comment">//③. 操作(读、写)</span></span><br><span class="line">            <span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">10</span>]; <span class="comment">// 缓冲容器</span></span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>; <span class="comment">// 接受长度</span></span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(flush)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//字节数组 --&gt; 文件</span></span><br><span class="line">                os.write(flush, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            os.flush(); <span class="comment">//刷新</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != os)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="封装成工具类"><a href="#封装成工具类" class="headerlink" title="封装成工具类"></a>封装成工具类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 21:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 文件 到文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"./io/a.txt"</span>);</span><br><span class="line">            OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"./io/a_copy.txt"</span>);</span><br><span class="line">            copy(is, os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件到字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] datas = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"./io/io.png"</span>);</span><br><span class="line">            ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            copy(is, os);</span><br><span class="line">            datas = os.toByteArray();</span><br><span class="line">            System.out.println(datas.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字节数组到文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = <span class="keyword">new</span> ByteArrayInputStream(datas);</span><br><span class="line">            OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"./io/io_copyppppp.png"</span>);</span><br><span class="line">            copy(is, os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 对接输入输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os 输出流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(InputStream in, OutputStream os)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> cnt;</span><br><span class="line">            <span class="keyword">while</span> ((cnt = in.read(buff, <span class="number">0</span>, buff.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buff, <span class="number">0</span>, cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ios</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable... ios)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Closeable io: ios)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(io != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    io.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="装饰者设计模式"><a href="#装饰者设计模式" class="headerlink" title="装饰者设计模式"></a>装饰者设计模式</h2><p>Java I/O 使用了装饰者模式来实现。以 <code>InputStream</code> 为例，</p><ul><li>InputStream 是抽象组件；</li><li>FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作；</li><li>FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能。例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。</li></ul><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581949697054.png" data-fancybox="group" data-caption="1581949697054" class="fancybox"><img alt="1581949697054" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581949697054.png" class="lazyload" title="1581949697054"></a></p><p>实例化一个具有缓存功能的字节流对象时，只需要在 <code>FileInputStream</code> 对象上再套一层 <code>BufferedInputStream</code> 对象即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br></pre></td></tr></table></figure></div><p><code>DataInputStream</code> 装饰者提供了对更多数据类型进行输入的操作，比如 <code>int</code>、<code>double</code> 等基本类型。 </p><p>装饰者模式有四个对象：</p><blockquote><p>1、抽象组件： 需要装饰的抽象对象（接口或者抽象父类）</p><p>2、 具体组件： 需要装饰的对象（如上例的Person类）</p><p>3、 抽象装饰类： 包含了对抽象组件的引用以及装饰者共有的方法（写到构造器里面）</p><p>4、 具体装饰类： 被装饰的对象</p></blockquote><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581953544852.png" data-fancybox="group" data-caption="1581953544852" class="fancybox"><img alt="1581953544852" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581953544852.png" class="lazyload" title="1581953544852"></a></p><blockquote><p>装饰者与被装饰者拥有共同的超类，继承的目的是继承类型，而不是行为</p></blockquote><h3 id="模拟对人的声音放大"><a href="#模拟对人的声音放大" class="headerlink" title="模拟对人的声音放大"></a>模拟对人的声音放大</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 装饰者模式： 实现放大器对声音的放大功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 22:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorateTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="number">10</span>);</span><br><span class="line">        p.say();</span><br><span class="line">        <span class="comment">// 装饰</span></span><br><span class="line">        Amplifier am = <span class="keyword">new</span> Amplifier(p);</span><br><span class="line">        am.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Say</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Say</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vioce = <span class="number">10</span>; <span class="comment">// 10 db</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> vioce)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vioce = vioce;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVioce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vioce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人的声音为："</span>+ <span class="keyword">this</span>.getVioce());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Amplifier</span> <span class="keyword">implements</span> <span class="title">Say</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person p;</span><br><span class="line">    Amplifier(Person p)&#123;</span><br><span class="line">        <span class="keyword">this</span>.p = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人的声音为："</span>+ p.getVioce() * <span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">"噪音........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>人的声音为：10<br>人的声音为：1000<br>噪音………</p></blockquote><h3 id="模拟咖啡"><a href="#模拟咖啡" class="headerlink" title="模拟咖啡"></a>模拟咖啡</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 装饰者模式： 模拟咖啡你</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 1、抽象组件： 需要装饰的抽象对象（接口或者抽象父类）</span></span><br><span class="line"><span class="comment"> * 2、 具体组件： 需要装饰的对象（如上例的Person类）</span></span><br><span class="line"><span class="comment"> * 3、 抽象装饰类： 包含了对抽象组件的引用以及装饰者共有的方法（写到构造器里面）</span></span><br><span class="line"><span class="comment"> * 4、 具体装饰类： 被装饰的对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-17 22:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecorateTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Drink coffe = <span class="keyword">new</span> Coffe();</span><br><span class="line">        System.out.println(coffe.info() +<span class="string">" ===&gt;"</span>+ coffe.cost());</span><br><span class="line">        Drink suger = <span class="keyword">new</span> Sugar(coffe); <span class="comment">// 装饰  加糖</span></span><br><span class="line">        System.out.println(suger.info() +<span class="string">" ===&gt;"</span>+ suger.cost());</span><br><span class="line">        Drink milk = <span class="keyword">new</span> Milk(coffe); <span class="comment">//装饰 ， 加牛奶</span></span><br><span class="line">        System.out.println(milk.info() +<span class="string">" ===&gt;"</span>+ milk.cost());</span><br><span class="line">        <span class="comment">// 还可以混合： 既加糖也加牛奶</span></span><br><span class="line">        suger = <span class="keyword">new</span> Sugar(milk);</span><br><span class="line">        System.out.println(suger.info() +<span class="string">" ===&gt;"</span>+ suger.cost()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 饮料接口 -===&gt; 抽象组件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>; <span class="comment">// 费用</span></span><br><span class="line">    <span class="function">String <span class="title">info</span><span class="params">()</span></span>; <span class="comment">// 说明</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffe</span> <span class="keyword">implements</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line">    String name = <span class="string">"原味咖啡"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象装饰类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line">    <span class="comment">//包含了对抽象组件的引用（写到构造器里面）</span></span><br><span class="line">    Drink drink;</span><br><span class="line">    Decorator(Drink drink)&#123;</span><br><span class="line">        <span class="keyword">this</span>.drink = drink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以及装饰者共有的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.drink.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.drink.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体装饰类： 被装饰的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    Milk(Drink drink) &#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.drink.cost() * <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.drink.info() + <span class="string">"加了牛奶"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体装饰类： 被装饰的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sugar</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    Sugar(Drink drink) &#123;</span><br><span class="line">        <span class="keyword">super</span>(drink);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.drink.cost() * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.drink.info() + <span class="string">"加了蔗糖"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>原味咖啡  = &gt;10.0<br>原味咖啡加了蔗糖 =&gt;20.0<br>原味咖啡加了牛奶 =&gt;40.0<br>原味咖啡加了牛奶加了蔗糖 ===&gt;80.0</p></blockquote><hr><h1 id="五、-IO-缓冲流"><a href="#五、-IO-缓冲流" class="headerlink" title="五、 IO-缓冲流"></a>五、 IO-缓冲流</h1><h2 id="缓冲字节流BufferedInputStream-、BufferedOutputStream"><a href="#缓冲字节流BufferedInputStream-、BufferedOutputStream" class="headerlink" title="缓冲字节流BufferedInputStream 、BufferedOutputStream"></a>缓冲字节流BufferedInputStream 、BufferedOutputStream</h2><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581995603824.png" data-fancybox="group" data-caption="1581995603824" class="fancybox"><img alt="1581995603824" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1581995603824.png" class="lazyload" title="1581995603824"></a></p><p>缓冲流可以提高性能，一开始的是字节流的read()方法，可以比喻成蚂蚁搬家，一个字节一个字节地读取，使用read(byte[] buff), 自己维护了一个字节数组，相当于叫了一个搬家公司用卡车搬；而这里的缓冲流是在内部维护了一个缓冲区，默认 8k，将字节流打包，放入缓冲流中，相当于使用了一个更大的卡车。可以提高性能，避免频繁去读写。</p><p>这里的缓冲流成为处理流，任何一个处理流，不管怎么嵌套，最底层都是一个节点流，没有节点流就没有处理流。</p><p>随着流越来越多，释放资源可以直接释放处理流，处理流内部会自动释放节点流。如果需要手动释放，释放的原则是：从里到外，一依次释放。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File src = <span class="keyword">new</span> File(<span class="string">"./io/io.png"</span>);</span><br><span class="line">        <span class="comment">// try... with...resource</span></span><br><span class="line">        <span class="keyword">try</span>(InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(src)); OutputStream os = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./io/io_copy.png"</span>))) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> cnt;</span><br><span class="line">            <span class="keyword">while</span> ((cnt = in.read(buff, <span class="number">0</span>, buff.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buff, <span class="number">0</span>, cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="字符缓冲流BufferedReader、BufferedWriter"><a href="#字符缓冲流BufferedReader、BufferedWriter" class="headerlink" title="字符缓冲流BufferedReader、BufferedWriter"></a>字符缓冲流BufferedReader、BufferedWriter</h2><p>这两个流有许多新增方法，注意不要使用多态。</p><p><code>BufferedReader中的String readLine()</code>   读一行文字。 </p><p><code>BufferedWriter中的void</code>  <code>newLine()</code>  写一行行分隔符。</p><p>使用缓冲流实现纯文本的拷贝：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 利用BufferedReader和BufferWriter实现纯文本拷贝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-18 13:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTxt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File src = <span class="keyword">new</span> File(<span class="string">"./io/dext.txt"</span>);</span><br><span class="line">        File dest = <span class="keyword">new</span> File(<span class="string">"./io/copy_dext.txt"</span>);</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(src)); BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(dest)))&#123;</span><br><span class="line">            String line = <span class="keyword">null</span>; <span class="comment">// 逐行读取</span></span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                bw.write(line);</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="转换流-InputStreamReader、OutputStreamWriter"><a href="#转换流-InputStreamReader、OutputStreamWriter" class="headerlink" title="转换流-InputStreamReader、OutputStreamWriter"></a>转换流-InputStreamReader、OutputStreamWriter</h2><p>1.将字节流转换成字符流。字节流可以处理一切内容，文本、图片、音频、视频。所以在很多框架和系统中底层返回的是一个字节流。但是里面是纯文本的时候，就需要进行转换。</p><p>如<code>System.in</code> 和 <code>System.out</code>都是属于字节流。</p><p>2.在底层中，如果是一个纯文本的话，涉及到一个字符集，将字节转换成字符叫做解码，如果工程中的字符集或者系统的字符集与源的字符集不一致的话，就会出现乱码问题。这时候我们需要自己<strong>指定字符集</strong>。</p><h3 id="InputStreamReader解码"><a href="#InputStreamReader解码" class="headerlink" title="InputStreamReader解码"></a>InputStreamReader解码</h3><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582006048234.png" data-fancybox="group" data-caption="1582006048234" class="fancybox"><img alt="1582006048234" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582006048234.png" class="lazyload" title="1582006048234"></a></p><p><code>String  getEncoding()</code> : 返回此流使用的字符编码的名称。</p><h3 id="OutputStreamWriter编码"><a href="#OutputStreamWriter编码" class="headerlink" title="OutputStreamWriter编码"></a>OutputStreamWriter编码</h3><p><code>OutputStreamWriter</code>是字符流到字节流的桥梁：使用指定的字符编码<a href="../../java/nio/charset/Charset.html"><code>charset</code></a>将指定的字符编码成字节 。  它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集。 </p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582006804461.png" data-fancybox="group" data-caption="1582006804461" class="fancybox"><img alt="1582006804461" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582006804461.png" class="lazyload" title="1582006804461"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 转换流：InputStreamReader  OutputStreamWrit</span></span><br><span class="line"><span class="comment"> * 功能： </span></span><br><span class="line"><span class="comment"> * 1. 以字符流的形式操作字节流 （纯文本） 本例</span></span><br><span class="line"><span class="comment"> * 2. 指定字符集</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-18 14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 操作System.in  System.out</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将字节流转换成字符流 ,字符流一般用缓冲流包起来</span></span><br><span class="line">        <span class="keyword">try</span>(BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)) ; <span class="comment">// System.in 属于字节流</span></span><br><span class="line">        BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out)))&#123;</span><br><span class="line">            <span class="comment">// 循环读取键盘输入， 输出  exit退出</span></span><br><span class="line">            String msg = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(msg = reader.readLine()).equals(<span class="string">"exit"</span>))&#123;</span><br><span class="line">                writer.write(msg);</span><br><span class="line">                writer.newLine();</span><br><span class="line">                writer.flush();  <span class="comment">//强制刷新，因为缓冲流内部数组比较大，字符会驻留在管道中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"操作异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582007638508.png" data-fancybox="group" data-caption="1582007638508" class="fancybox"><img alt="1582007638508" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582007638508.png" class="lazyload" title="1582007638508"></a></p><h1 id="六、-其他流（数据流、对象流、打印流）"><a href="#六、-其他流（数据流、对象流、打印流）" class="headerlink" title="六、 其他流（数据流、对象流、打印流）"></a>六、 其他流（数据流、对象流、打印流）</h1><h2 id="1-数据流"><a href="#1-数据流" class="headerlink" title="1. 数据流"></a>1. 数据流</h2><p>方便我们处理基本数据类型和字符串，不但保留了数据，还保存了数据类型。</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582008278001.png" data-fancybox="group" data-caption="1582008278001" class="fancybox"><img alt="1582008278001" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582008278001.png" class="lazyload" title="1582008278001"></a></p><h3 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a>DataInputStream</h3><p>构造方法：  DataInputStream(InputStream in）</p><p>方法：</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582008609861.png" data-fancybox="group" data-caption="1582008609861" class="fancybox"><img alt="1582008609861" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582008609861.png" class="lazyload" title="1582008609861"></a></p><h3 id="DataOutputStream"><a href="#DataOutputStream" class="headerlink" title="DataOutputStream"></a>DataOutputStream</h3><p>用法与DataInputStream相似</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * s数据流</span></span><br><span class="line"><span class="comment"> * 1. 写出后读取</span></span><br><span class="line"><span class="comment"> * 2. 读取顺序与写出顺序要一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-18 14:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> BufferedOutputStream(baos)); <span class="comment">// 加上缓冲流，提升性能</span></span><br><span class="line">        <span class="comment">// 操作数据类型</span></span><br><span class="line">        dos.writeUTF(<span class="string">"良辰美景奈何天"</span>);  <span class="comment">// 24个字节</span></span><br><span class="line">        dos.writeInt(<span class="number">19</span>);</span><br><span class="line">        dos.writeChar(<span class="string">'a'</span>);</span><br><span class="line">        dos.writeBoolean(<span class="keyword">false</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">        <span class="comment">//  读取</span></span><br><span class="line">        <span class="keyword">byte</span>[] datas = baos.toByteArray();</span><br><span class="line">        System.out.println(datas.length); <span class="comment">// 30</span></span><br><span class="line">        <span class="comment">// 加上缓冲流，提升性能</span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> ByteArrayInputStream(datas)));</span><br><span class="line">        <span class="comment">// 读取顺序与写出顺序一致</span></span><br><span class="line">        String msg = dis.readUTF();</span><br><span class="line">        System.out.println(<span class="string">"字符串的大小： "</span>+msg.getBytes().length); <span class="comment">// 这里变为21</span></span><br><span class="line">        <span class="keyword">int</span> a = dis.readInt();  <span class="comment">// 4个字节</span></span><br><span class="line">        <span class="keyword">char</span> c = dis.readChar(); <span class="comment">// 2个字节</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = dis.readBoolean(); <span class="comment">// 1个字节</span></span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>30<br>字符串的大小： 21<br>良辰美景奈何天<br>false</p></blockquote><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h2 id="2-打印流"><a href="#2-打印流" class="headerlink" title="2. 打印流"></a>2. 打印流</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印流  PrintStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-18 19:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps = System.out;</span><br><span class="line">        ps.println(<span class="string">"Hello"</span>);</span><br><span class="line">        ps.println(<span class="keyword">true</span>);</span><br><span class="line">        ps.flush();</span><br><span class="line">        ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./io/print.txt"</span>,<span class="keyword">true</span>)), <span class="keyword">true</span>);</span><br><span class="line">        ps.println(<span class="string">"这是打印流"</span>);</span><br><span class="line">        ps.println(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 重定向输出端</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">        System.out.println(<span class="string">"我已经变了，不是输出到控制台了！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重回控制台</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> PrintStream(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(FileDescriptor.out)), <span class="keyword">true</span>));</span><br><span class="line">        System.out.println(<span class="string">"我回来啦！！！！"</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Hello<br>true<br>我回来啦！！！！</p></blockquote><p>还有<code>PrintWriter</code>。</p><hr><h1 id="七、-对象操作"><a href="#七、-对象操作" class="headerlink" title="七、 对象操作"></a>七、 对象操作</h1><h2 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1. 序列化"></a>1. 序列化</h2><h4 id="对象流-ObjectInputStream-amp-ObjectOutputStream"><a href="#对象流-ObjectInputStream-amp-ObjectOutputStream" class="headerlink" title="对象流 ObjectInputStream &amp; ObjectOutputStream"></a>对象流 ObjectInputStream &amp; ObjectOutputStream</h4><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582022257497.png" data-fancybox="group" data-caption="1582022257497" class="fancybox"><img alt="1582022257497" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582022257497.png" class="lazyload" title="1582022257497"></a></p><p>不是所有的对象都是可以序列化。序列化就是将一个对象转换成字节序列，方便存储和传输。 </p><ul><li>序列化：<code>ObjectOutputStream.writeObject()</code></li><li>反序列化：<code>ObjectInputStream.readObject()</code></li></ul><p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象流</span></span><br><span class="line"><span class="comment"> * 1. 写出后读取</span></span><br><span class="line"><span class="comment"> * 2. 读取的顺序与写出保持一致</span></span><br><span class="line"><span class="comment"> * 3. 不是所有的对象都可以序列化 Serializable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-18 18:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 写出</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> BufferedOutputStream(baos)); <span class="comment">// 加上缓冲流，提升性能</span></span><br><span class="line">        <span class="comment">// 操作数据类型</span></span><br><span class="line">        oos.writeUTF(<span class="string">"良辰美景奈何天"</span>);  <span class="comment">// 24个字节</span></span><br><span class="line">        oos.writeInt(<span class="number">18</span>);</span><br><span class="line">        oos.writeChar(<span class="string">'a'</span>);</span><br><span class="line">        oos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 对象</span></span><br><span class="line">        oos.writeObject(<span class="string">"花谢花飞花满天"</span>);</span><br><span class="line">        Employee e = <span class="keyword">new</span> Employee(<span class="string">"马云"</span>, <span class="number">5000.0</span>);</span><br><span class="line">        oos.writeObject(e); <span class="comment">// 序列化</span></span><br><span class="line">        oos.flush();</span><br><span class="line">        <span class="comment">//  读取</span></span><br><span class="line">        <span class="keyword">byte</span>[] datas = baos.toByteArray();</span><br><span class="line">        System.out.println(datas.length); <span class="comment">// 30</span></span><br><span class="line">        <span class="comment">// 加上缓冲流，提升性能</span></span><br><span class="line">        ObjectInputStream dis = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> ByteArrayInputStream(datas)));</span><br><span class="line">        <span class="comment">// 读取顺序与写出顺序一致</span></span><br><span class="line">        String msg = dis.readUTF();</span><br><span class="line">        System.out.println(<span class="string">"字符串的大小： "</span>+msg.getBytes().length); <span class="comment">// 这里变为21</span></span><br><span class="line">        <span class="keyword">int</span> a = dis.readInt();  <span class="comment">// 4个字节</span></span><br><span class="line">        <span class="keyword">char</span> c = dis.readChar(); <span class="comment">// 2个字节</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = dis.readBoolean(); <span class="comment">// 1个字节</span></span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        Object str = dis.readObject();</span><br><span class="line">        Object employee = dis.readObject();  <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( str <span class="keyword">instanceof</span>  String)&#123;</span><br><span class="line">            String ss = (String)str;</span><br><span class="line">            System.out.println(ss);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(employee <span class="keyword">instanceof</span>  Employee)&#123;</span><br><span class="line">            Employee eee = (Employee)employee;</span><br><span class="line">            System.out.println(eee.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name +<span class="string">"===&gt;"</span>+ <span class="keyword">this</span>.money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="2-Serializable"><a href="#2-Serializable" class="headerlink" title="2. Serializable"></a>2. Serializable</h2><p>序列化的类需要实现 <code>Serializable</code> 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。 </p><h2 id="3-transient"><a href="#3-transient" class="headerlink" title="3. transient"></a>3. transient</h2><p><code>transient</code> 关键字可以使一些属性不会被序列化。</p><p><code>ArrayList</code> 中存储数据的数组 <code>elementData</code> 是用 <code>transient</code> 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure></div><hr><h1 id="八、-commons-io组件"><a href="#八、-commons-io组件" class="headerlink" title="八、 commons-io组件"></a>八、 commons-io组件</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p> <a href="http://commons.apache.org/proper/commons-io/download_io.cgi" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-io/download_io.cgi</a> </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境准备：<br>1.在idea中导入以下两个jar包</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035347762.png" data-fancybox="group" data-caption="1582035347762" class="fancybox"><img alt="1582035347762" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035347762.png" class="lazyload" title="1582035347762"></a></p><p>2.打开idea的project struct：</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035398847.png" data-fancybox="group" data-caption="1582035398847" class="fancybox"><img alt="1582035398847" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035398847.png" class="lazyload" title="1582035398847"></a></p><p>3,进入Dependencies</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035489216.png" data-fancybox="group" data-caption="1582035489216" class="fancybox"><img alt="1582035489216" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035489216.png" class="lazyload" title="1582035489216"></a></p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035540089.png" data-fancybox="group" data-caption="1582035540089" class="fancybox"><img alt="1582035540089" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582035540089.png" class="lazyload" title="1582035540089"></a></p><h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.DirectoryFileFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.EmptyFileFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.FileFilterUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.filefilter.SuffixFileFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-18 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CIO_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 文件大小</span></span><br><span class="line">        <span class="keyword">long</span> len = FileUtils.sizeOf(<span class="keyword">new</span> File(<span class="string">"./io/io.png"</span>));</span><br><span class="line">        System.out.println(len);</span><br><span class="line">        <span class="comment">//目录大小</span></span><br><span class="line">        len  = FileUtils.sizeOfDirectory(<span class="keyword">new</span> File(<span class="string">"./io"</span>));</span><br><span class="line">        System.out.println(len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 列出当前目录下的文件</span></span><br><span class="line">        Collection&lt;File&gt; files = FileUtils.listFiles(<span class="keyword">new</span> File(<span class="string">"./io"</span>), EmptyFileFilter.NOT_EMPTY, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (File file: files)&#123;</span><br><span class="line">            System.out.println(file.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        <span class="comment">// 列出当前目录下的件文</span></span><br><span class="line">        files = FileUtils.listFiles(<span class="keyword">new</span> File(<span class="string">"./io"</span>), EmptyFileFilter.NOT_EMPTY, DirectoryFileFilter.INSTANCE);</span><br><span class="line">        <span class="keyword">for</span> (File file: files)&#123;</span><br><span class="line">            System.out.println(file.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">        files = FileUtils.listFiles(<span class="keyword">new</span> File(<span class="string">"./io"</span>),</span><br><span class="line">                FileFilterUtils.or(<span class="keyword">new</span> SuffixFileFilter(<span class="string">"java"</span>), <span class="keyword">new</span> SuffixFileFilter(<span class="string">"txt"</span>)), DirectoryFileFilter.INSTANCE);  <span class="comment">// 文件过滤</span></span><br><span class="line">        <span class="keyword">for</span> (File file: files)&#123;</span><br><span class="line">            System.out.println(file.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>416160<br>1696597<br>a.txt<br>a_copy.txt<br>copy_dext.txt<br>dext.txt<br>io.iml<br>io.png<br>io_copy.png<br>io_copyppppp.png<br>ppp_img.png</p><p>print.txt</p><p>F:\java\base.\io\a.txt<br>F:\java\base.\io\a_copy.txt<br>F:\java\base.\io\copy_dext.txt<br>F:\java\base.\io\dext.txt<br>F:\java\base.\io\io.iml<br>F:\java\base.\io\io.png<br>F:\java\base.\io\io_copy.png<br>F:\java\base.\io\io_copyppppp.png<br>F:\java\base.\io\ppp_img.png<br>F:\java\base.\io\print.txt<br>F:\java\base.\io\src\CIOTest.java<br>F:\java\base.\io\src\CIO_test.java<br>F:\java\base.\io\src\ContentEncode.java<br>F:\java\base.\io\src\ConvertTest.java<br>F:\java\base.\io\src\CopyFile.java<br>F:\java\base.\io\src\CopyTxt.java<br>F:\java\base.\io\src\countFiles.java<br>F:\java\base.\io\src\DataTest.java<br>F:\java\base.\io\src\DecorateTest01.java<br>F:\java\base.\io\src\DecorateTest02.java<br>F:\java\base.\io\src\Demo1.java<br>F:\java\base.\io\src\DirCount.java<br>F:\java\base.\io\src\DirDemo1.java<br>F:\java\base.\io\src\FileDemo01.java<br>F:\java\base.\io\src\FileDemo02.java<br>F:\java\base.\io\src\FileUtils.java<br>F:\java\base.\io\src\IOTes02.java<br>F:\java\base.\io\src\IOTes04.java<br>F:\java\base.\io\src\IOTest01.java<br>F:\java\base.\io\src\IOTest03.java<br>F:\java\base.\io\src\listAllFiles.java<br>F:\java\base.\io\src\ObjectTest.java<br>F:\java\base.\io\src\Path.java<br>F:\java\base.\io\src\picTest.java</p><p>F:\java\base.\io\src\PrintTest.java</p><p>F:\java\base.\io\a.txt<br>F:\java\base.\io\a_copy.txt<br>F:\java\base.\io\copy_dext.txt<br>F:\java\base.\io\dext.txt<br>F:\java\base.\io\print.txt<br>F:\java\base.\io\src\CIOTest.java<br>F:\java\base.\io\src\CIO_test.java<br>F:\java\base.\io\src\ContentEncode.java<br>F:\java\base.\io\src\ConvertTest.java<br>F:\java\base.\io\src\CopyFile.java<br>F:\java\base.\io\src\CopyTxt.java<br>F:\java\base.\io\src\countFiles.java<br>F:\java\base.\io\src\DataTest.java<br>F:\java\base.\io\src\DecorateTest01.java<br>F:\java\base.\io\src\DecorateTest02.java<br>F:\java\base.\io\src\Demo1.java<br>F:\java\base.\io\src\DirCount.java<br>F:\java\base.\io\src\DirDemo1.java<br>F:\java\base.\io\src\FileDemo01.java<br>F:\java\base.\io\src\FileDemo02.java<br>F:\java\base.\io\src\FileUtils.java<br>F:\java\base.\io\src\IOTes02.java<br>F:\java\base.\io\src\IOTes04.java<br>F:\java\base.\io\src\IOTest01.java<br>F:\java\base.\io\src\IOTest03.java<br>F:\java\base.\io\src\listAllFiles.java<br>F:\java\base.\io\src\ObjectTest.java<br>F:\java\base.\io\src\Path.java<br>F:\java\base.\io\src\picTest.java<br>F:\java\base.\io\src\PrintTest.java</p></blockquote><h2 id="读取内容"><a href="#读取内容" class="headerlink" title="读取内容"></a>读取内容</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.LineIterator;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * commons-io</span></span><br><span class="line"><span class="comment"> * 读取内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-18 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CIOTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line">        String msg = FileUtils.readFileToString(<span class="keyword">new</span> File(<span class="string">"./io/dext.txt"</span>), <span class="string">"UTF-8"</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        <span class="keyword">byte</span>[] datas = FileUtils.readFileToByteArray(<span class="keyword">new</span> File(<span class="string">"./io/dext.txt"</span>));</span><br><span class="line">        System.out.println(datas.length);</span><br><span class="line">        <span class="comment">// 逐行读取</span></span><br><span class="line">        List&lt;String&gt; msgs = FileUtils.readLines(<span class="keyword">new</span> File(<span class="string">"./io/dext.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">for</span>(String m: msgs)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LineIterator it = FileUtils.lineIterator(<span class="keyword">new</span> File(<span class="string">"./io/dext.txt"</span>));</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.nextLine());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="写出内容"><a href="#写出内容" class="headerlink" title="写出内容"></a>写出内容</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写出内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-19 11:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CIOtestWrite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 写出文件</span></span><br><span class="line">        FileUtils.write(<span class="keyword">new</span> File(<span class="string">"./io/happy.txt"</span>), <span class="string">"今天天气真好！\r\n"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">        FileUtils.writeStringToFile(<span class="keyword">new</span> File(<span class="string">"./io/happy.txt"</span>), <span class="string">"河山大好，出去走走吧！"</span>, <span class="string">"UTF-8"</span>,<span class="keyword">true</span>);</span><br><span class="line">        FileUtils.writeByteArrayToFile(<span class="keyword">new</span> File(<span class="string">"./io/happy.txt"</span>), <span class="string">"河山大好，出去走走吧！"</span>.getBytes(<span class="string">"UTF-8"</span>),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出列表</span></span><br><span class="line">        List &lt;String&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        datas.add(<span class="string">"马云"</span>);</span><br><span class="line">        datas.add(<span class="string">"马化腾"</span>);</span><br><span class="line">        datas.add(<span class="string">"李嘉诚"</span>);</span><br><span class="line"></span><br><span class="line">        FileUtils.writeLines(<span class="keyword">new</span> File(<span class="string">"./io/happy.txt"</span>), datas, <span class="string">"..."</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">今天天气真好！河山大好，出去走走吧！河山大好，出去走走吧！马云...马化腾...李嘉诚...</span><br></pre></td></tr></table></figure></div></blockquote><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拷贝文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-19 11:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CIOCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 复制文件</span></span><br><span class="line">        FileUtils.copyFile(<span class="keyword">new</span> File(<span class="string">"./io/io.png"</span>), <span class="keyword">new</span> File(<span class="string">"./io/cio.png"</span>));</span><br><span class="line">        <span class="comment">// 拷贝文件到目录</span></span><br><span class="line">        FileUtils.copyFileToDirectory(<span class="keyword">new</span> File(<span class="string">"./io/io.png"</span>), <span class="keyword">new</span> File(<span class="string">"./io/test"</span>));</span><br><span class="line">        <span class="comment">// copy URL</span></span><br><span class="line">        String url = <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1582094003889&amp;di=8d3bc6164079cb45c6ba073ff143b591&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.bbra.cn%2FUploadFiles%2Fimgs%2F2015%2F11%2F02%2Fmm3%2F005.jpg"</span>;</span><br><span class="line">        FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(<span class="string">"./io/girl.jpg"</span>)); <span class="comment">// 可以下载一张图片</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="九、-NIO"><a href="#九、-NIO" class="headerlink" title="九、 NIO"></a>九、 NIO</h1><p>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。 </p><h2 id="1-流与块"><a href="#1-流与块" class="headerlink" title="1. 流与块"></a>1. 流与块</h2><p>​        I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以<strong>块的方式</strong>处理数据。</p><p>​        面向流的 I/O 一次处理一个字节数据：一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。</p><p>​        面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p><p>​        I/O 包和 NIO 已经很好地集成了，<code>java.io.*</code> 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如，<code>java.io.*</code> 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。</p><h2 id="2-通道与缓冲区"><a href="#2-通道与缓冲区" class="headerlink" title="2. 通道与缓冲区"></a>2. 通道与缓冲区</h2><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p><p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 <code>InputStream</code> 或者 <code>OutputStream</code> 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p><p>通道包括以下类型：</p><ul><li><code>FileChannel</code>：从文件中读写数据；</li><li><code>DatagramChannel</code>：通过 UDP 读写网络中数据；</li><li><code>SocketChannel</code>：通过 TCP 读写网络中数据；</li><li><code>ServerSocketChannel</code>：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 <code>SocketChannel</code>。</li></ul><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。</p><p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。</p><p>缓冲区包括以下类型：</p><ul><li><code>ByteBuffer</code></li><li><code>CharBuffer</code></li><li><code>ShortBuffer</code></li><li><code>IntBuffer</code></li><li><code>LongBuffer</code></li><li><code>FloatBuffer</code></li><li><code>DoubleBuffer</code></li></ul><h2 id="2-缓冲区状态变量"><a href="#2-缓冲区状态变量" class="headerlink" title="2. 缓冲区状态变量"></a>2. 缓冲区状态变量</h2><ul><li>capacity：最大容量；</li><li>position：当前已经读写的字节数；</li><li>limit：还可以读写的字节数。</li></ul><p>状态变量的改变过程举例： </p><p>① 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。 </p><p> <a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:100%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" class="lazyload" title="img"></a></p><p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 为 5，limit 保持不变。 </p><p> <a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/80804f52-8815-4096-b506-48eef3eed5c6.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:100%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/80804f52-8815-4096-b506-48eef3eed5c6.png" class="lazyload" title="img"></a></p><p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。 </p><p> <a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/952e06bd-5a65-4cab-82e4-dd1536462f38.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:100%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/952e06bd-5a65-4cab-82e4-dd1536462f38.png" class="lazyload" title="img"></a></p><p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。 </p><p> <a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:100%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png" class="lazyload" title="img"></a></p><p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置 </p><p> <a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/67bf5487-c45d-49b6-b9c0-a058d8c68902.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:100%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/67bf5487-c45d-49b6-b9c0-a058d8c68902.png" class="lazyload" title="img"></a></p><h2 id="3-文件NIO实例"><a href="#3-文件NIO实例" class="headerlink" title="3. 文件NIO实例"></a>3. 文件NIO实例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fastCopy</span><span class="params">(String src, String dist)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获得源文件的输入字节流 */</span></span><br><span class="line">    FileInputStream fin = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取输入字节流的文件通道 */</span></span><br><span class="line">    FileChannel fcin = fin.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取目标文件的输出字节流 */</span></span><br><span class="line">    FileOutputStream fout = <span class="keyword">new</span> FileOutputStream(dist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取输出字节流的文件通道 */</span></span><br><span class="line">    FileChannel fcout = fout.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 为缓冲区分配 1024 个字节 */</span></span><br><span class="line">    ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 从输入通道中读取数据到缓冲区中 */</span></span><br><span class="line">        <span class="keyword">int</span> r = fcin.read(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* read() 返回 -1 表示 EOF */</span></span><br><span class="line">        <span class="keyword">if</span> (r == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 切换读写 */</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 把缓冲区的内容写入输出文件中 */</span></span><br><span class="line">        fcout.write(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 清空缓冲区 */</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="4-选择器"><a href="#4-选择器" class="headerlink" title="4. 选择器"></a>4. 选择器</h2><p>​        NIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使用。</p><p>​        NIO 实现了 IO 多路复用中的 Reactor 模型，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以处理多个事件。</p><p>​        通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达的 Channel 执行。</p><p>​        因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程处理一个事件，对于 IO 密集型的应用具有很好地性能。</p><p>​        应该注意的是，只有套接字 Channel 才能配置为非阻塞，而 FileChannel 不能，为 FileChannel 配置非阻塞也没有意义。</p><p><a href="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582088336265.png" data-fancybox="group" data-caption="1582088336265" class="fancybox"><img alt="1582088336265" style="zoom:80%;" data-src="/2020/02/17/Java%E4%B9%8BIO%E6%B5%81/1582088336265.png" class="lazyload" title="1582088336265"></a></p><h3 id="创建选择器"><a href="#创建选择器" class="headerlink" title="创建选择器"></a>创建选择器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure></div><h3 id="将通道注册到选择器上"><a href="#将通道注册到选择器上" class="headerlink" title="将通道注册到选择器上"></a>将通道注册到选择器上</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class="line">ssChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure></div><p>​            通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。</p><p>​            在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类：</p><ul><li><code>SelectionKey.OP_CONNECT</code></li><li><code>SelectionKey.OP_ACCEPT</code></li><li><code>SelectionKey.OP_READ</code></li><li><code>SelectionKey.OP_WRITE</code></li></ul><p>它们在 <code>SelectionKey</code> 的定义如下： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_READ = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_WRITE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_CONNECT = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OP_ACCEPT = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure></div><p>可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如： </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure></div><h3 id="监听事情"><a href="#监听事情" class="headerlink" title="监听事情"></a>监听事情</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = selector.select();</span><br></pre></td></tr></table></figure></div><p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。 </p><h3 id="获取到达的事件"><a href="#获取到达的事件" class="headerlink" title="获取到达的事件"></a>获取到达的事件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line"><span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line">    <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>​        因为一次 <code>select()</code> 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> num = selector.select();</span><br><span class="line">    Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line">    <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">        SelectionKey key = keyIterator.next();</span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        keyIterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="5-套接字NIO实例"><a href="#5-套接字NIO实例" class="headerlink" title="5. 套接字NIO实例"></a>5. 套接字NIO实例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel ssChannel = ServerSocketChannel.open();</span><br><span class="line">        ssChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = ssChannel.socket();</span><br><span class="line">        InetSocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = keys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line"></span><br><span class="line">                    ServerSocketChannel ssChannel1 = (ServerSocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 服务器会为每个新连接创建一个 SocketChannel</span></span><br><span class="line">                    SocketChannel sChannel = ssChannel1.accept();</span><br><span class="line">                    sChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 这个新连接主要用于从客户端读取数据</span></span><br><span class="line">                    sChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line"></span><br><span class="line">                    SocketChannel sChannel = (SocketChannel) key.channel();</span><br><span class="line">                    System.out.println(readDataFromSocketChannel(sChannel));</span><br><span class="line">                    sChannel.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readDataFromSocketChannel</span><span class="params">(SocketChannel sChannel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        StringBuilder data = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            buffer.clear();</span><br><span class="line">            <span class="keyword">int</span> n = sChannel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (n == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="keyword">int</span> limit = buffer.limit();</span><br><span class="line">            <span class="keyword">char</span>[] dst = <span class="keyword">new</span> <span class="keyword">char</span>[limit];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                dst[i] = (<span class="keyword">char</span>) buffer.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            data.append(dst);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>);</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        String s = <span class="string">"hello world"</span>;</span><br><span class="line">        out.write(s.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="6-内存映射文件"><a href="#6-内存映射文件" class="headerlink" title="6. 内存映射文件"></a>6. 内存映射文件</h2><p>​        内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的 I/O 快得多。</p><p>​        向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可能会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。</p><p>​        下面代码行将文件的前 1024 个字节映射到内存中，map() 方法返回一个 MappedByteBuffer，它是 ByteBuffer 的子类。因此，可以像使用其他任何 ByteBuffer 一样使用新映射的缓冲区，操作系统会在需要时负责执行映射。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MappedByteBuffer mbb = fc.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">1024</span>);</span><br></pre></td></tr></table></figure></div><h2 id="7-对比"><a href="#7-对比" class="headerlink" title="7. 对比"></a>7. 对比</h2><p>NIO 与普通 I/O 的区别主要有以下两点：</p><ul><li>NIO 是非阻塞的；</li><li>NIO 面向块，I/O 面向流。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes</a> </li><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://Castile.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://Castile.github.io/tags/Java/"/>
    
      <category term="IO" scheme="https://Castile.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>Java之并发专题</title>
    <link href="https://castile.github.io/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/"/>
    <id>https://castile.github.io/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/</id>
    <published>2020-02-16T08:27:38.000Z</published>
    <updated>2020-02-16T14:02:43.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、-进程与线程"><a href="#一、-进程与线程" class="headerlink" title="一、 进程与线程"></a>一、 进程与线程</h1><h2 id="1-程序、进程、线程"><a href="#1-程序、进程、线程" class="headerlink" title="1.程序、进程、线程"></a>1.程序、进程、线程</h2><ul><li><p>程序： 程序是一段静态的代码，它是应用程序执行的蓝本</p></li><li><p>进程：进程是指一种正在运行的程序，有自己的地址空间 </p><p>​            特点 ：动态性、并发性、独立性</p></li><li><p>线程： 进程内部的一个执行单元，它是程序中一个单一的顺序控制流程。 <strong>如果在一个进程中同时运行了多个线程，用来完成不同的工作，则称之为多线程 </strong>。 线程又被称为轻量级进程(lightweight process)</p></li></ul><blockquote><p> 并发和并行的区别 ：</p><p>并行： 多个CPU同时执行多个任务</p><p>并发： 一个CPU（采用时间片）同时执行多个任务</p></blockquote><h2 id="2-进程和线程的区别"><a href="#2-进程和线程的区别" class="headerlink" title="2.进程和线程的区别"></a>2.进程和线程的区别</h2><p><a href="/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/1581842407976.png" data-fancybox="group" data-caption="1581842407976" class="fancybox"><img alt="1581842407976" style="zoom:80%;" data-src="/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/1581842407976.png" class="lazyload" title="1581842407976"></a></p><hr><h1 id="二、-使用线程"><a href="#二、-使用线程" class="headerlink" title="二、 使用线程"></a>二、 使用线程</h1><p>有三种使用线程的方法：</p><ul><li><p>实现 <code>Runnable</code> 接口；</p></li><li><p>实现 <code>Callable</code> 接口；</p></li><li><p>继承 <code>Thread</code> 类。</p><p>​            实现 <code>Runnable</code> 和 <code>Callable</code> 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 <code>Thread</code> 来调用。可以理解为任务是通过线程驱动从而执行的。</p></li></ul><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-13 17:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"学习"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        使用 Runnable 实例再创建一个 Thread 实例，然后调用 Thread 实例的 start() 方法来启动线程。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Demo2 d2 = <span class="keyword">new</span> Demo2();</span><br><span class="line">        Thread th = <span class="keyword">new</span> Thread(d2);</span><br><span class="line"></span><br><span class="line">        th.start(); <span class="comment">// 启动线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"听歌"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><p>同样也是需要实现 <code>run()</code> 方法，因为 Thread 类也实现了 Runable 接口。当调用 <code>start()</code> 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 <code>run()</code> 方法。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">    mt.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h2><p> 与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123; <span class="comment">// 这里要通过泛型指定返回值Integer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123; <span class="comment">// 注意返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    MyCallable mc = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>与实现Runnable相比， Callable功能更强大些 </li><li>可以有返回值，支持泛型的返回值 </li><li>可以抛出异常 </li><li>需要借助FutureTask，比如获取返回结果</li></ul><h2 id="实现接口-VS-继承-Thread"><a href="#实现接口-VS-继承-Thread" class="headerlink" title="实现接口 VS 继承 Thread"></a>实现接口 VS 继承 Thread</h2><p>实现接口会更好一些，因为：</p><ul><li>Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；</li><li>类可能只要求可执行就行，继承整个 Thread 类开销过大。</li></ul><blockquote><p>实现Runnable接口方式的多线程 </p><p>优势：可以继承其它类，多线程可共享同一个Runnable对象</p><p>劣势：编程方式稍微复杂，如果需要访问当前线程，需要调用<code>Thread.currentThread()</code>方 法</p></blockquote><h2 id="Thread类常用方法"><a href="#Thread类常用方法" class="headerlink" title="Thread类常用方法"></a>Thread类常用方法</h2><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">static Thread currentThread()</td><td style="text-align:center">得到当前线程</td></tr><tr><td style="text-align:center">getName( )</td><td style="text-align:center">返回线程的名称</td></tr><tr><td style="text-align:center">setName (String name)</td><td style="text-align:center">将线程的名称设置为由name指定的名称</td></tr><tr><td style="text-align:center">int getPriority()</td><td style="text-align:center">获得线程的优先级数值</td></tr><tr><td style="text-align:center">void setPriority()</td><td style="text-align:center">设置线程的优先级数值</td></tr><tr><td style="text-align:center">void start( )</td><td style="text-align:center">调用run( )方法启动线程，开始线程的执行</td></tr><tr><td style="text-align:center">void run( )</td><td style="text-align:center">存放线程体代码</td></tr><tr><td style="text-align:center">isAlive()</td><td style="text-align:center">判断线程是否还“活”着，即线程是未终止</td></tr></tbody></table></div><hr><h2 id="一些多线程的例子"><a href="#一些多线程的例子" class="headerlink" title="一些多线程的例子"></a>一些多线程的例子</h2><h3 id="1-模拟龟兔赛跑"><a href="#1-模拟龟兔赛跑" class="headerlink" title="1. 模拟龟兔赛跑"></a>1. 模拟龟兔赛跑</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟龟兔赛跑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-13 17:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Racer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String Winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">1</span>; step &lt;= <span class="number">100</span>; step++)&#123;</span><br><span class="line">            <span class="comment">// 模拟兔子每10步休息一次</span></span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"兔子"</span>) &amp;&amp; step % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"乌龟"</span>))&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"----&gt;"</span>+ step);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isGameOver(step))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断比赛是否结束</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isGameOver</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Winner != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//            System.out.println("Winner is "+ Winner);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(step == <span class="number">100</span>)&#123;</span><br><span class="line">            Winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">"Winner is "</span>+ Winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Racer racer = <span class="keyword">new</span> Racer();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); <span class="comment">// 主线程</span></span><br><span class="line">        <span class="comment">// 创建两个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(racer, <span class="string">"兔子"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(racer, <span class="string">"乌龟"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用Callable接口来创建线程的方式，模拟龟兔赛跑例子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建线程的第三种方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-13 17:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Racer_Call</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    String Winner;  <span class="comment">// 胜利者</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">1</span>; step &lt;= <span class="number">100</span>; step++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"pool-1-thread-1"</span>) &amp;&amp; step % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">"====&gt;"</span>+step);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(isGameOver(step))&#123;</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isGameOver</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Winner != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//            System.out.println("Winner is "+ Winner);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(step == <span class="number">100</span>)&#123;</span><br><span class="line"></span><br><span class="line">            Winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">"Winner is "</span>+ Winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        Racer_Call rc = <span class="keyword">new</span> Racer_Call();</span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService ex = Executors.newFixedThreadPool(<span class="number">2</span>); <span class="comment">//  线程池中两个线程</span></span><br><span class="line">        <span class="comment">// 提交执行</span></span><br><span class="line">        Future&lt;Integer&gt; ribbits = ex.submit(rc);</span><br><span class="line">        Future&lt;Integer&gt; turtle = ex.submit(rc);</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        <span class="keyword">int</span> riSteps = ribbits.get();</span><br><span class="line">        <span class="keyword">int</span> tu = turtle.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"兔子的步数："</span> + riSteps);</span><br><span class="line">        System.out.println(<span class="string">"乌龟的步数："</span> + tu);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ex.shutdownNow();<span class="comment">// 关闭服务</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-Web12306"><a href="#2-Web12306" class="headerlink" title="2. Web12306"></a>2. Web12306</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-13 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Web12306</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">int</span> tickets = <span class="number">10</span>; <span class="comment">// 共享资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tickets &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">" ----&gt;"</span> + tickets--);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Web12306 w1 = <span class="keyword">new</span> Web12306();</span><br><span class="line">        Web12306 w2 = <span class="keyword">new</span> Web12306();</span><br><span class="line"></span><br><span class="line">        Web12306 w3 = <span class="keyword">new</span> Web12306();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(w1, <span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(w2, <span class="string">"李四"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(w3, <span class="string">"王五"</span>).start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h1 id="三、-基础线程机制"><a href="#三、-基础线程机制" class="headerlink" title="三、 基础线程机制"></a>三、 基础线程机制</h1><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。 </p><blockquote><p>主要有三种 Executor：</p><ul><li>CachedThreadPool：一个任务创建一个线程；</li><li>FixedThreadPool：所有任务只能使用固定大小的线程；</li><li>SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。</li></ul></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 17:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool(); <span class="comment">// 个任务创建一个线程；</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown(); <span class="comment">// 关闭服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">":  executor test 。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>pool-1-thread-1:  executor test 。。。<br>pool-1-thread-5:  executor test 。。。<br>pool-1-thread-4:  executor test 。。。<br>pool-1-thread-3:  executor test 。。。<br>pool-1-thread-2:  executor test 。。。</p></blockquote><h2 id="Daemon-守护进程"><a href="#Daemon-守护进程" class="headerlink" title="Daemon 守护进程"></a>Daemon 守护进程</h2><p>​        守护线程是程序运行时在<strong>后台提供服务的线程</strong>，不属于程序中不可或缺的部分。当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。<code>main()</code> 属于非守护线程。非守护进程也说普通进程或者用户进程。</p><p>​        在线程启动之前使用 <code>setDaemon()</code> 方法可以将一个线程设置为守护线程。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">    thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Java中的线程分为两类：一种是<strong>守护线程</strong>，一种是<strong>用户线程</strong>。</p><p>它们在几乎每个方面都是相同的，<strong>唯一的区别是判断JVM何时离开。</strong></p><ul><li><p>守护线程是用来服务用户线程的，通过在start()方法前调用<code>thread.setDaemon(true)</code>可以把一个用户线程变成一个守护线程。</p></li><li><p>Java垃圾回收就是一个典型的守护线程。</p></li><li>若JVM中都是守护线程，当前JVM将退出。</li></ul><h2 id="Threa-Sleep"><a href="#Threa-Sleep" class="headerlink" title="Threa.Sleep()"></a>Threa.Sleep()</h2><p><code>Thread.sleep(millisec)</code> 方法会休眠当前正在执行的线程，<code>millisec</code> 单位为毫秒。</p><p><code>sleep()</code> 可能会抛出 <code>InterruptedException</code>，因为异常不能跨线程传播回 <code>main()</code> 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="yield-礼让线程"><a href="#yield-礼让线程" class="headerlink" title="yield() 礼让线程"></a>yield() 礼让线程</h2><p>对静态方法 <code>Thread.yield()</code> 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。 </p><p>yield让当前正在执行线程暂停，不是阻塞线程，而是将线程转入<strong>就绪状态</strong> </p><p>如果调用了yield方法之后，没有其他等待执行的线程，这个时候当前线程就会马上恢复执行！ </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yield 礼让线程 --&gt; 高风亮节，主动让出CPU，重新回到就绪状态 直接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-13 20:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">yieldDemo1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// lambda表达式  一个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">                System.out.println(<span class="string">"lambda"</span>+ i);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                Thread.yield(); <span class="comment">//  main 线程礼让</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main:"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h1 id="四、-中断"><a href="#四、-中断" class="headerlink" title="四、 中断"></a>四、 中断</h1><p>一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。 </p><h2 id="InterruptedException"><a href="#InterruptedException" class="headerlink" title="InterruptedException"></a>InterruptedException</h2><p>​        通过调用一个线程的 <code>interrupt()</code> 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 <code>InterruptedException</code>，从而提前结束该线程。但是不能中断 I/O 阻塞和 <code>synchronized</code> 锁阻塞。</p><p>​        对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 <code>Thread.sleep()</code> 方法，因此会抛出一个 <code>InterruptedException</code>，从而提前结束线程，不执行之后的语句。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 17:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread1 myThread1 = <span class="keyword">new</span> MyThread1();</span><br><span class="line">        myThread1.start();</span><br><span class="line">        myThread1.interrupt(); <span class="comment">//  线程中断</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"lalla"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(<span class="string">"Thread run"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/1581844882895.png" data-fancybox="group" data-caption="1581844882895" class="fancybox"><img alt="1581844882895" data-src="/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/1581844882895.png" class="lazyload" title="1581844882895"></a></p><h2 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h2><p>​        如果一个线程的 <code>run()</code> 方法执行一个无限循环，并且没有执行 <code>sleep()</code> 等会抛出 <code>InterruptedException</code> 的操作，那么调用线程的 <code>interrupt()</code> 方法就无法使线程提前结束。</p><p>​        但是调用 <code>interrupt()</code> 方法会设置线程的中断标记，此时调用 <code>interrupted()</code> 方法会返回 true。因此可以在循环体中使用 <code>interrupted()</code> 方法来判断线程是否处于中断状态，从而提前结束线程。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 17:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">interruptedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread2.interrupt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!interrupted()) &#123;  <span class="comment">// interrupted()方法会设置线程的中断标记 返回true</span></span><br><span class="line">                <span class="comment">// ..</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Thread end"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Executor-的中断操作"><a href="#Executor-的中断操作" class="headerlink" title="Executor 的中断操作"></a>Executor 的中断操作</h2><p>调用 <code>Executor</code> 的 <code>shutdown()</code> 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 <code>shutdownNow()</code> 方法，则相当于调用每个线程的 <code>interrupt()</code> 方法。 </p><p>以下使用 Lambda 创建线程，相当于创建了一个匿名内部线程。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">"Thread run"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    executorService.shutdownNow();</span><br><span class="line">    System.out.println(<span class="string">"Main run"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>Main run</p><p>java.lang.InterruptedException: sleep interrupted<br>    at java.lang.Thread.sleep(Native Method)<br>    at MyRunnable.run(ExecutorTest.java:25)<br>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)<br>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)<br>    at java.lang.Thread.run(Thread.java:748) </p></blockquote><p>如果只想中断 Executor 中的一个线程，可以通过使用 <code>submit()</code> 方法来提交一个线程，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 <code>cancel(true)</code> 方法就可以中断线程。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;?&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">&#125;);</span><br><span class="line">future.cancel(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></div><hr><h1 id="五、-互斥同步"><a href="#五、-互斥同步" class="headerlink" title="五、 互斥同步"></a>五、 互斥同步</h1><p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 <code>synchronized</code>，而另一个是 JDK 实现的 <code>ReentrantLock</code>(可重入锁)。 </p><blockquote><p>死锁 ： 当两个线程相互等待对方释放“锁”时就会发生死锁 </p><p> 出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</p><p>  多线程编程时应该注意避免死锁的发生</p></blockquote><p>线程同步问题的应用场景： 多个用户同时操作一个银行账户。每次取款100元，取款前先检查余额是否足够。如果不够， 放弃取款。</p><blockquote><p>当多个线程访问同一个数据时，容易出现线程安全问题。需要让线程同步，保证数据安全</p></blockquote><p>当两个或两个以上线程访问同一资源时，需要某种方式来确保资源在某一时刻只被一个线程 使用</p><p>看一个线程不安全的例子： 去银行取钱 会出现负数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程不安全： 取钱  出现负数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-14 11:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>, <span class="string">"结婚礼金"</span>);</span><br><span class="line">        DrawMoney d1 = <span class="keyword">new</span> DrawMoney(account, <span class="number">70</span>, <span class="string">"我"</span>);</span><br><span class="line">        DrawMoney d2 = <span class="keyword">new</span> DrawMoney(account, <span class="number">80</span>, <span class="string">"老婆"</span>);</span><br><span class="line">        d1.start();</span><br><span class="line">        d2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money; <span class="comment">// 金额</span></span><br><span class="line">    String name; <span class="comment">// 名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Account account; <span class="comment">// 操作的账户</span></span><br><span class="line">    String name; <span class="comment">// 谁取钱</span></span><br><span class="line">    <span class="keyword">int</span> drawingmoney; <span class="comment">//取多少钱</span></span><br><span class="line">    <span class="keyword">int</span> packet; <span class="comment">// 已经取得的钱数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawMoney</span><span class="params">(Account account,<span class="keyword">int</span> m, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingmoney = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(account.money - drawingmoney &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        account.money -= drawingmoney;</span><br><span class="line">        packet += drawingmoney;</span><br><span class="line">        System.out.println(getName()+<span class="string">"口袋里有"</span>+packet+<span class="string">", 账户余额为："</span>+account.money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>我口袋里有70, 账户余额为：-50<br>老婆口袋里有80, 账户余额为：-50</p></blockquote><p>同理， 在Web12306例子中，会出现重复票的问题，以及当只剩下一张票的时候，即临界资源时，会出现负数。</p><p>线程同步的实现方案 ：</p><ol><li>同步方法</li><li>同步代码块</li></ol><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><ol><li><p>同步一个代码块</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。</p><p>对于以下代码，使用 <code>ExecutorService</code> 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure></div><p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 两个不同的对象</span></span><br><span class="line">    SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    SynchronizedExample e2 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; e1.func1());</span><br><span class="line">    executorService.execute(() -&gt; e2.func1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9</span><br></pre></td></tr></table></figure></div><ol><li><p>同步一个方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">func</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>同步一个类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SynchronizedExample<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>​    作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 19:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SynchronizedExample<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">        <span class="comment">//SynchronizedExample e2 = new SynchronizedExample();</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(() -&gt; e1.func2());</span><br><span class="line">        executorService.execute(() -&gt; e1.func2());</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><blockquote><p>0 1 2 3 4 5 6 7 8 9<br>0 1 2 3 4 5 6 7 8 9 </p></blockquote><ol><li><p>同步一个静态方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 19:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedExample e1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line"><span class="comment">//        SynchronizedExample e2 = new SynchronizedExample();</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(() -&gt; e1.func2());</span><br><span class="line">        executorService.execute(() -&gt; e1.func2());</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>作用于整个类</p><blockquote><p>0 1 2 3 4 5 6 7 8 9<br>0 1 2 3 4 5 6 7 8 9 </p></blockquote></li></ol><h2 id="ReentrantLock-可重入锁"><a href="#ReentrantLock-可重入锁" class="headerlink" title="ReentrantLock 可重入锁"></a>ReentrantLock 可重入锁</h2><p><code>ReentrantLock</code> 是 <code>java.util.concurrent（J.U.C）</code>包中的锁。 </p><p>​        锁作为并发共享数据保证一致性的工具，大多数内置锁都是可重入的，也就是说如果某个线程试图获取一个已经由他自己持有的锁，那么，这个请求会立刻成功，并且将这个锁的计数器值加1。而当线程退出同步代码块时，计数器将会递减。当计数值等于零的时候，锁就会释放。如果没有可重入锁的支持，在第二次企图获得锁时将会进入死锁状态，可重入锁随处可见。</p><p>​    <code>synchronized</code>的就是一个可重入锁：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> other;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可重入锁：锁可以延续使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 20:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 第一次获得锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 第二次获得同样的锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"可重入锁！！！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> LockTest().test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>可重入锁 ！！！ .</p><p>…</p></blockquote><p>下面举个例子：使用不可重入锁会导致死锁的情况，下面的代码会造成死循环</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 不可重入锁： 锁不可以延续使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 20:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest2</span> </span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> Lock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock(); <span class="comment">// 获得锁</span></span><br><span class="line">        doSomething();</span><br><span class="line">        lock.unlock(); <span class="comment">// 锁释放</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可重入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockTest2 test = <span class="keyword">new</span> LockTest2();</span><br><span class="line">        test.a();</span><br><span class="line">        test.doSomething();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line">    <span class="comment">//是否占用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLocked = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 使用锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (isLocked)&#123; <span class="comment">// 锁被占用了之后，一直要等待锁释放之后</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait(); <span class="comment">// 等待线程释放锁</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用锁，占有锁</span></span><br><span class="line">        isLocked = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isLocked = <span class="keyword">false</span>; <span class="comment">//  释放</span></span><br><span class="line">        notify(); <span class="comment">// 唤醒其他线程使用锁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>改写成可重入锁：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> other;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自己实现可重入锁： 锁可以延续使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 20:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest2</span> </span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> Lock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock(); <span class="comment">// 获得锁</span></span><br><span class="line">        System.out.println(lock.getHoldCount());</span><br><span class="line">        doSomething();</span><br><span class="line">        lock.unlock(); <span class="comment">// 锁释放</span></span><br><span class="line">        System.out.println(lock.getHoldCount());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不可重入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        System.out.println(lock.getHoldCount());</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">        System.out.println(lock.getHoldCount());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        LockTest2 test = <span class="keyword">new</span> LockTest2();</span><br><span class="line">        test.a();</span><br><span class="line"><span class="comment">//        test.doSomething();</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"最终后的锁计数器的值为"</span>);</span><br><span class="line">        System.out.println(test.lock.getHoldCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line">    <span class="comment">//是否占用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLocked = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 如果是自己的持有锁，则可以立刻获得锁</span></span><br><span class="line">    <span class="keyword">private</span> Thread lockedBy = <span class="keyword">null</span>; <span class="comment">// 存储线程</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHoldCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> holdCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁的计数器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> holdCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread(); <span class="comment">//  当前线程</span></span><br><span class="line">        <span class="comment">// 如果被锁了，并且持有锁的线程不等于当前线程</span></span><br><span class="line">       <span class="keyword">while</span> (isLocked &amp;&amp; lockedBy != t)&#123;</span><br><span class="line">            wait();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 可以使用锁了</span></span><br><span class="line">       isLocked = <span class="keyword">true</span>;</span><br><span class="line">       lockedBy = t;</span><br><span class="line">       holdCount++; <span class="comment">// 计数器加1；</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Thread.currentThread() == lockedBy)&#123; <span class="comment">//当前线程等于lockedBy的时候才会释放</span></span><br><span class="line">            holdCount--; <span class="comment">// 计数器减一</span></span><br><span class="line">            <span class="keyword">if</span>(holdCount == <span class="number">0</span>)&#123;</span><br><span class="line">                isLocked = <span class="keyword">false</span>; <span class="comment">//  释放</span></span><br><span class="line">                lockedBy = <span class="keyword">null</span>;</span><br><span class="line">                notify(); <span class="comment">// 唤醒其他线程使用锁</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>1<br>2<br>hello world<br>1<br>0<br>最终后的锁计数器的值为<br>0</p></blockquote><p>直接用<code>java.util.concurrent（J.U.C）</code>包里面的类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br></pre></td></tr></table></figure></div><p>将上面的代码中的 <code>Lock lock = new Lock();</code>改成上述代码就行了，方法都是一样的。可以运行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">// 确保释放锁，从而避免发生死锁。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LockExample lockExample = <span class="keyword">new</span> LockExample();</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">    executorService.execute(() -&gt; lockExample.func());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注意：如果同步代码有异常，要将unlock()写入finally语句块 </p><blockquote><p>Lock和synchronized的区别</p><p>1.Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁</p><p>2.Lock只有代码块锁，synchronized有代码块锁和方法锁</p><p>3.使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</p><p>优先使用顺序：  Lock——同步代码块（已经进入了方法体，分配了相应资源）——同步方法（在方法体之外）</p></blockquote><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="1-锁的实现"><a href="#1-锁的实现" class="headerlink" title="1. 锁的实现"></a>1. 锁的实现</h3><p>synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。</p><h3 id="2-性能"><a href="#2-性能" class="headerlink" title="2. 性能"></a>2. 性能</h3><p>新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。 </p><h3 id="3-等待可中断"><a href="#3-等待可中断" class="headerlink" title="3. 等待可中断"></a>3. 等待可中断</h3><p>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。 </p><h3 id="4-公平锁"><a href="#4-公平锁" class="headerlink" title="4. 公平锁"></a>4. 公平锁</h3><p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。</p><p>synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。</p><h3 id="5-锁绑定多个条件"><a href="#5-锁绑定多个条件" class="headerlink" title="5. 锁绑定多个条件"></a>5. 锁绑定多个条件</h3><p>一个 ReentrantLock 可以同时绑定多个 <code>Condition</code> 对象 。</p><h2 id="使用选择"><a href="#使用选择" class="headerlink" title="使用选择"></a>使用选择</h2><p>除非需要使用 <code>ReentrantLock</code> 的高级功能，否则优先使用 <code>synchronized</code>。这是因为 <code>synchronized</code> 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 <code>ReentrantLock</code> 不是所有的 JDK 版本都支持。并且使用 <code>synchronized</code> 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。 </p><h2 id="同步小实例"><a href="#同步小实例" class="headerlink" title="同步小实例"></a>同步小实例</h2><h3 id="1-快乐电影院"><a href="#1-快乐电影院" class="headerlink" title="1. 快乐电影院"></a>1. 快乐电影院</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快乐影院： 实现多线程买电影票</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-14 17:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyCinema</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cinema cinema = <span class="keyword">new</span> Cinema(<span class="string">"旺达"</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Custom(cinema, <span class="number">2</span>), <span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Custom(cinema, <span class="number">1</span>), <span class="string">"李四"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Custom</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Cinema cinema; <span class="comment">// 去哪个影院看电影</span></span><br><span class="line">    <span class="keyword">int</span> seats; <span class="comment">//  要买多少张票</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Custom</span><span class="params">(Cinema cinema, <span class="keyword">int</span> seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cinema = cinema;</span><br><span class="line">        <span class="keyword">this</span>.seats = seats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (cinema)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cinema.bookTickets(seats))&#123;</span><br><span class="line">                System.out.println(<span class="string">"购票成功，"</span>+ Thread.currentThread().getName()+<span class="string">"的位置为：==&gt;"</span>+seats );</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"票不够， 购票失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cinema</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> totalSeats; <span class="comment">// 有多少座位</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cinema</span><span class="params">(String name, <span class="keyword">int</span> totalSeats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.totalSeats = totalSeats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bookTickets</span><span class="params">(<span class="keyword">int</span> nums)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前电影院有"</span>+totalSeats+<span class="string">"张票."</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums &gt;  totalSeats)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            totalSeats-=nums;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>当前电影院有2张票.<br>购票成功，张三的位置为：==&gt;2<br>当前电影院有0张票.<br>票不够， 购票失败</p></blockquote><h3 id="2-高级功能：快乐电影院-支持在线选座"><a href="#2-高级功能：快乐电影院-支持在线选座" class="headerlink" title="2.高级功能：快乐电影院-支持在线选座"></a>2.高级功能：快乐电影院-支持在线选座</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> syn;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快乐影院： 实现多线程买电影票 支持选座</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-14 17:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyMovie</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; NumsSeats = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        NumsSeats.add(<span class="number">1</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">2</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">3</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">4</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">5</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; seat1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        seat1.add(<span class="number">1</span>);</span><br><span class="line">        seat1.add(<span class="number">4</span>);</span><br><span class="line">        seat1.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; seat2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        seat2.add(<span class="number">3</span>);</span><br><span class="line">        seat2.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ZZCinema cinema = <span class="keyword">new</span> ZZCinema(<span class="string">"旺达"</span>, NumsSeats);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HappyCustom(cinema, seat1), <span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HappyCustom(cinema, seat2), <span class="string">"李四"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HappyCustom</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    ZZCinema cinema; <span class="comment">// 去哪个影院看电影</span></span><br><span class="line">    List&lt;Integer&gt; seats; <span class="comment">//  要买多少张票</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HappyCustom</span><span class="params">(ZZCinema cinema, List&lt;Integer&gt; seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cinema = cinema;</span><br><span class="line">        <span class="keyword">this</span>.seats = seats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (cinema)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cinema.bookTickets(seats))&#123;</span><br><span class="line">                System.out.println(<span class="string">"购票成功，"</span>+ Thread.currentThread().getName()+<span class="string">"的位置为：==&gt;"</span>+seats );</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"票不够，"</span>+Thread.currentThread().getName()+<span class="string">" 购票失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZZCinema</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    List&lt;Integer&gt; totalSeats; <span class="comment">// 有多少座位</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZZCinema</span><span class="params">(String name, List&lt;Integer&gt; totalSeats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.totalSeats = totalSeats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bookTickets</span><span class="params">(List&lt;Integer&gt; seats)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"欢迎光临"</span>+ <span class="keyword">this</span>.name +<span class="string">"当前电影院有"</span>+totalSeats+<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span>(seats.size() &gt; totalSeats.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; copy =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        copy.addAll(totalSeats);</span><br><span class="line">        copy.removeAll(seats);</span><br><span class="line">        <span class="keyword">if</span>(totalSeats.size() - copy.size() != seats.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 出票失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        totalSeats = copy;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>欢迎光临旺达当前电影院有[1, 2, 3, 4, 5, 6].<br>购票成功，张三的位置为：==&gt;[1, 4, 6]<br>欢迎光临旺达当前电影院有[2, 3, 5].<br>票不够，李四 购票失败</p></blockquote><h3 id="3-快乐12306"><a href="#3-快乐12306" class="headerlink" title="3. 快乐12306"></a>3. 快乐12306</h3><p>注意和快乐电影院的实现方法，有所不同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 快乐火车票</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-14 18:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Happy12306</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; NumsSeats = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        NumsSeats.add(<span class="number">1</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">2</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">3</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">4</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">5</span>);</span><br><span class="line">        NumsSeats.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; seat1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        seat1.add(<span class="number">1</span>);</span><br><span class="line">        seat1.add(<span class="number">4</span>);</span><br><span class="line">        seat1.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; seat2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        seat2.add(<span class="number">3</span>);</span><br><span class="line">        seat2.add(<span class="number">5</span>);</span><br><span class="line">        Web12306 w = <span class="keyword">new</span> Web12306(NumsSeats, <span class="string">"12306赣州站"</span>);</span><br><span class="line">        <span class="keyword">new</span> Passenger(w,seat1, <span class="string">"张三"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Passenger(w, seat2, <span class="string">"李四"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Passenger</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; seats; <span class="comment">//  要买多少张票</span></span><br><span class="line">    String name; <span class="comment">//  名字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Passenger</span><span class="params">(Runnable target, List&lt;Integer&gt; seats, String name)</span> </span>&#123; <span class="comment">// 传入target</span></span><br><span class="line">        <span class="keyword">super</span>(target, name);</span><br><span class="line">        <span class="keyword">this</span>.seats = seats;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web12306</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; tickets;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Web12306</span><span class="params">(List&lt;Integer&gt; tickets, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tickets = tickets;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Passenger p =  (Passenger)Thread.currentThread();  <span class="comment">//  当前乘客</span></span><br><span class="line">        <span class="keyword">if</span>(bookTickets(p.seats))&#123;</span><br><span class="line">            System.out.println(<span class="string">"购票成功，"</span>+ Thread.currentThread().getName()+<span class="string">"的位置为：==&gt;"</span>+p.seats );</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"票不够，"</span>+Thread.currentThread().getName()+<span class="string">" 购票失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">bookTickets</span><span class="params">(List&lt;Integer&gt; seats)</span></span>&#123; <span class="comment">// 同步方法</span></span><br><span class="line">        System.out.println(<span class="string">"欢迎光临"</span>+ <span class="keyword">this</span>.name +<span class="string">"当前有"</span>+tickets+<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span>(seats.size() &gt; tickets.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; copy =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        copy.addAll(tickets);</span><br><span class="line">        copy.removeAll(seats);</span><br><span class="line">        <span class="keyword">if</span>(tickets.size() - copy.size() != seats.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 出票失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        tickets = copy;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>欢迎光临12306赣州站当前有[1, 2, 3, 4, 5, 6].<br>购票成功，张三的位置为：== &gt;[1, 4, 6]<br>欢迎光临12306赣州站当前有[2, 3, 5].<br>购票成功，李四的位置为：== &gt;[3, 5]</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>释放锁的操作：</p><blockquote><ol><li><p>当前线程的同步方法、同步代码块执行结束</p></li><li><p>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行。</p></li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</li><li>当前线程在同步代码块、同步方法中执行了锁对象的<strong>wait()</strong>方法，当前线程暂停，并释放锁。</li></ol></blockquote><p>不会释放锁的操作：</p><blockquote><ol><li><p>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行</p></li><li><p>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。</p><p>​            ==&gt; 应尽量避免使用suspend()和resume()来控制线程(这两个方法以及过时了!  )</p></li></ol></blockquote><hr><h1 id="七、-线程状态"><a href="#七、-线程状态" class="headerlink" title="七、 线程状态"></a>七、 线程状态</h1><p>一个线程只能处于一种状态，并且这里的线程状态特指 Java 虚拟机的线程状态，不能反映线程在特定操作系统下的状态 。</p><h2 id="新建（NEW）"><a href="#新建（NEW）" class="headerlink" title="新建（NEW）"></a>新建（NEW）</h2><p>创建后尚未启动。</p><h2 id="可运行（RUNABLE）"><a href="#可运行（RUNABLE）" class="headerlink" title="可运行（RUNABLE）"></a>可运行（RUNABLE）</h2><p>正在 Java 虚拟机中运行。但是在操作系统层面，它可能处于运行状态，也可能等待资源调度（例如处理器资源），资源调度完成就进入运行状态。所以该状态的可运行是指可以被运行，具体有没有运行要看底层操作系统的资源调度。 </p><h2 id="阻塞（BLOCKED）"><a href="#阻塞（BLOCKED）" class="headerlink" title="阻塞（BLOCKED）"></a>阻塞（BLOCKED）</h2><p>请求获取 <code>monitor lock</code> （监视器）从而进入 <code>synchronized</code> 函数或者代码块，但是其它线程已经占用了该 <code>monitor lock</code>，所以处于阻塞状态。要结束该状态进入从而 <code>RUNABLE</code> 需要其他线程释放 <code>monitor lock</code>。 </p><h2 id="无限期等待（WAITING）"><a href="#无限期等待（WAITING）" class="headerlink" title="无限期等待（WAITING）"></a>无限期等待（WAITING）</h2><p>等待其它线程显式地唤醒。 </p><p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取 <code>monitor lock</code>。而等待是主动的，通过调用 <code>Object.wait()</code> 等方法进入。 </p><div class="table-container"><table><thead><tr><th style="text-align:center">进入方法</th><th style="text-align:center">退出方法</th></tr></thead><tbody><tr><td style="text-align:center">没有设置 Timeout 参数的 Object.wait() 方法</td><td style="text-align:center">Object.notify() / Object.notifyAll()</td></tr><tr><td style="text-align:center">没有设置 Timeout 参数的 Thread.join() 方法</td><td style="text-align:center">被调用的线程执行完毕</td></tr><tr><td style="text-align:center">LockSupport.park() 方法</td><td style="text-align:center">LockSupport.unpark(Thread)</td></tr></tbody></table></div><h2 id="限期等待（TIME-WAITING"><a href="#限期等待（TIME-WAITING" class="headerlink" title="限期等待（TIME_WAITING)"></a>限期等待（TIME_WAITING)</h2><p>无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。 </p><div class="table-container"><table><thead><tr><th style="text-align:center">进入方法</th><th style="text-align:center">退出方法</th></tr></thead><tbody><tr><td style="text-align:center">Thread.sleep() 方法</td><td style="text-align:center">时间结束</td></tr><tr><td style="text-align:center">设置了 Timeout 参数的 Object.wait() 方法</td><td style="text-align:center">时间结束 / Object.notify() / Object.notifyAll()</td></tr><tr><td style="text-align:center">设置了 Timeout 参数的 Thread.join() 方法</td><td style="text-align:center">时间结束 / 被调用的线程执行完毕</td></tr><tr><td style="text-align:center">LockSupport.parkNanos() 方法</td><td style="text-align:center">LockSupport.unpark(Thread)</td></tr><tr><td style="text-align:center">LockSupport.parkUntil() 方法</td><td style="text-align:center">LockSupport.unpark(Thread)</td></tr></tbody></table></div><p>调用 <code>Thread.sleep()</code> 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。调用 <code>Object.wait()</code> 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。 </p><h2 id="死亡（TERMINATED）"><a href="#死亡（TERMINATED）" class="headerlink" title="死亡（TERMINATED）"></a>死亡（TERMINATED）</h2><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。 </p><p><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html" target="_blank" rel="noopener">Java SE 9 Enum Thread.State</a> </p><hr><h1 id="八、线程的生命周期"><a href="#八、线程的生命周期" class="headerlink" title="八、线程的生命周期"></a>八、线程的生命周期</h1><p><a href="/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/1581860001074.png" data-fancybox="group" data-caption="1581860001074" class="fancybox"><img alt="1581860001074" data-src="/2020/02/16/Java%E4%B9%8B%E5%B9%B6%E5%8F%91%E4%B8%93%E9%A2%98/1581860001074.png" class="lazyload" title="1581860001074"></a></p><hr><h1 id="九、线程之间的协作-通信"><a href="#九、线程之间的协作-通信" class="headerlink" title="九、线程之间的协作/通信"></a>九、线程之间的协作/通信</h1><p>当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。 </p><h2 id="Join-插队"><a href="#Join-插队" class="headerlink" title="Join-插队"></a>Join-插队</h2><p>在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * join: 合并线程， 插队线程，注意谁被阻塞了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-13 20:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockedJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockedJoin t = <span class="keyword">new</span> BlockedJoin();</span><br><span class="line">        Thread th = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        th.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>;  i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(  i == <span class="number">40</span>)&#123;</span><br><span class="line">                th.join();  <span class="comment">// 必须当th线程执行完之后，main线程才会执行  main被阻塞！</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main:"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="wait-与-notify-和-notifyAll"><a href="#wait-与-notify-和-notifyAll" class="headerlink" title="wait() 与 notify() 和 notifyAll()"></a>wait() 与 notify() <strong>和</strong> notifyAll()</h2><p>它们都属于 <code>Object</code> 的一部分，而不属于 <code>Thread</code>。</p><p><code>Java.lang.Object</code>提供的这三个方法只有在<code>synchronized</code>方法或<code>synchronized</code>代码块中才能使用，否则会报<code>java.lang.IllegalMonitorStateException</code>异常。 </p><h3 id="1-wait-方法"><a href="#1-wait-方法" class="headerlink" title="1. wait() 方法"></a>1. wait() 方法</h3><p>​        wait()令当前线程挂起并放弃CPU、同步资源，使别的线程可访问并修改共享资源，而当前线程排队等候再次对资源的访问。调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 <code>notify()</code> 或者 <code>notifyAll()</code> 来唤醒挂起的线程。 </p><p>​        <strong>使用 wait() 挂起期间，线程会释放锁</strong>。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 <code>notify()</code> 或者 <code>notifyAll()</code> 来唤醒挂起的线程，造成死锁。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    WaitNotifyExample example = <span class="keyword">new</span> WaitNotifyExample();</span><br><span class="line">    executorService.execute(() -&gt; example.after());</span><br><span class="line">    executorService.execute(() -&gt; example.before());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before</span><br><span class="line">after</span><br></pre></td></tr></table></figure></div><p><strong>wait() 和 sleep() 的区别</strong></p><ul><li><code>wait()</code> 是 <code>Object</code> 的方法，而 <code>sleep()</code> 是 <code>Thread</code> 的静态方法；</li><li><code>wait()</code> 会释放锁，<code>sleep()</code> 不会。</li></ul><h3 id="2-notify-方法"><a href="#2-notify-方法" class="headerlink" title="2. notify()方法"></a>2. notify()方法</h3><p>​        唤醒正在排队等待同步资源的线程中优先级最高者结束等待。</p><h3 id="3-notifyAll-方法"><a href="#3-notifyAll-方法" class="headerlink" title="3. notifyAll() 方法"></a>3. notifyAll() 方法</h3><p>​        唤醒正在排队等待资源的所有线程结束等待 。 </p><h2 id="await-signal-signalAll"><a href="#await-signal-signalAll" class="headerlink" title="await() signal() signalAll()"></a>await() signal() signalAll()</h2><p>​        <code>java.util.concurrent</code> 类库中提供了 <code>Condition</code> 类来实现线程之间的协调，可以在 <code>Condition</code> 上调用 <code>await()</code> 方法使线程等待，其它线程调用 <code>signal()</code> 或 <code>signalAll()</code> 方法唤醒等待的线程。 </p><p>​        相比于 <code>wait()</code> 这种等待方式，<code>await()</code> 可以指定等待的条件，因此更加灵活。</p><p>​        使用 <code>Lock</code> 来获取一个 <code>Condition</code> 对象。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cooperation;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 21:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwaitSignalExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"before"</span>);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            condition.await();</span><br><span class="line">            System.out.println(<span class="string">"after"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        AwaitSignalExample example = <span class="keyword">new</span> AwaitSignalExample();</span><br><span class="line">        executorService.execute(() -&gt; example.after());</span><br><span class="line">        executorService.execute(() -&gt; example.before());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before</span><br><span class="line">after</span><br></pre></td></tr></table></figure></div><h2 id="线程通信：生产者消费者模式"><a href="#线程通信：生产者消费者模式" class="headerlink" title="线程通信：生产者消费者模式"></a>线程通信：生产者消费者模式</h2><p>​        生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p>这里可能出现两个问题：</p><blockquote><p>生产者比消费者快时，消费者会漏掉一些数据没有取到。</p><p>消费者比生产者快时，消费者会取相同的数据。</p></blockquote><p>以一个例子来理解：生产馒头</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cooperation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 生产者和消费者问题： 管程法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-15 12:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buffer b = <span class="keyword">new</span> Buffer();  <span class="comment">// 缓存区</span></span><br><span class="line">        Product p = <span class="keyword">new</span> Product(b);</span><br><span class="line">        Consumer c = <span class="keyword">new</span> Consumer(b);</span><br><span class="line">        p.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>  <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Buffer buffer;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(Buffer buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer = buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span> ; i++)&#123;</span><br><span class="line">            buffer.push(<span class="keyword">new</span> ManTou(i));</span><br><span class="line">            System.out.println(<span class="string">"生产者生产了"</span>+i+<span class="string">"号馒头， 当前共有馒头"</span>+ buffer.getNum() +<span class="string">" 个"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buffer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> max_szie = <span class="number">10</span>; <span class="comment">// 大小</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>  num;</span><br><span class="line">    <span class="keyword">private</span> ManTou[] man = <span class="keyword">new</span> ManTou[max_szie];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">( ManTou manTou)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= max_szie)&#123; <span class="comment">// 不用生产了</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();  <span class="comment">// 缓存区满了， 生产者等待消费者消费，当消费者唤醒生产者时继续生产</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            man[num] = manTou;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll(); <span class="comment">// 唤醒消费者来消费了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取走馒头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ManTou <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num &lt;= <span class="number">0</span>)&#123; <span class="comment">// 没有馒头</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll(); <span class="comment">// 唤醒生产者该生产了</span></span><br><span class="line">        <span class="keyword">return</span> man[num];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Buffer buffer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Buffer buffer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer = buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buffer.getNum() == <span class="number">0</span>)    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ManTou m = buffer.pop();</span><br><span class="line">            System.out.println(<span class="string">"消费者消费了一个"</span>+m.getId()+<span class="string">"馒头， 当前共有馒头"</span>+ buffer.getNum() +<span class="string">" 个"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 馒头</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManTou</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// 馒头的编号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ManTou</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>生产者生产了0号馒头， 当前共有馒头1 个<br>生产者生产了1号馒头， 当前共有馒头2 个<br>生产者生产了2号馒头， 当前共有馒头3 个<br>消费者消费了一个2馒头， 当前共有馒头2 个<br>生产者生产了3号馒头， 当前共有馒头3 个<br>生产者生产了4号馒头， 当前共有馒头4 个<br>消费者消费了一个4馒头， 当前共有馒头3 个<br>生产者生产了5号馒头， 当前共有馒头4 个<br>生产者生产了6号馒头， 当前共有馒头5 个<br>生产者生产了7号馒头， 当前共有馒头6 个<br>消费者消费了一个7馒头， 当前共有馒头5 个<br>生产者生产了8号馒头， 当前共有馒头6 个<br>生产者生产了9号馒头， 当前共有馒头7 个<br>消费者消费了一个9馒头， 当前共有馒头6 个<br>生产者生产了10号馒头， 当前共有馒头7 个<br>生产者生产了11号馒头， 当前共有馒头8 个<br>生产者生产了12号馒头， 当前共有馒头9 个</p><p>…</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://cyc2018.github.io/CS-Notes" target="_blank" rel="noopener">https://cyc2018.github.io/CS-Notes</a> </li><li>BruceEckel. Java 编程思想: 第 4 版 [M]. 机械工业出版社, 2007. </li><li>周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011. </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://Castile.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://Castile.github.io/tags/Java/"/>
    
      <category term="线程" scheme="https://Castile.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-779-第k个语法符号</title>
    <link href="https://castile.github.io/2020/02/16/leetcode-779-%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/"/>
    <id>https://castile.github.io/2020/02/16/leetcode-779-%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/</id>
    <published>2020-02-16T06:09:34.000Z</published>
    <updated>2020-02-16T06:30:52.979Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>leetcode： 779 第K个语法符号</p><p>在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</p><p>给定行数 N 和序数 K，返回第 N 行中第 K个字符。（K从1开始）</p><p>例子:</p><p>输入: N = 1, K = 1<br>输出: 0</p><p>输入: N = 2, K = 1<br>输出: 0</p><p>输入: N = 2, K = 2<br>输出: 1</p><p>输入: N = 4, K = 5<br>输出: 1</p><p>解释:<br>第一行: 0<br>第二行: 01<br>第三行: 0110<br>第四行: 01101001</p><p>链接：<a href="https://leetcode-cn.com/problems/k-th-symbol-in-grammar" target="_blank" rel="noopener">https://leetcode-cn.com/problems/k-th-symbol-in-grammar</a></p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>既然每一行都是根据上一行来生成的，把这样的上下两行写成比特形式找一下规律。</p><p> <a href="/2020/02/16/leetcode-779-%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/parent.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:80%;" data-src="/2020/02/16/leetcode-779-%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/parent.png" class="lazyload" title="img"></a> </p><p>如果当前行为 <code>&quot;0110&quot;</code>，由此生成的下一行为 <code>&quot;01101001&quot;</code>。 </p><p> <a href="/2020/02/16/leetcode-779-%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/link.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" data-src="/2020/02/16/leetcode-779-%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/link.png" class="lazyload" title="img"></a> </p><p>据此可以总结出规律，第 K 个数字是上一行第 (K+1) / 2 个数字生成的。如果上一行的数字为 0，被生成的数字为 1 - (K%2)，如果上一行的数字为 1，被生成的数字为 K%2。</p><p> 如果k是偶数，表明是右子树，奇数为左子树。 </p><blockquote><p>  还有其他方法，见官方题解： <a href="https://leetcode-cn.com/problems/k-th-symbol-in-grammar/solution/di-kge-yu-fa-fu-hao-by-leetcode/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/k-th-symbol-in-grammar/solution/di-kge-yu-fa-fu-hao-by-leetcode/</a> </p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>github： <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode799_kthGrammar.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode799_kthGrammar.java</a> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RecurrenceAndDynamicProgramming;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-16 14:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">给定行数 N 和序数 K，返回第 N 行中第 K个字符。（K从1开始）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode799_kthGrammar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">kthGrammar</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(N==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = kthGrammar(N-<span class="number">1</span>, (K+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> K%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> K%<span class="number">2</span>==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="https://Castile.github.io/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-21-合并两个有序的链表</title>
    <link href="https://castile.github.io/2020/02/16/leetcode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>https://castile.github.io/2020/02/16/leetcode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-16T04:48:30.000Z</published>
    <updated>2020-02-16T05:15:19.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​    </p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>Leetcode-21： 合并两个有序的链表</p><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例：</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a></p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>迭代：这题目是简单题，其实就是归并排序中的归并操作。不再赘述。</p></li><li><p>递归：</p><p>​    终止条件：两条链表分别名为 l1 和 l2，当 l1 为空或 l2 为空时结束</p><p>​    返回值：每一层调用都返回排序好的链表头<br>​    本级递归内容：如果 l1 的 val 值更小，则将 l1.next 与排序好的链表头相接，l2 同理</p><p>时间复杂度： O(n+m)   空间复杂度：O(n+m)</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>github： <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/LinkedList/Leetcode21_MergeLinkedList.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/LinkedList/Leetcode21_MergeLinkedList.java</a> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummy= <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode list = dummy;</span><br><span class="line">        ListNode p1 = l1;</span><br><span class="line">        ListNode p2 = l2;</span><br><span class="line">        <span class="keyword">while</span>(p1 != <span class="keyword">null</span> &amp;&amp; p2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p1.val &gt; p2.val)&#123;</span><br><span class="line">                list.next = p2;</span><br><span class="line">                p2 = p2.next;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                list.next = p1;</span><br><span class="line">                p1 =  p1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            list = list.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理p1</span></span><br><span class="line">        <span class="keyword">if</span>(p1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.next = p1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.next = p2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists_Cur</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)  <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="keyword">null</span>)  <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span>(l1.val &gt; l2.val)&#123;</span><br><span class="line">            l2.next = mergeTwoLists_Cur(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l1.next = mergeTwoLists_Cur(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="简单" scheme="https://Castile.github.io/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="链表" scheme="https://Castile.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>开源数据集</title>
    <link href="https://castile.github.io/2020/02/13/%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <id>https://castile.github.io/2020/02/13/%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E9%9B%86/</id>
    <published>2020-02-13T02:11:42.000Z</published>
    <updated>2020-02-13T02:15:55.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="开源数据集"><a href="#开源数据集" class="headerlink" title="开源数据集"></a>开源数据集</h1><p>[toc]</p><h1 id="Images-Analysis"><a href="#Images-Analysis" class="headerlink" title="Images Analysis"></a>Images Analysis</h1><div class="table-container"><table><thead><tr><th style="text-align:center">数据集</th><th style="text-align:center">介绍</th><th style="text-align:center">备注</th><th>网址</th></tr></thead><tbody><tr><td style="text-align:center">Flickr30k</td><td style="text-align:center">图片描述</td><td style="text-align:center">31,783 images，每张图片5个语句标注</td><td><a href="http://web.engr.illinois.edu/~bplumme2/Flickr30kEntities/" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">Microsoft COCO</td><td style="text-align:center">图片描述</td><td style="text-align:center">330,000 images,每张图片至少5个语句标注</td><td><a href="http://cocodataset.org/#download" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">ESP Game</td><td style="text-align:center">多标签定义图像</td><td style="text-align:center">20,770 images，268 tags，诸如bed, light man,music</td><td><a href="https://www.kaggle.com/c/challenges-in-representation-learning-multi-modal-learning/data" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">IAPRTC-12</td><td style="text-align:center">多标签定义图像</td><td style="text-align:center">19,452 images,291 tags</td><td><a href="http://www.imageclef.org/photodata" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">NUS-WIDE</td><td style="text-align:center">多标签定义图像</td><td style="text-align:center">269,648 images,several tags (2-5 on average) per image</td><td><a href="http://lms.comp.nus.edu.sg/research/NUS-WIDE.htm" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">CUHK-PEDES</td><td style="text-align:center">以文搜图</td><td style="text-align:center">34,054 images，每张图片2条描述</td><td><a href="http://cuhk-pedes.shuanglee.me/" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">VRD</td><td style="text-align:center">视觉关系检测</td><td style="text-align:center">5,000 images, 100目录，37,993对关系</td><td><a href="https://cs.stanford.edu/people/ranjaykrishna/vrd/" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">sVG</td><td style="text-align:center">视觉关系检测</td><td style="text-align:center">108,000 images, 998,000对关系</td><td><a href="https://drive.google.com/file/d/0B5RJWjAhdT04SXRfVHBKZ0dOTzQ/view" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">Visual Genome Dataset</td><td style="text-align:center">图像属性检测</td><td style="text-align:center">108,077 images, 5.4 M 区域块，2.8 M 属性，2.3 M 关系</td><td><a href="https://visualgenome.org/" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">VQA</td><td style="text-align:center">问答系统</td><td style="text-align:center">1,105,904问题，11,059,040 回答</td><td><a href="http://www.visualqa.org/" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">Visual7W</td><td style="text-align:center">问答系统</td><td style="text-align:center">327,939 问答对</td><td><a href="http://web.stanford.edu/~yukez/visual7w/" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">TID2013</td><td style="text-align:center">图像质量评价</td><td style="text-align:center">25张参考图像，24个失真类型</td><td><a href="http://www.ponomarenko.info/tid2013.htm" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">CSIQ</td><td style="text-align:center">图像质量评价</td><td style="text-align:center">30张参考图像，6个失真类型</td><td><a href="http://vision.eng.shizuoka.ac.jp/mod/page/view.php?id=23" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">LIVE</td><td style="text-align:center">图像质量评价</td><td style="text-align:center">29张参考图像，5个失真类型</td><td><a href="http://live.ece.utexas.edu/research/quality/subjective.htm" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">WATERLOO</td><td style="text-align:center">图像质量评价</td><td style="text-align:center">4744张参考图像，20个失真类型</td><td><a href="https://ece.uwaterloo.ca/~k29ma/exploration/" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">photo.net</td><td style="text-align:center">图像美观评价</td><td style="text-align:center">20,278张图像，打分[0,10]</td><td><a href="http://ritendra.weebly.com/aesthetics-datasets.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">DPChallenge.com</td><td style="text-align:center">图像美观评价</td><td style="text-align:center">16,509张图像，打分[0,10]</td><td><a href="http://ritendra.weebly.com/aesthetics-datasets.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">CUHK</td><td style="text-align:center">图像美观评价</td><td style="text-align:center">28,410张图像，只分高质量和低质量</td><td><a href="http://mmlab.ie.cuhk.edu.hk/archive/CUHKPQ/Dataset.htm" target="_blank" rel="noopener">链接</a></td></tr><tr><td style="text-align:center">AVA</td><td style="text-align:center">图像美观评价</td><td style="text-align:center">255,500张图像，打分[0,10]</td><td><a href="https://github.com/mtobeiyf/ava_downloader" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><p><a href="#开源数据集">top</a></p><h1 id="Image-Motion-amp-Tracking"><a href="#Image-Motion-amp-Tracking" class="headerlink" title="Image Motion &amp; Tracking"></a>Image Motion &amp; Tracking</h1><div class="table-container"><table><thead><tr><th>数据集</th><th>介绍</th><th>备注</th><th>网址</th></tr></thead><tbody><tr><td>CUHK03</td><td>Person re-identification(人重识别)</td><td>image num:13164 person num:1360 camera num:10( 5 pairs)</td><td><a href="http://www.ee.cuhk.edu.hk/~xgwang/CUHK_identification.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>CUHK02</td><td>Person re-identification(人重识别)</td><td>image num:7264 person num:1816 camera num:10( 5 pairs)</td><td><a href="http://www.ee.cuhk.edu.hk/~xgwang/CUHK_identification.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>CUHK01</td><td>Person re-identification(人重识别)</td><td>image num:3884 person num:971 camera num: 2</td><td><a href="http://www.ee.cuhk.edu.hk/~xgwang/CUHK_identification.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>VIPeR</td><td>Person re-identification(人重识别)</td><td>image num:1264 person num:632 camera num:2</td><td><a href="https://vision.soe.ucsc.edu/node/178" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ETH1,2,3</td><td>Person re-identification(人重识别)</td><td>image num:8580 person num:83,35,28 camera num:1</td><td><a href="http://homepages.dcc.ufmg.br/~william/datasets.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>PRID2011</td><td>Person re-identification(人重识别)</td><td>image num:24541 person num:934 camera num:2</td><td><a href="https://www.tugraz.at/institute/icg/research/team-bischof/lrs/downloads/PRID11/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MARS</td><td>Person re-identification(人重识别)</td><td>image num:11910031 person num:1261 camera num:6</td><td><a href="http://www.liangzheng.com.cn/Project/project_mars.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Market1501</td><td>Person re-identification(人重识别)</td><td>image num:32217 person num:1501 camera num:6</td><td><a href="http://www.liangzheng.org/Project/project_reid.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Epic Fail (EF) dataset</td><td>Risk Assessment(风险评估)</td><td>video num:3000</td><td><a href="https://vision.soe.ucsc.edu/?q=node/178" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Street Accident (SA) dataset</td><td>Risk Assessment(风险评估)</td><td>video num:1733</td><td><a href="https://vision.soe.ucsc.edu/?q=node/178" target="_blank" rel="noopener">链接</a></td></tr><tr><td>OTB-50</td><td>visual tracking(跟踪)</td><td>video num:50</td><td><a href="http://www.visual-tracking.net/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>OTB-100</td><td>visual tracking(跟踪)</td><td>video num:100</td><td><a href="http://www.visual-tracking.net/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>VOT2015</td><td>visual tracking(跟踪)</td><td>video num:60</td><td><a href="http://www.votchallenge.net/vot2015/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ALOV300</td><td>visual tracking(跟踪)</td><td>video num:314</td><td><a href="http://alov300pp.joomlafree.it/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MOT</td><td>visual tracking(跟踪)</td><td>video num:train:11 test:11</td><td><a href="https://motchallenge.net/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>THUMOS</td><td>Temporal action localization(动作定位)</td><td>video num:~3K activities class:20 instances:~3K</td><td><a href="http://crcv.ucf.edu/THUMOS14/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ActivityNet</td><td>Temporal action localization(动作定位)</td><td>video num:20k activities class:200 instances:7.6K</td><td><a href="http://activity-net.org/challenges/2016/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Mexaction2</td><td>Temporal action localization(动作定位)</td><td>activities class:2 instances:1975</td><td><a href="http://mexculture.cnam.fr/xwiki/bin/view/Datasets/Mex+action+dataset" target="_blank" rel="noopener">链接</a></td></tr><tr><td>FlyingChairs dataset</td><td>optical flow(光流)</td><td>image pairs：22k</td><td><a href="https://lmb.informatik.uni-freiburg.de/resources/datasets/FlyingChairs.en.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>FlyingThings3D</td><td>optical flow(光流)</td><td>image pairs：22k</td><td><a href="https://lmb.informatik.uni-freiburg.de/resources/datasets/SceneFlowDatasets.en.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>KITTI benchmark suite</td><td>optical flow(光流)</td><td>image pairs：1600</td><td><a href="http://www.cvlibs.net/datasets/kitti/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MPI Sintel</td><td>optical flow(光流)</td><td>image pairs：1064</td><td><a href="http://sintel.is.tue.mpg.de/" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><h1 id="Video-Analysis-amp-Scene-Understanding"><a href="#Video-Analysis-amp-Scene-Understanding" class="headerlink" title="Video Analysis &amp; Scene Understanding"></a>Video Analysis &amp; Scene Understanding</h1><div class="table-container"><table><thead><tr><th>数据集</th><th>介绍</th><th>备注</th><th>网址</th></tr></thead><tbody><tr><td>UCF101</td><td>动作行为识别</td><td>13320 video,101类动作，主要是五大类：1)人-物交互；2)肢体运动；3)人-人交互；4)弹奏乐器；5)运动</td><td><a href="http://crcv.ucf.edu/data/UCF101.php" target="_blank" rel="noopener">链接</a></td></tr><tr><td>HMDB51</td><td>动作行为识别</td><td>7000 videos,51类，包括人脸表情动作，身体动作，人与人交互等</td><td><a href="http://serre-lab.clps.brown.edu/resource/hmdb-a-large-human-motion-database/#Downloads" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Moments-in-Time</td><td>动作行为识别</td><td>1,000,000 videos,339类</td><td><a href="http://moments.csail.mit.edu/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ActivityNet 1.3</td><td>动作行为识别</td><td>20,000 videos,200类</td><td><a href="http://activity-net.org/challenges/2016/guidelines.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Kinetics</td><td>动作行为识别</td><td>300,000 videos，400类</td><td><a href="https://deepmind.com/research/open-source/open-source-datasets/kinetics/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>AVA</td><td>动作行为识别</td><td>57,600 videos，80类</td><td><a href="https://research.google.com/ava/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Collective Activity Dataset</td><td>群体活动行为识别</td><td>44 videos,穿叉、行走、等待、交谈和排队 五类</td><td><a href="http://vhosts.eecs.umich.edu/vision//activity-dataset.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Choi’s New Dataset</td><td>群体活动行为识别</td><td>32 videos，聚会，谈话，分开，一起走，追逐和排队 六类</td><td>None</td></tr><tr><td>ActivityNet 1.3</td><td>检测动作事件的起始时间和终止时间</td><td>20,000 videos,200类动作的起始时间和终止时间</td><td><a href="http://activity-net.org/challenges/2016/guidelines.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>THUMOS</td><td>检测动作事件的起始时间和终止时间</td><td>15,000 videos，101类动作的起始时间和终止时间</td><td><a href="http://www.thumos.info/download.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MED</td><td>事件检测</td><td>32,744 videos,20个事件</td><td><a href="http://www-nlpir.nist.gov/projects/tv2017/data/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>EventNet</td><td>事件检测</td><td>90,000 videos，500个事件</td><td><a href="http://eventnet.ee.columbia.edu/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Columbia Consumer Video</td><td>事件检测</td><td>9,317 videos，20个事件</td><td><a href="http://www.ee.columbia.edu/ln/dvmm/CCV/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ADE20K</td><td>事件检测</td><td>20,210 videos，900个事件</td><td><a href="http://sceneparsing.csail.mit.edu/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>DAVIS</td><td>视频主物体分割</td><td>50 videos，分割标注</td><td><a href="http://davischallenge.org/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>FBMS</td><td>视频主物体分割</td><td>59 videos，分割标注</td><td><a href="https://lmb.informatik.uni-freiburg.de/resources/datasets/moseg.en.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>IJB-C</td><td>视频人脸识别</td><td>11,000 videos，</td><td><a href="https://www.nist.gov/programs-projects/face-challenges" target="_blank" rel="noopener">链接</a></td></tr><tr><td>YouTube Faces</td><td>视频人脸识别</td><td>3,425 videos，1595 人</td><td><a href="https://www.cs.tau.ac.il/~wolf/ytfaces/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MS-Celeb-1M</td><td>视频人脸识别</td><td>1,000,000 images，21,000人</td><td><a href="http://www.msceleb.org/download/sampleset" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MSVD</td><td>视频描述</td><td>1,970 videos</td><td><a href="http://www.cs.utexas.edu/users/ml/clamp/videoDescription/YouTubeClips.tar" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MSR-VTT-10K</td><td>视频描述</td><td>10，000 videos</td><td><a href="http://ms-multimedia-challenge.com/2017/dataset" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MSR-VTT-10K</td><td>视频描述</td><td>无</td><td><a href="https://sites.google.com/site/describingmovies/lsmdc-2016/download" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><p><a href="#开源数据集">top</a></p><h1 id="3D-Computer-Vision"><a href="#3D-Computer-Vision" class="headerlink" title="3D Computer Vision"></a>3D Computer Vision</h1><div class="table-container"><table><thead><tr><th>数据集</th><th>介绍</th><th>备注</th><th>网址</th></tr></thead><tbody><tr><td>photoface database</td><td>基于光度立体视觉的二维和三维人脸识别数据库</td><td>总共7356张图像，包含1839个session和261个subjects</td><td>None</td></tr><tr><td>NYU Depth V2 dataset</td><td>关于RGBD 图像场景理解的数据库</td><td>提供1449张深度图片和他们的密集2d点类标注</td><td><a href="https://cs.nyu.edu/~silberman/datasets/nyu_depth_v2.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>SUN RGBD dataset</td><td>是上面的NYU Depth V2 dataset的超集，多了3D bounding boxes和room layouts的标注。</td><td>有10,000张RGB-D图片，有58,657个3D包围框和146,617 个2d包围框。</td><td><a href="http://rgbd.cs.princeton.edu/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>PASCAL3D+</td><td>新的三维物体检测和姿态估计数据集，从PASCAL VOC 演化而来，包含图像，注解，和3D CAD模型</td><td>总共12个类，平均每个类别有3000多个实例</td><td><a href="http://cvgl.stanford.edu/projects/pascal3d.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>IKEA</td><td>包含典型室内场景的三维模型的数据库，例如桌子椅子等</td><td>包含大约759张图片和219个3D模型</td><td><a href="http://ikea.csail.mit.edu/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>New Tsukuba Dataset</td><td>包含了很多立体物体对的数据库，用于立体物体匹配</td><td>总共1800个立体物体对，以及每立体对的立体视差图、遮挡图和不连续图</td><td><a href="https://cvlab-home.blogspot.jp/2012/05/h2fecha-2581457116665894170-displaynone.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Oxford RobotCar Dataset</td><td>关于户外自动驾驶的数据集。</td><td>包含在驾驶汽车过程从6个摄像头收集的2000w张图片，和当时的激光雷达，GPS和地面实况标注。</td><td><a href="http://robotcar-dataset.robots.ox.ac.uk/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Middlebury V3</td><td>包含高分辨率物体立体视差标注的数据库</td><td>包含33个类，没有明说每类有多少数据</td><td><a href="http://vision.middlebury.edu/stereo/eval3/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ShapeNet</td><td>包含3D模型，和3d模型的类别标注的数据集，覆盖了常用的3D数据集PASCAL 3D+。</td><td>它涵盖55个常见的对象类别，有大约51,300个3D模型</td><td><a href="https://www.shapenet.org/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MICC dataset</td><td>包含了3D人脸扫描和在不同分辨率，条件和缩放级别下的几个视频序列的数据库。</td><td>有53个人的立体人脸数据</td><td><a href="https://www.micc.unifi.it/resources/datasets/florence-3d-faces/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>CMU MoCap Dataset</td><td>包含了3D人体关键点标注和骨架移动标注的数据集。</td><td>有6个类别和23个子类别，总共2605个数据。</td><td><a href="http://mocap.cs.cmu.edu/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>DTU dataset</td><td>关于3D场景的数据集。</td><td>有124个场景，每场景有49/64个位置的RGB图像和结构光标注。</td><td><a href="http://roboimagedata.compute.dtu.dk/?page_id=36" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><p><a href="#开源数据集">top</a></p><h1 id="Analyzing-Humans-in-Images"><a href="#Analyzing-Humans-in-Images" class="headerlink" title="Analyzing Humans in Images"></a>Analyzing Humans in Images</h1><div class="table-container"><table><thead><tr><th>数据集</th><th>介绍</th><th>备注</th><th>网址</th></tr></thead><tbody><tr><td>MSR-Action3D</td><td>包含深度的动作识别数据集，</td><td>有20个动作，总共557个序列。</td><td><a href="http://users.eecs.northwestern.edu/~jwa368/my_data.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Florence-3D</td><td>包含深度的动作识别数据集，</td><td>有9个动作，总共215个动作序列。</td><td><a href="https://www.micc.unifi.it/resources/datasets/florence-3d-actions-dataset/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Berkeley MHAD</td><td>包含深度的动作识别数据集，</td><td>有11个动作，产生660个动作序列。</td><td><a href="http://tele-immersion.citris-uc.org/berkeley_mhad" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Online Action Detection</td><td>包含深度的动作识别数据集，</td><td>数据集包含59个长序列，包含10种不同的日常生活行为。</td><td><a href="http://homes.esat.kuleuven.be/~rdegeest/OnlineActionDetection.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ChaLearn LAP IsoGD Dataset</td><td>RGB-D图像的手势识别的数据集。</td><td>包括47933个RGB-D手势视频，有249个手势标签。Training有35878视频，Validation有5784个，test有6271个</td><td><a href="http://gesture.chalearn.org/2016-looking-at-people-cvpr-challenge/isogd-and-congd-datasets" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MAFA dataset</td><td>关于面部遮挡问题的数据集</td><td>有30, 811张人脸和35806张有遮挡的脸组成。</td><td><a href="http://www.escience.cn/people/geshiming/mafa.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MSRC-12 Kinect Gesture Dataset</td><td>手势识别数据集</td><td>有4900张图片，包含12个不同手势，</td><td><a href="https://www.microsoft.com/en-us/download/details.aspx?id=52283" target="_blank" rel="noopener">链接</a></td></tr><tr><td>2013 Chalearn Gesture Challenge dataset</td><td>手势识别数据集</td><td>有11000张图片，包含20个不同手势，</td><td><a href="http://gesture.chalearn.org/2013-multi-modal-challenge" target="_blank" rel="noopener">链接</a></td></tr><tr><td>WIDER FACE</td><td>人脸检测数据集</td><td>有 32,203 张图片，标注了393703个人脸。</td><td><a href="http://mmlab.ie.cuhk.edu.hk/projects/WIDERFace/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>FDDB</td><td>人脸检测数据集</td><td>2845张图片，标注了5171张人脸。</td><td><a href="http://vis-www.cs.umass.edu/fddb/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>300-VW dataset</td><td>面部表情数据集</td><td>包含114个视频和总计218,595帧。</td><td><a href="https://ibug.doc.ic.ac.uk/resources/300-VW/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>HMDB51</td><td>人类行为识别的数据集</td><td>包含51个动作，总共有6766个视频剪辑</td><td><a href="http://serre-lab.clps.brown.edu/resource/hmdb-a-large-human-motion-database/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MPII Cooking Activities Dataset</td><td>人类行为识别的数据集</td><td>包含65个动作，有5609个视频</td><td><a href="https://www.mpi-inf.mpg.de/departments/computer-vision-and-multimodal-computing/research/human-activity-recognition/mpii-cooking-activities-dataset/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>UCF101</td><td>人类行为识别的数据集</td><td>包含101个动作，有13320个视频</td><td><a href="http://crcv.ucf.edu/data/UCF101.php" target="_blank" rel="noopener">链接</a></td></tr><tr><td>IJB-A dataset</td><td>包含视频和图片人脸识别的数据集</td><td>包含5712个图像和2085个视频</td><td><a href="https://www.nist.gov/programs-projects/face-challenges" target="_blank" rel="noopener">链接</a></td></tr><tr><td>YouTube celebrities</td><td>视频人脸识别的数据集</td><td>包含47位名人的1910个视频</td><td><a href="https://www.cs.tau.ac.il/~wolf/ytfaces/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>COX</td><td>视频人脸识别的数据集</td><td>包含1000个主题的4000个视频</td><td><a href="http://vipl.ict.ac.cn/view_database.php?id=3" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Human3.6M</td><td>人体姿态估计的数据集</td><td>360万张3D照片，11名受试者在4个视点下执行15个了不同的动作</td><td><a href="http://vision.imar.ro/human3.6m/description.php" target="_blank" rel="noopener">链接</a></td></tr><tr><td>iLIDS</td><td>行人重识别的数据集</td><td>476 张图像，包含119个人</td><td><a href="http://www.eecs.qmul.ac.uk/~xiatian/downloads_qmul_iLIDS-VID_ReID_dataset.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>VIPeR</td><td>行人重识别的数据集</td><td>632个行人图片对（由两个相机拍摄）</td><td><a href="https://iiw.kuleuven.be/onderzoek/eavise/viper/dataset" target="_blank" rel="noopener">链接</a></td></tr><tr><td>CUHK01</td><td>行人重识别的数据集</td><td>包含971行人, 3884张图片</td><td><a href="http://www.ee.cuhk.edu.hk/~xgwang/CUHK_identification.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>CUHK03</td><td>行人重识别的数据集</td><td>包含1360行人, 13164张图片</td><td><a href="http://www.ee.cuhk.edu.hk/~xgwang/CUHK_identification.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>RWTH-PHOENIX-Weather multi-signer 2014</td><td>手语识别的数据集</td><td>包含了5672个德语手语的句子，有65,227个手语姿势和799,006帧</td><td><a href="https://www-i6.informatik.rwth-aachen.de/~forster/database-rwth-phoenix.php" target="_blank" rel="noopener">链接</a></td></tr><tr><td>AFLW</td><td>人类面部关键点的数据集</td><td>总共约有25k张脸，每幅图像标注了大约21个位置。</td><td><a href="https://www.tugraz.at/institute/icg/research/team-bischof/lrs/downloads/aflw" target="_blank" rel="noopener">链接</a></td></tr><tr><td>CMU mocap database</td><td>动作识别的数据集</td><td>2235个数据，包含144个不同的动作。</td><td><a href="http://mocap.cs.cmu.edu/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Georgia Tech (GT) database</td><td>人脸识别数据库</td><td>50个人每人15张人脸。</td><td><a href="http://www.anefian.com/research/face_reco.htm" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ORL</td><td>人脸识别数据库</td><td>40个人每个人10张图。</td><td><a href="https://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><p><a href="#开源数据集">top</a></p><h1 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h1><div class="table-container"><table><thead><tr><th>数据集</th><th>介绍</th><th>备注</th><th>网址</th></tr></thead><tbody><tr><td>DogCentric Activity Dataset</td><td>第一视角的狗和人之间的相互行为的数据集（视频）</td><td>总共有10类，具体数据量没有明说，y是动作类别</td><td><a href="http://robotics.ait.kyushu-u.ac.jp/yumi/db/first_dog.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>JPL First-Person Interaction Dataset</td><td>第一视角观察动作的数据集</td><td>57个视频，8个大类，y是动作类别</td><td><a href="http://michaelryoo.com/jpl-interaction.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>NUS-WIDE</td><td>关于图像文本匹配的数据集</td><td>269,648个图像和对应的标签</td><td><a href="http://lms.comp.nus.edu.sg/research/NUS-WIDE.htm" target="_blank" rel="noopener">链接</a></td></tr><tr><td>LabelMe Dataset</td><td>关于图像文本匹配的数据集</td><td>3825个图像和对应标签</td><td><a href="http://labelme.csail.mit.edu/Release3.0/browserTools/php/dataset.php" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Pascal Dataset</td><td>关于图像文本匹配的数据集</td><td>5011张训练图像和4952张测试图像</td><td>)</td></tr><tr><td>ICDAR 2015</td><td>关于文本检测的数据集</td><td>1500张训练，1000张测试，y为四边形的四个顶点。</td><td><a href="http://rrc.cvc.uab.es/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>COCO-Text</td><td>关于文本检测的数据集</td><td>63686张图片，其中43686张被选为训练集，剩下的2万用于测试。</td><td><a href="https://vision.cornell.edu/se3/coco-text-2/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MSRA-TD500</td><td>关于文本检测的数据集</td><td>300个训练，200个测试图像</td><td><a href="http://www.iapr-tc11.org/mediawiki/index.php/MSRA_Text_Detection_500_Database_(MSRA-TD500" target="_blank" rel="noopener">链接</a>)</td></tr><tr><td>Microsoft 7-Scenes Dataset</td><td>室内人体运动的数据集</td><td>有7种不同室内环境，每包含500-1000张图像视频序列。</td><td><a href="https://www.microsoft.com/en-us/research/project/rgb-d-dataset-7-scenes/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Oxford RobotCar</td><td>户外自动驾驶数据集</td><td>包含图像，激光扫描结果和GPS数据。</td><td><a href="http://robotcar-dataset.robots.ox.ac.uk/" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><p><a href="#开源数据集">top</a></p><h1 id="Low-amp-Mid-Level-Vision"><a href="#Low-amp-Mid-Level-Vision" class="headerlink" title="Low- &amp; Mid-Level Vision"></a>Low- &amp; Mid-Level Vision</h1><div class="table-container"><table><thead><tr><th>数据集</th><th>介绍</th><th>备注</th><th>网址</th></tr></thead><tbody><tr><td>Deep Video Deblurring for Hand-held Cameras</td><td>video/image deblurring(图像去模糊)</td><td>video num:71 video time: 3-5s blurry and sharp pair image num:6708</td><td><a href="https://www.cs.ubc.ca/labs/imager/tr/2017/DeepVideoDeblurring/#dataset" target="_blank" rel="noopener">链接</a></td></tr><tr><td>GOPRO dataset</td><td>video/image deblurring(图像去模糊)</td><td>blurry and sharp pair image num:3214 train num:2103 test num:1111</td><td><a href="https://github.com/SeungjunNah/DeepDeblur_release" target="_blank" rel="noopener">链接</a></td></tr><tr><td>BSD68</td><td>image restoration(图像修复)/高斯降噪</td><td>image num:68</td><td><a href="https://www.robots.ox.ac.uk/~vgg/data/dtd/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>BSD100</td><td>“image restoration(图像修复)super resolution超分辨率重建”</td><td>image num:100</td><td><a href="https://github.com/jbhuang0604/SelfExSR/tree/master/data" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Set5</td><td>“image restoration(图像修复)super resolution超分辨率重建”</td><td>image num:5</td><td><a href="https://github.com/jbhuang0604/SelfExSR/tree/master/data" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Set14</td><td>“image restoration(图像修复)super resolution超分辨率重建”</td><td>image num:14</td><td><a href="https://github.com/jbhuang0604/SelfExSR/tree/master/data" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Urban100</td><td>“image restoration(图像修复)super resolution超分辨率重建”</td><td>image num:100</td><td><a href="https://github.com/jbhuang0604/SelfExSR/tree/master/data" target="_blank" rel="noopener">链接</a></td></tr><tr><td>NYU v2 dataset</td><td>“image restoration(图像修复)depth super resolution深度超分辨率重建”</td><td>image num:1449</td><td><a href="https://cs.nyu.edu/~silberman/datasets/nyu_depth_v2.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Middlebury dataset</td><td>“image restoration(图像修复)depth super resolution深度超分辨率重建”</td><td>image pair num: 33</td><td><a href="http://vision.middlebury.edu/stereo/data/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>alpha matting benchmark</td><td>Natural image matting(抠图)</td><td>“train num:27,test num:8”</td><td><a href="http://www.alphamatting.com/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>real image benchmark</td><td>Natural image matting(抠图)</td><td>“train num:49300,test num:1000”</td><td><a href="https://sites.google.com/view/deepimagematting" target="_blank" rel="noopener">链接</a></td></tr><tr><td>MSRA10K/MSRA-B</td><td>Image saliency detection(显著性区域检测)</td><td>image num(MSRA10K):10000 image num(MSRA-B):5000</td><td><a href="https://mmcheng.net/zh/msra10k/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>ECSSD</td><td>Image saliency detection(显著性区域检测)</td><td>image num:1000</td><td><a href="http://www.cse.cuhk.edu.hk/leojia/projects/hsaliency/dataset.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>DUT-OMRON</td><td>Image saliency detection(显著性区域检测)</td><td>image num:5168</td><td><a href="http://saliencydetection.net/dut-omron/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>PASCAL-S</td><td>Image saliency detection(显著性区域检测)</td><td>image num:850</td><td><a href="http://cbi.gatech.edu/salobj/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>HKU-IS</td><td>Image saliency detection(显著性区域检测)</td><td>image num:4447</td><td><a href="http://i.cs.hku.hk/~gbli/deep_saliency.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>SOD</td><td>Image saliency detection(显著性区域检测)</td><td>image num:300</td><td><a href="http://i.cs.hku.hk/~gbli/deep_saliency.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Describable Textures Dataset</td><td>texture synthesis(纹理合成)</td><td>image num:5640 category num:47 split train:val:test = 1:1:1</td><td><a href="https://www.robots.ox.ac.uk/~vgg/data/dtd/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>CVPPP leaf segmentation</td><td>Instance segmentation(样例分割)</td><td>image num: 161 train num: 128 test num: 33</td><td><a href="https://www.plant-phenotyping.org/CVPPP2014-dataset" target="_blank" rel="noopener">链接</a></td></tr><tr><td>KITTI car segmentation</td><td>Instance segmentation(样例分割)</td><td>image num: 3976 train num: 3712 test num: 144 val:120</td><td><a href="http://www.cvlibs.net/datasets/kitti/eval_semantics.php" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Cityscapes</td><td>Instance segmentation(样例分割)</td><td>image num: 5000 train num: 2975 test num: 1525 val:500</td><td><a href="https://www.cityscapes-dataset.com/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>SYMMAX</td><td>Symmetry Detection(对称性检测)</td><td>image num: train:200 test:100</td><td><a href="https://github.com/KevinKecc/SRN" target="_blank" rel="noopener">链接</a></td></tr><tr><td>WHSYMMAX</td><td>Symmetry Detection(对称性检测)</td><td>image num: train:228 test:100 object num: 1</td><td><a href="https://github.com/KevinKecc/SRN" target="_blank" rel="noopener">链接</a></td></tr><tr><td>SK506</td><td>Symmetry Detection(对称性检测)</td><td>image num: train:300 test:206 object num: 16</td><td><a href="https://github.com/KevinKecc/SRN" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Sym-PASCAL</td><td>Symmetry Detection(对称性检测)</td><td>image num: train:648 test:787 object num: 14</td><td><a href="https://github.com/KevinKecc/SRN" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Color Checker Dataset</td><td>Color constancy(颜色恒定)</td><td>image num: 568</td><td><a href="http://www.eecs.harvard.edu/~ayanc/oldcc/dbs.html" target="_blank" rel="noopener">链接</a></td></tr><tr><td>NUS 8-Camera Dataset</td><td>Color constancy(颜色恒定)</td><td>image num: 1736</td><td><a href="http://www.comp.nus.edu.sg/~whitebal/illuminant/illuminant.html" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><p><a href="#开源数据集">top</a></p><h1 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h1><div class="table-container"><table><thead><tr><th>数据集</th><th>介绍</th><th>备注</th><th>网址</th></tr></thead><tbody><tr><td>Stanford Sentiment Treebank</td><td>文本情感分析</td><td>11855个句子划分为239231个短语，每个短语有个概率值，越小越负面，越大越正面</td><td><a href="https://nlp.stanford.edu/sentiment/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>IMDB</td><td>文本情感分析</td><td>100,000句子，正面负面两类</td><td><a href="http://ai.stanford.edu/~amaas/data/sentiment/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Yelp</td><td>文本情感分析</td><td>无</td><td><a href="https://www.yelp.com/dataset/challenge" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Multi-Domain Sentiment Dataset(Amazon product)</td><td>文本情感分析</td><td>100,000+句子，正面负面2类或强正面、弱正面、中立、弱负面、强负面5类</td><td><a href="http://www.cs.jhu.edu/~mdredze/datasets/sentiment/" target="_blank" rel="noopener">链接</a></td></tr><tr><td>SemEval</td><td>文本情感分析</td><td>20,632句子，三类（正面、负面、中立）</td><td><a href="http://alt.qcri.org/semeval2017/task4/index.php?id=data-and-tools" target="_blank" rel="noopener">链接</a></td></tr><tr><td>Sentiment140(STS)</td><td>文本情感分析</td><td>1,600,000句子,三类（正面、负面、中立）</td><td><a href="https://drive.google.com/uc?id=0B04GJPshIjmPRnZManQwWEdTZjg&amp;export=download" target="_blank" rel="noopener">链接</a></td></tr></tbody></table></div><p><a href="#开源数据集">top</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="人工智能" scheme="https://Castile.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="人工智能" scheme="https://Castile.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="数据集" scheme="https://Castile.github.io/tags/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Java中的Pair</title>
    <link href="https://castile.github.io/2020/02/12/Java%E4%B8%AD%E7%9A%84Pair/"/>
    <id>https://castile.github.io/2020/02/12/Java%E4%B8%AD%E7%9A%84Pair/</id>
    <published>2020-02-12T04:52:45.000Z</published>
    <updated>2020-02-12T05:06:16.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java-中的Pair"><a href="#Java-中的Pair" class="headerlink" title="Java 中的Pair"></a>Java 中的Pair</h1><p>​        Pair（配对）：  当一个函数返回两个值并且两个值都有重要意义时我们一般会用Map的key和value来表达，但是这样的话就需要两个键值对，用Map映射去做处理时，此时的key相当于value的一个描述或者引用，而具体的信息都保存在value中，我们可以通过key去获取对应的value。<strong>但是当key和value都保存具体信息时，我们就需要用到Pair对了。Pair对也是键值对的形式。</strong> </p><p>​        实际上Pair保存的应该说是一个信息对，两个信息都是我们需要的，没有key和value之分。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>​        在<code>javax.util</code>包下，有一个简单<code>Pair</code>类可以直接调用，用法是直接通过构造函数将所吸引类型的Key和value存入，这个key和value没有任何的对应关系类型。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.util.Pair;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-12 13:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pair&lt;Integer, String&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">1</span>, <span class="string">"zhuhongliang"</span>);  <span class="comment">// 要传入对应的值</span></span><br><span class="line">        System.out.println(p.getKey());</span><br><span class="line">        System.out.println(p.getValue());</span><br><span class="line"></span><br><span class="line">        Pair&lt;String, String&gt; p2 = <span class="keyword">new</span> Pair&lt;&gt;(<span class="string">"Tony"</span>, <span class="string">"Jane"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(p2.getKey());</span><br><span class="line">        System.out.println(p2.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>1<br>zhuhongliang<br>Tony<br>Jane</p></blockquote><pre><code>     这种Pair的返回对一个函数返回两个都有意义的值有特别用处。 </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Java" scheme="https://Castile.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://Castile.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-50-幂函数</title>
    <link href="https://castile.github.io/2020/02/12/leetcode-50-%E5%B9%82%E5%87%BD%E6%95%B0/"/>
    <id>https://castile.github.io/2020/02/12/leetcode-50-%E5%B9%82%E5%87%BD%E6%95%B0/</id>
    <published>2020-02-12T04:29:27.000Z</published>
    <updated>2020-02-12T09:02:10.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><h2 id="leetcode-50-Pow-x-n"><a href="#leetcode-50-Pow-x-n" class="headerlink" title="leetcode-50 Pow(x, n)"></a>leetcode-50 Pow(x, n)</h2><blockquote><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p><p>示例 1:</p><p>输入: 2.00000, 10<br>输出: 1024.00000<br>示例 2:</p><p>输入: 2.10000, 3<br>输出: 9.26100<br>示例 3:</p><p>输入: 2.00000, -2<br>输出: 0.25000<br>解释: 2-2 = 1/22 = 1/4 = 0.25<br>说明:</p><p>-100.0 &lt; x &lt; 100.0<br>n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</p><p>链接：<a href="https://leetcode-cn.com/problems/powx-n" target="_blank" rel="noopener">https://leetcode-cn.com/problems/powx-n</a></p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>暴力求解： 这个会超时，这里要处理一下n小于0的情况， 当n小于0的时候，将x变成1/x， n = -n； </p></li><li><p>快速幂： <a href="https://blog.csdn.net/qq_19782019/article/details/85621386" target="_blank" rel="noopener">https://blog.csdn.net/qq_19782019/article/details/85621386</a> </p><p>​        快速幂算法能帮我们算出指数非常大的幂，传统的求幂算法之所以时间复杂度非常高（为O(指数n)），就是因为当指数n非常大的时候，需要执行的循环操作次数也非常大。所以我们快速幂算法的核心思想就是每一步都把指数分成两半，而相应的底数做平方运算。这样不仅能把非常大的指数给不断变小，所需要执行的循环次数也变小，而最后表示的结果却一直不会变。</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p> <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode50_pow.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode50_pow.java</a> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RecurrenceAndDynamicProgramming;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-12 15:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode50_pow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            N = -N;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            ans *= x;</span><br><span class="line">            ans %= <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  快速幂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 底数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 指数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  结果   求最后三位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">fast_pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="comment">//            if(n % 2 == 0)&#123;</span></span><br><span class="line"><span class="comment">//                // 如果指数为偶数</span></span><br><span class="line"><span class="comment">//                n /= 2;</span></span><br><span class="line"><span class="comment">//                x = x * x % 1000;</span></span><br><span class="line"><span class="comment">//            &#125;if(n % 2 != 0 )&#123;</span></span><br><span class="line"><span class="comment">//                // 指数为奇数</span></span><br><span class="line"><span class="comment">//                n--; //  指数减一为偶数</span></span><br><span class="line"><span class="comment">//                result = result * x % 1000;</span></span><br><span class="line"><span class="comment">//                n /= 2;</span></span><br><span class="line"><span class="comment">//                x = x * x % 1000;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">if</span>( (n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;  <span class="comment">// n%2 == 1  奇数   使用位运算更加高效</span></span><br><span class="line">                result = result * x % <span class="number">1000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// n /= 2;</span></span><br><span class="line">            n &gt;&gt;= <span class="number">2</span>; <span class="comment">// 右移</span></span><br><span class="line">            x = x * x % <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result % <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start =  System.nanoTime();</span><br><span class="line"><span class="comment">//        double ans = pow(2, 1000000000);</span></span><br><span class="line">        <span class="keyword">double</span> anss = fast_pow(<span class="number">2</span>, <span class="number">10000000</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        System.out.println(anss);</span><br><span class="line">        System.out.println(<span class="string">"耗时："</span> +  (end - start)   +<span class="string">" ns"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>附上AC的结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span> (N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">            N = -N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fastPow(x, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">fastPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)  <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n &amp; <span class="number">1</span> ) == <span class="number">1</span>)&#123;</span><br><span class="line">                ans = ans*x;</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            x = x * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/12/leetcode-50-%E5%B9%82%E5%87%BD%E6%95%B0/1581498031170.png" data-fancybox="group" data-caption="1581498031170" class="fancybox"><img alt="1581498031170" style="zoom:80%;" align="center" data-src="/2020/02/12/leetcode-50-%E5%B9%82%E5%87%BD%E6%95%B0/1581498031170.png" class="lazyload" title="1581498031170"></a></p><p>快速幂很巧妙！值得学习！加油！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="https://Castile.github.io/tags/%E4%B8%AD%E7%AD%89/"/>
    
      <category term="数学" scheme="https://Castile.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-104-二叉树的最大深度</title>
    <link href="https://castile.github.io/2020/02/12/leetcode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>https://castile.github.io/2020/02/12/leetcode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</id>
    <published>2020-02-12T04:29:06.000Z</published>
    <updated>2020-02-12T06:08:50.624Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><h2 id="leetcode-104：-二叉树的最大深度【简单】"><a href="#leetcode-104：-二叉树的最大深度【简单】" class="headerlink" title="leetcode-104： 二叉树的最大深度【简单】"></a>leetcode-104： 二叉树的最大深度【简单】</h2><blockquote><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><p>​    3</p><p>   / \<br>  9  20<br>    /  \<br>   15   7<br>返回它的最大深度 3 。</p><p>链接：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree</a></p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>很直观想到递归来解决，根节点的数的高度等于 1 加上 左子树的高度与右子数高度的最大值。</li></ol><script type="math/tex; mode=display">Root_h = 1 + \max(Sub_L + Sub_R)</script><ol><li>迭代： BFS广度优先遍历，因为BFS是按层次遍历，所以二叉树有多少层，二叉树的高度就等于层数。</li><li>dfs： 其实是按照二叉树的前序遍历顺序，将每个节点的当前深度记录下来，这里使用了Pair结构</li></ol><p>时间复杂度均为O(n)， 空间复杂度均为O(n)，如果是平衡二叉树的话，时间复杂度最好情况为O(logN)。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>github:  <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/Tree/leetcode104_MaximumDepthofBinaryTree.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/Tree/leetcode104_MaximumDepthofBinaryTree.java</a> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.util.IntegerArray;</span><br><span class="line"><span class="keyword">import</span> javafx.util.Pair;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.commons.InstructionAdapter;</span><br><span class="line"><span class="keyword">import</span> sun.awt.TracedEventQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-06 22:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode104_MaximumDepthofBinaryTree</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    static  int i =0;</span></span><br><span class="line"><span class="comment">//    static  int j = 0;   // 不能在这里定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> j = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(i, j) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BFS 层次遍历， 记录层数，即为深度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二叉树的深度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxDepth_BFS</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">// 队列</span></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">int</span> maxDepth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            maxDepth++;<span class="comment">// 层数加1</span></span><br><span class="line">            <span class="comment">// 将当前层出队列</span></span><br><span class="line">            <span class="keyword">int</span> currSize = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; currSize; i++) &#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxDepth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxDepth_DFS</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        LinkedList&lt;Pair&lt;TreeNode, Integer&gt;&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;(); <span class="comment">// 栈</span></span><br><span class="line">        stack.push(<span class="keyword">new</span> Pair&lt;&gt;(root, <span class="number">1</span>));  <span class="comment">// 根节点的深度为1</span></span><br><span class="line">        <span class="keyword">int</span> maxDepth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            Pair&lt;TreeNode, Integer&gt; currNode = stack.pop(); <span class="comment">// 当前节点</span></span><br><span class="line">            maxDepth = Math.max(maxDepth, currNode.getValue()); <span class="comment">// 与当前节点的深度比较</span></span><br><span class="line">            <span class="comment">// 左右子树进栈</span></span><br><span class="line">            <span class="keyword">if</span> (currNode.getKey().left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(<span class="keyword">new</span> Pair&lt;&gt;(currNode.getKey().left, currNode.getValue() + <span class="number">1</span>)); <span class="comment">// 深度加1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currNode.getKey().right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(<span class="keyword">new</span> Pair&lt;&gt;(currNode.getKey().right, currNode.getValue() + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxDepth;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">        TreeNode t2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">        TreeNode t3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        TreeNode t4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">        TreeNode t5 = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">        root.left = t2;</span><br><span class="line">        root.right = t3;</span><br><span class="line">        t2.left = t4;</span><br><span class="line">        t2.right = t5;</span><br><span class="line"></span><br><span class="line">        System.out.println(maxDepth(root));  <span class="comment">// 3</span></span><br><span class="line">        System.out.println(maxDepth_BFS(root));  <span class="comment">// 3</span></span><br><span class="line">        System.out.println(maxDepth_DFS(root)); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="简单" scheme="https://Castile.github.io/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="二叉树" scheme="https://Castile.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-206-反转链表</title>
    <link href="https://castile.github.io/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://castile.github.io/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-02-06T09:39:44.000Z</published>
    <updated>2020-02-06T10:06:18.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>leetcode206： 反转链表 【简单】</p><p>反转一个单链表。</p><p>示例:</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list</a></p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li><p>迭代： 如下图：</p><p><a href="/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1580982171220.png" data-fancybox="group" data-caption="1580982171220" class="fancybox"><img alt="1580982171220" style="zoom:80%;" align="center" data-src="/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1580982171220.png" class="lazyload" title="1580982171220"></a></p></li></ul><p><a href="/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1580982209880.png" data-fancybox="group" data-caption="1580982209880" class="fancybox"><img alt="1580982209880" style="zoom:80%;" align="center" data-src="/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1580982209880.png" class="lazyload" title="1580982209880"></a></p><p>​    时间复杂度：O(n) 。 假设 <em>n</em> 是列表的长度，时间复杂度是 O(n)。</p><p>​    空间复杂度：O(1)。</p><ol><li><p>递归</p><p>1、找到递归出口</p><p>2、确定返回值</p><p>3、分析单次递归需要做的事情</p><p>下面，我们来具体分析一下：</p><p>首先，找到递归出口，这个还是非常简单的，就是当前即将反转的节点为 null 或者是 反转链表 为 null 时（一轮递归其实就只有两个节点，后面会讲），说明已经全部反转完毕了，即递归出口；<br>其次，确定返回值，我们只需要返回反转链表的头结点即可；<br>最后，分析单次递归需要做的事情，递归其实每一轮做的事情都是一样的，我们不需要去重复考虑，这样反而会很乱，只需要考虑单轮递归需要做什么就可以了。在这里，我们就只有两个节点，一个是即将反转的节点元素，一个是已经反转完毕的链表头结点。 我们要做的一轮递归只是 将当前节点加入到反转链表中，仅此而已。<br>链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/bang-zhu-da-jia-li-jie-di-gui-zuo-fa-by-jeromememo/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/solution/bang-zhu-da-jia-li-jie-di-gui-zuo-fa-by-jeromememo/</a></p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p> <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/LinkedList/leetcode206_ReverseLinkedList.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/LinkedList/leetcode206_ReverseLinkedList.java</a> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-06 17:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    反转单链表： 要求时间复杂度为O((n) ，空间复杂度为O(1)；</span></span><br><span class="line"><span class="comment">    Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span></span><br><span class="line"><span class="comment">    Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode206_ReverseLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 迭代</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)   <span class="keyword">return</span> head;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归版本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ListNode <span class="title">reverdeList_Recur</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> help(head, <span class="keyword">null</span>, head.next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">help</span><span class="params">(ListNode head, ListNode pre, ListNode next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>)    <span class="keyword">return</span> pre;</span><br><span class="line">        next = head.next;</span><br><span class="line">        head.next = pre;</span><br><span class="line">        pre = head;</span><br><span class="line">        head = next;</span><br><span class="line">        <span class="keyword">return</span> help(head, pre, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优美递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseListRR</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)   <span class="keyword">return</span> head;</span><br><span class="line">        ListNode p = reverseListRR(head.next);</span><br><span class="line">        <span class="comment">//这里的cur就是最后一个节点</span></span><br><span class="line">        ListNode cur = reverseList(head.next);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果链表是 1-&gt;2-&gt;3-&gt;4-&gt;5，那么此时的cur就是5</span></span><br><span class="line">        <span class="comment">//而head是4，head的下一个是5，下下一个是空</span></span><br><span class="line">        <span class="comment">//所以head.next.next 就是5-&gt;4</span></span><br><span class="line">        head.next.next = head; <span class="comment">//防止链表循环，需要将head.next设置为空</span></span><br><span class="line">        head.next  = <span class="keyword">null</span>; <span class="comment">//每层递归函数都返回cur，也就是最后一个节点</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkedList</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(p.val +<span class="string">"\t"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode n1 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode n2 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode n3 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode n4 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        head.next = n1;</span><br><span class="line">        n1.next = n2;</span><br><span class="line">        n2.next = n3;</span><br><span class="line">        n3.next = n4;</span><br><span class="line"></span><br><span class="line">        printLinkedList(head);</span><br><span class="line"></span><br><span class="line">        ListNode re = reverseListRR(head);</span><br><span class="line"></span><br><span class="line">        printLinkedList(re);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1580982603520.png" data-fancybox="group" data-caption="1580982603520" class="fancybox"><img alt="1580982603520" align="center" data-src="/2020/02/06/leetcode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/1580982603520.png" class="lazyload" title="1580982603520"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="简单" scheme="https://Castile.github.io/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="链表" scheme="https://Castile.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-119-杨辉三角2</title>
    <link href="https://castile.github.io/2020/02/06/leetcode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%922/"/>
    <id>https://castile.github.io/2020/02/06/leetcode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%922/</id>
    <published>2020-02-06T07:28:31.000Z</published>
    <updated>2020-02-06T08:26:20.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>leetcode119： 杨辉三角2 【简单】</p><p> 给定一个非负索引 <em>k</em>，其中 <em>k</em> ≤ 33，返回杨辉三角的第 <em>k</em> 行。 </p><p><a href="/2020/02/06/leetcode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%922/blog\source\_posts\leetcode-119-杨辉三角2\PascalTriangleAnimated2.gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:80%;" data-src="/2020/02/06/leetcode-119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%922/blog\source\_posts\leetcode-119-杨辉三角2\PascalTriangleAnimated2.gif" class="lazyload" title="img"></a></p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p><strong>示例:</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 3</span><br><span class="line">输出: [1,3,3,1]</span><br></pre></td></tr></table></figure></div></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>这题和前一题一样，只不过返回特定层，同样的思路</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; triangle = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[rowIndex+<span class="number">2</span>][rowIndex+<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(rowIndex+<span class="number">1</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= rowIndex+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            List&lt;Integer&gt; list =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i ; j++)&#123;</span><br><span class="line">                list.add(calc(dp, i, j));</span><br><span class="line">            &#125;</span><br><span class="line">            triangle.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> triangle.get(rowIndex);  <span class="comment">// 注意返回的是指定层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span>[][] dp, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( j == <span class="number">1</span> || i == j)&#123;</span><br><span class="line">            dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">if</span>(dp[i][j] != <span class="number">0</span>)   <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        dp[i][j] = calc(dp, i - <span class="number">1</span>, j - <span class="number">1</span>) + calc(dp, i - <span class="number">1</span>, j);</span><br><span class="line">        <span class="keyword">return</span> dp[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><ol><li><p>这题和<a href="[https:/Castile.github.io/2020/02/06/leetcode-118-杨辉三角1/]([https:/Castile.github.io/2020/02/06/leetcode-118-杨辉三角1/">杨辉三角1</a> )的题目差不多，118题需要保存所有的，但是这题只需要返回指定层，因为当前层的值只依赖于上一层的值，故使用一个list来保存上一层的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; pre = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rowIndex; i++)&#123;</span><br><span class="line">            cur = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span> || i == j)&#123;</span><br><span class="line">                    cur.add(<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cur.add(pre.get(j - <span class="number">1</span>) + pre.get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></li><li><p>基于2可以继续优化：以把 pre 的 List 省去。这样的话，cur每次不去新建 List，而是把cur当作pre。</p><p>又因为更新当前 <code>j</code> 的时候，就把之前<code>j</code>的信息覆盖掉了。而更新 <code>j + 1</code> 的时候又需要之前j的信息，所以在更新前，我们需要一个变量把之前<code>j</code>的信息保存起来。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> pre = <span class="number">1</span>;</span><br><span class="line">       List&lt;Integer&gt; cur = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       cur.add(<span class="number">1</span>); <span class="comment">// j == 0</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">               <span class="keyword">int</span> tmp = cur.get(j);</span><br><span class="line">               cur.set(j, pre + cur.get(j));</span><br><span class="line">               pre = tmp;</span><br><span class="line">           &#125;</span><br><span class="line">           cur.add(<span class="number">1</span>);  <span class="comment">// j == i</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> cur;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div></li><li><p>除了上边优化的思路，还有一种想法，那就是倒着进行，这样就不会存在覆盖的情况了。因为更新完j的信息后，虽然把<code>j</code>之前的信息覆盖掉了。但是下一次我们更新的是<code>j - 1</code>，需要的是<code>j - 1</code>和<code>j - 2</code> 的信息，<code>j</code>信息覆盖就不会造成影响了。</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p> <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode119_PascalTriangle2.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode119_PascalTriangle2.java</a> </p><p>相似题目：<a href="https:/Castile.github.io/2020/02/06/leetcode-118-杨辉三角1/">杨辉三角</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="简单" scheme="https://Castile.github.io/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="dp" scheme="https://Castile.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-118-杨辉三角1</title>
    <link href="https://castile.github.io/2020/02/06/leetcode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%921/"/>
    <id>https://castile.github.io/2020/02/06/leetcode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%921/</id>
    <published>2020-02-06T07:28:12.000Z</published>
    <updated>2020-02-12T04:33:54.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p>示例:</p><p>输入: 5<br>输出:<br>[<br>     [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]</p><p>链接：<a href="https://leetcode-cn.com/problems/pascals-triangle" target="_blank" rel="noopener">https://leetcode-cn.com/problems/pascals-triangle</a></p></blockquote><p> <a href="/2020/02/06/leetcode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%921/PascalTriangleAnimated2.gif" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" style="zoom:80%;" align="center" data-src="/2020/02/06/leetcode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%921/PascalTriangleAnimated2.gif" class="lazyload" title="img"></a> </p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>暴力递归：basecase：可以看到，每行的最左边和最右边的数字是1。因此，我们可以将基本情况定义如下:  <code>f(i, j)=1   where  j=1 or j==i</code></p><p>递推关系：</p><p>​        首先，我们定义一个函数 <code>f(i,j)</code>它将会返回帕斯卡三角形<code>第 i 行</code>、<code>第 j 列</code>的数字。</p><p>我们可以用下面的公式来表示这一递推关系：<code>f(i,j)=f(i−1,j−1)+f(i−1,j)</code></p></li><li><p>动态规划：因为暴力递归还有很多值会重复计算，所以使用一个数组保存已经计算过的值。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1></li></ol><p>源码：  <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode118_PascalTriangle.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/RecurrenceAndDynamicProgramming/leetcode118_PascalTriangle.java</a> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴力递归： 但是会超时</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; triangle = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span>(numRows == <span class="number">0</span>) <span class="keyword">return</span> triangle;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= numRows; i++)&#123;</span><br><span class="line">           List&lt;Integer&gt; list =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i ; j++)&#123;</span><br><span class="line">               list.add(calc(i, j));</span><br><span class="line">           &#125;</span><br><span class="line">           triangle.add(list);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> triangle;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>( j == <span class="number">1</span> || i == j)   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> calc(i - <span class="number">1</span>, j - <span class="number">1</span>) + calc(i - <span class="number">1</span>, j);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><p>动态规划：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; triangle = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[numRows+<span class="number">1</span>][numRows+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(numRows == <span class="number">0</span>) <span class="keyword">return</span> triangle;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= numRows; i++)&#123;</span><br><span class="line">                List&lt;Integer&gt; list =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i ; j++)&#123;</span><br><span class="line">                    list.add(calc(dp, i, j));</span><br><span class="line">                &#125;</span><br><span class="line">                triangle.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> triangle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span>[][] dp, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( j == <span class="number">1</span> || i == j)&#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j] != <span class="number">0</span>)   <span class="keyword">return</span> dp[i][j];</span><br><span class="line">            dp[i][j] = calc(dp, i - <span class="number">1</span>, j - <span class="number">1</span>) + calc(dp, i - <span class="number">1</span>, j);</span><br><span class="line">            <span class="keyword">return</span> dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>相似题目：  <a href="https://castile.github.io/Castile.github.io/2020/02/06/leetcode-119-杨辉三角2/">leetcode-119-杨辉三角2</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="简单" scheme="https://Castile.github.io/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="dp" scheme="https://Castile.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>CosNet:基于协同注意孪生网络的无监督视频目标分割</title>
    <link href="https://castile.github.io/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/"/>
    <id>https://castile.github.io/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/</id>
    <published>2020-02-05T13:42:03.000Z</published>
    <updated>2020-02-12T10:16:51.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="【CVPR2019】CosNet：See-More-Know-More-Unsupervised-Video-Object-Segmentation-with-Co-Attention-Siamese-Networks"><a href="#【CVPR2019】CosNet：See-More-Know-More-Unsupervised-Video-Object-Segmentation-with-Co-Attention-Siamese-Networks" class="headerlink" title="【CVPR2019】CosNet：See More, Know More: Unsupervised Video Object Segmentation with Co-Attention Siamese Networks"></a>【CVPR2019】CosNet：See More, Know More: Unsupervised Video Object Segmentation with Co-Attention Siamese Networks</h1><h2 id="基于协同注意孪生网络的无监督视频目标分割"><a href="#基于协同注意孪生网络的无监督视频目标分割" class="headerlink" title="基于协同注意孪生网络的无监督视频目标分割"></a>基于协同注意孪生网络的无监督视频目标分割</h2><p><strong>代码： <a href="https://github.com/Castile/COSNet" target="_blank" rel="noopener">https://github.com/Castile/COSNet</a></strong> </p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​         以往的无监督视频目标分割基于深度学习的方法仅仅考虑短期时域信息，没有考虑整个视频的全局信息，而且并没有有效利用视频内容的内在相关信息 ，<strong>Co-attention Siamese Network(CosNet)</strong>提出了一个统一的端到端的无监督视频目标分割网络。  </p><p>​        CosNet将UVOS作为co-attention的过程。一个co-attention模块学习去显示编码帧与帧之间的关系，使CosNet可以获取频繁相关的区域，进而可以帮助发现前景目标来进行分割。具体的，在训练阶段，co-attention过程能够分解为同一视频中任意帧对之间的相关性学习，在测试的时候，CosNet使用全局视角推断前景目标，也就是说利用测试帧与多个相关的帧的co-attention信息来判断主要的前景目标。CosNet的网络结构如下图所示。这是无监督视频目标分割最好的模型，在Davis2016数据集上的J-means达到了80.5的分数。</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580910682924.png" data-fancybox="group" data-caption="1580910682924" class="fancybox"><img alt="1580910682924" style="zoom:80%;" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580910682924.png" class="lazyload" title="1580910682924"></a></p><p>​        CosNet认为无监督视频目标分割下的主要目标拥有以下特点：</p><blockquote><p>1)单帧可区分(本地显著性)；</p><p>2)在整个视频序列中频繁出现的目标(全局一致性)。</p></blockquote><p>​        这两个特点对于区分视频序列中的主要目标的非常重要的。通过考虑视频的全局信息，可以锁定主要目标，进而进行分割。</p><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580910735819.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580910735819.png" class="lazyload" title></a></p><p>​        输入是图片对，图片对可以从视频中随机取得。两帧图片经过基网络（DeeplabV3），也称编码网络（Encoder）， 将两帧编码成嵌入特征，然后协同注意力模块会计算两帧的相似性，即两帧之间的相关注意力特征。最后输入到分割模块得到最后的分割结果。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="Co-attention-Mechanisms-in-COSNet"><a href="#Co-attention-Mechanisms-in-COSNet" class="headerlink" title="Co-attention Mechanisms in COSNet"></a>Co-attention Mechanisms in COSNet</h2><p>作者提出了三种协同注意力机制，分别为Vanilla co-attention， Symmetric co-attention，Channel-wise co-attention。一个注意力模块这显式地编码两帧之间的相关性，这样可以使得COsNet学习到频繁相关的区域。</p><h3 id="Vanilla-co-attention"><a href="#Vanilla-co-attention" class="headerlink" title="Vanilla co-attention"></a>Vanilla co-attention</h3><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580911492126.png" data-fancybox="group" data-caption="1580911492126" class="fancybox"><img alt="1580911492126" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580911492126.png" class="lazyload" title="1580911492126"></a></p><p>S 是两帧之间的afﬁnity matrix（相似矩阵），Va和Vb的shape是</p><script type="math/tex; mode=display">W * H  * C</script><p>Va的每一列表示特征向量，W是一个方阵</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580911687054.png" data-fancybox="group" data-caption="1580911687054" class="fancybox"><img alt="1580911687054" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580911687054.png" class="lazyload" title="1580911687054"></a></p><p>所以S又可以写成：</p><div align="center"> ![1580911733141](CosNet-基于协同注意孪生网络的无监督视频目标分割/1580911733141.png)</div><p>通过上面公式，首先对每一帧的特征表示进行线性变换，然后计算它们之间的距离 。</p><h3 id="Symmetric-co-attention"><a href="#Symmetric-co-attention" class="headerlink" title="Symmetric co-attention"></a>Symmetric co-attention</h3><p>如果对权重矩阵进行约束，令权重矩阵为一个对称矩阵。则投影矩阵P就变成一个正交矩阵<a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912078801.png" data-fancybox="group" data-caption="1580912078801" class="fancybox"><img alt="1580912078801" style="zoom: 80%;" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912078801.png" class="lazyload" title="1580912078801"></a></p><p>I是一个C * C的单位阵。则Symmetric co-attention的计算公式为：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912157546.png" data-fancybox="group" data-caption="1580912157546" class="fancybox"><img alt="1580912157546" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912157546.png" class="lazyload" title="1580912157546"></a></p><p> 上述公式表明将嵌入向量Va和Vb的特征投影到正交公共空间中，并保持它们的范数。这一特性可以消除不同通道之间的相关性和提高网络的泛化能力。</p><h2 id="Channel-wise-co-attention"><a href="#Channel-wise-co-attention" class="headerlink" title="Channel-wise co-attention"></a>Channel-wise co-attention</h2><p>将投影矩阵P简单地表示成单位矩阵 I （也就是没有进行空间的转换），然后权重矩阵W变成对角矩阵，在这种情况下，W（也就是D）可以分为两个对角矩阵Da和Db， 因此，公式3可以重新写成一下形式，也就是Channel-wise co-attention：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912721357.png" data-fancybox="group" data-caption="1580912721357" class="fancybox"><img alt="1580912721357" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912721357.png" class="lazyload" title="1580912721357"></a></p><p> 这个操作相当于在计算相似度之前对Va和Vb应用一个信道权值, 这有助于缓解通道冗余 .</p><h1 id="协同注意力操作"><a href="#协同注意力操作" class="headerlink" title="协同注意力操作"></a>协同注意力操作</h1><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912845406.png" data-fancybox="group" data-caption="1580912845406" class="fancybox"><img alt="1580912845406" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912845406.png" class="lazyload" title="1580912845406"></a></p><p>协同注意力操作如上图所示，在获取了相似度矩阵S之后，对S的行向量和列向量进行SoftMax操作：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912943618.png" data-fancybox="group" data-caption="1580912943618" class="fancybox"><img alt="1580912943618" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580912943618.png" class="lazyload" title="1580912943618"></a></p><p>结合上图：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913044245.png" data-fancybox="group" data-caption="1580913044245" class="fancybox"><img alt="1580913044245" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913044245.png" class="lazyload" title="1580913044245"></a></p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580910735819.png" data-fancybox="group" data-caption="1580910735819" class="fancybox"><img alt="1580910735819" style="zoom:80%;" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580910735819.png" class="lazyload" title="1580910735819"></a></p><p>在网络中的协同注意力模块还有一个Gated co-attention操作， 考虑到输入对、遮挡和背景噪声之间潜在的外观变化，最好对来自不同输入帧的信息进行加权，而不是平均处理所有的共同注意信息。</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913182677.png" data-fancybox="group" data-caption="1580913182677" class="fancybox"><img alt="1580913182677" style="zoom:150%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913182677.png" class="lazyload" title="1580913182677"></a> </p><script type="math/tex; mode=display">\sigma是一个sigmoid激活函数，w_f和b_f表示卷积核和偏置参数。</script><p>计算完gate的置信度之后，注意力Z表示为：<br><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913526624.png" data-fancybox="group" data-caption="1580913526624" class="fancybox"><img alt="1580913526624" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913526624.png" class="lazyload" title="1580913526624"></a></p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913588288.png" data-fancybox="group" data-caption="1580913588288" class="fancybox"><img alt="1580913588288" style="zoom:80%;" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913588288.png" class="lazyload" title="1580913588288"></a></p><hr><h1 id="CosNet-整体架构"><a href="#CosNet-整体架构" class="headerlink" title="CosNet 整体架构"></a>CosNet 整体架构</h1><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913733433.png" data-fancybox="group" data-caption="1580913733433" class="fancybox"><img alt="1580913733433" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580913733433.png" class="lazyload" title="1580913733433"></a></p><p>CosNet是一个孪生网络，由三个级联的部分，一个基于DeepLabV3的特征嵌入模块，一个协同注意力模块以及分割模块。</p><h2 id="训练阶段"><a href="#训练阶段" class="headerlink" title="训练阶段"></a>训练阶段</h2><p>​        上文说到，视频中的主要对象（即要分割的对象）有两个基本属性:(i)帧内可分辨性，(ii)帧间一致性。为了区分前景目标和背景(属性(i))，我们利用现有的显著性目标分割数据集DUTS和MSRA 10K来训练我们的backbone特征嵌入模块。同时，为了确保COSNet能够捕获主要视频对象的全局帧间相干性(property (ii))，我们使用视频分割数据训练整个COSNet，其中co-attention模块在捕获视频帧之间的相关性方面起着关键作用。具体来说，我们在一个视频序列中随机选取两帧来建立训练对。值得一提的是，与以往的基于循环神经网络的UVOS模型只需要连续帧相比，这种操作自然有效地扩充了训练数据, 即数据增强。</p><p>​        通过这种方式，COSNet可以交替使用静态图像数据和动态视频数据进行训练。在使用图像数据时，我们只训练了特征嵌入模块，其中增加了1×1的sigmoid激活卷积层，生成中间分割的sideoutput。视频数据用于训练整个COSNet，包括特征嵌入模块、协同注意模块和分割模块。利用加权二叉熵损失训练网络: </p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914232679.png" data-fancybox="group" data-caption="1580914232679" class="fancybox"><img alt="1580914232679" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914232679.png" class="lazyload" title="1580914232679"></a></p><p> 其实训练阶段是<strong>完全监督</strong>的，因为使用到了groundtruth。</p><h2 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h2><p>​        训练完成之后，使用模型在其他没有见过的视频序列中进行测试。给定一个测试视频序列，我们可以将每个要分割的帧，以及从同一视频中采样的一个参考帧，依次输入到COSNet中，通过逐帧的操作，我们可以得到所有的分割结果。</p><p>​        然而，在这样一个简单的策略下，分割结果仍然含有相当大的噪声，因为视频中丰富的全局相关信息并没有得到充分的挖掘。因此，在测试阶段包含更多的是推导帧常重要的：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914483240.png" data-fancybox="group" data-caption="1580914483240" class="fancybox"><img alt="1580914483240" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914483240.png" class="lazyload" title="1580914483240"></a></p><p> 将一组N个不同的参考帧(从同一视频中均匀采样)输入推理分支，并对所有预测进行平均。 </p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914542254.png" data-fancybox="group" data-caption="1580914542254" class="fancybox"><img alt="1580914542254" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914542254.png" class="lazyload" title="1580914542254"></a></p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>DAVIS-2016数据集：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914796880.png" data-fancybox="group" data-caption="1580914796880" class="fancybox"><img alt="1580914796880" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914796880.png" class="lazyload" title="1580914796880"></a></p><p>FBMS数据集：<br><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914854214.png" data-fancybox="group" data-caption="1580914854214" class="fancybox"><img alt="1580914854214" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914854214.png" class="lazyload" title="1580914854214"></a></p><p>  YoutubeObjects  数据集：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914901876.png" data-fancybox="group" data-caption="1580914901876" class="fancybox"><img alt="1580914901876" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580914901876.png" class="lazyload" title="1580914901876"></a></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ol><li><p>协同注意力机制基于全局的视角进行推断前景和背景的分割，效果显著。</p></li><li><p>在测试时，平均多个帧的的注意力更有效</p></li><li><p>为了研究最终预测在测试阶段的帧选择策略，我们进一步使用不同的采样方法进行了一系列的实验。具体采用全局随机抽样、全局均匀抽样和局部连续抽样。从表1中可以看出，两种全局水平的采样策略都能获得近似的性能，但都优于局部采样方法。同时，基于局部采样的结果仍然优于从骨干网获得的结果。整体比较进一步证明了合并的重要性 。</p></li><li><p>关于参考帧数的选择，如表：</p><p><a href="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580915369748.png" data-fancybox="group" data-caption="1580915369748" class="fancybox"><img alt="1580915369748" style="zoom:80%;" align="center" data-src="/2020/02/05/CosNet-%E5%9F%BA%E4%BA%8E%E5%8D%8F%E5%90%8C%E6%B3%A8%E6%84%8F%E5%AD%AA%E7%94%9F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%97%A0%E7%9B%91%E7%9D%A3%E8%A7%86%E9%A2%91%E7%9B%AE%E6%A0%87%E5%88%86%E5%89%B2/1580915369748.png" class="lazyload" title="1580915369748"></a></p><p> 当N = 0时，这意味着没有共同注意分割。当N从0变为1时，可以看到一个很大的性能改进 。N从2变化到5，定量结果显示性能有所提高。当我们进一步增加N时，最终的性能没有明显的变化。实验中使用的N=5。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="论文阅读" scheme="https://Castile.github.io/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="UVOS" scheme="https://Castile.github.io/tags/UVOS/"/>
    
      <category term="papers" scheme="https://Castile.github.io/tags/papers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-344-反转字符串</title>
    <link href="https://castile.github.io/2020/02/03/leetcode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://castile.github.io/2020/02/03/leetcode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-02-03T08:53:27.000Z</published>
    <updated>2020-02-03T09:10:10.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例 1：</p><p>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]<br>示例 2：</p><p>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p><p>来源：力扣（LeetCode）</p><p>链接：<a href="https://leetcode-cn.com/problems/reverse-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-string</a></p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>就地操作，而且要是O(1)的空间，可以使用迭代方法，首尾指针解决</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length;</span><br><span class="line">        <span class="keyword">char</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span> ; i++)&#123;</span><br><span class="line">            tmp = s[i];</span><br><span class="line">            s[i] =  s[len - i - <span class="number">1</span>]; <span class="comment">//这是末尾的值</span></span><br><span class="line">            s[len-i-<span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><ol><li><p>也可以用递归来做，但是使用了辅助栈，不满足O(1)的空间要求</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        help(s, <span class="number">0</span>, s.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">char</span> tmp = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">        help(s, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p> <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/Str/leetcode344_ReverseStr.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/Str/leetcode344_ReverseStr.java</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="简单" scheme="https://Castile.github.io/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="字符串" scheme="https://Castile.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-24-两两交换链表中的节点</title>
    <link href="https://castile.github.io/2020/02/03/leetcode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>https://castile.github.io/2020/02/03/leetcode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</id>
    <published>2020-02-03T08:18:28.000Z</published>
    <updated>2020-02-03T08:51:25.948Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>示例：</p><p>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3<br>链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a></p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>递归：</p><p>​        我们可以定义函数 swap(head) 以实现解决方案，其中输入的参数 head 指向链表的头节点。* 而该函数应当返回将链表中每两个相邻节点交换后得到的新列表的头节点 head 。</p><p>​        按照我们上面列出的步骤，我们可以按下面的流程来实现函数：</p><p>​        （1）首先，我们交换列表中的前两个节点，也就是 head 和 head.next；</p><p>​        （2）然后我们以 swap(head.next.next) 的形式调用函数自身，以交换头两个节点之后列表的其余部分。</p><p>​        （3）最后，我们将步骤（2）中的子列表的返回头与步骤（1）中交换的两个节点相连，以形成新的链                    表。</p></li><li><p>迭代</p><p>新增一个头节点 dummy node， dummy.next = head； 更好操作链表。流程图如下：</p><p><a href="/2020/02/03/leetcode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/1580719129953.png" data-fancybox="group" data-caption="1580719790068" class="fancybox"><img alt="1580719790068" style="zoom:80%;" data-src="/2020/02/03/leetcode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/1580719129953.png" class="lazyload" title="1580719790068"></a></p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>源码： <a href="https://github.com/Castile/algorithm/blob/master/leetcode/src/LinkedList/leetcode24_SwapNodesInPairs.java" target="_blank" rel="noopener">https://github.com/Castile/algorithm/blob/master/leetcode/src/LinkedList/leetcode24_SwapNodesInPairs.java</a> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-03 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> val;</span><br><span class="line">      ListNode next;</span><br><span class="line">      ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode24_SwapNodesInPairs</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 递归解法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)     <span class="keyword">return</span> head;</span><br><span class="line">        ListNode n = head.next.next;  <span class="comment">// 下一次要传递的节点</span></span><br><span class="line">        <span class="comment">//交换这两个节点</span></span><br><span class="line">        ListNode p = head.next;</span><br><span class="line">        p.next = head;</span><br><span class="line">        head.next = swapPairs(n); <span class="comment">// 递归</span></span><br><span class="line">        <span class="keyword">return</span> p; <span class="comment">// 返回交换之后的头结点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs_it</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode pre = dummy;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span> &amp;&amp; head.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode first = head;</span><br><span class="line">            ListNode second = head.next;</span><br><span class="line">            <span class="comment">// 交换</span></span><br><span class="line">            first.next = second.next;</span><br><span class="line">            second.next = first;</span><br><span class="line">            pre.next = second;</span><br><span class="line">            <span class="comment">// 初始化头</span></span><br><span class="line">            head = first.next;</span><br><span class="line">            pre = first;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="https://Castile.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="https://Castile.github.io/tags/%E4%B8%AD%E7%AD%89/"/>
    
      <category term="链表" scheme="https://Castile.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-200-岛屿数量</title>
    <link href="https://castile.github.io/2020/02/02/leetcode-200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <id>https://castile.github.io/2020/02/02/leetcode-200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</id>
    <published>2020-02-02T09:50:20.000Z</published>
    <updated>2020-02-02T11:24:58.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>给定一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p><p>示例 1:</p><p>输入:<br>11110<br>11010<br>11000<br>00000</p><p>输出: 1<br>示例 2:</p><p>输入:<br>11000<br>11000<br>00100<br>00011</p><p>输出: 3<br>链接：<a href="https://leetcode-cn.com/problems/number-of-islands" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-islands</a></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>dfs： 深度优先搜索，很明显，这是一个连通问题，求出的连通分量的个数就是岛屿的数量</li><li>并查集： 这个是并查集的一个应用，求连通分量的个数。</li><li>bfs： 使用队列解决</li></ol><p>这里有一个大佬的题解，非常详细： <a href="https://leetcode-cn.com/problems/number-of-islands/solution/dfs-bfs-bing-cha-ji-python-dai-ma-java-dai-ma-by-l/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-islands/solution/dfs-bfs-bing-cha-ji-python-dai-ma-java-dai-ma-by-l/</a> </p><p>官方题解也可。主要是理解算法思想</p><p>直接看代码吧</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>并查集：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[] parents = <span class="keyword">new</span> <span class="keyword">int</span>[n*m];</span><br><span class="line">        <span class="keyword">int</span>[] rank = <span class="keyword">new</span> <span class="keyword">int</span> [n*m];</span><br><span class="line">        makeSet(grid, parents, rank);</span><br><span class="line">        <span class="comment">// 方向数组 d 是上下左右搜索的常用手法</span></span><br><span class="line">        <span class="keyword">int</span>[][] d = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>,-<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>( grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                   grid[i][j] = <span class="string">'0'</span>;  <span class="comment">//  已经联合的点不需要连接了。</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line">                       <span class="keyword">int</span> x = i + d[k][<span class="number">0</span>];</span><br><span class="line">                       <span class="keyword">int</span> y = j + d[k][<span class="number">1</span>];</span><br><span class="line">                       <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n &amp;&amp; grid[x][y] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                           unoin(parents, rank, x *n +y,  i *n + j);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建并查集的结构：注意这里的技巧</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSet</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> []parents, <span class="keyword">int</span> []rank)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    parents[i * grid[<span class="number">0</span>].length + j] = i * grid[<span class="number">0</span>].length + j;</span><br><span class="line">                    rank[i * grid[<span class="number">0</span>].length + j] = <span class="number">1</span>;</span><br><span class="line">                    count++;  <span class="comment">// 连通分量 </span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    parents[i * grid[<span class="number">0</span>].length + j] = -<span class="number">1</span>;</span><br><span class="line">                    rank[i * grid[<span class="number">0</span>].length + j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;    </span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] parents, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = parents[a];</span><br><span class="line">        <span class="keyword">while</span>(root != parents[root])&#123;</span><br><span class="line">           root = parents[root];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unoin</span><span class="params">(<span class="keyword">int</span>[] parents, <span class="keyword">int</span> []rank, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ra  = find(parents, a);</span><br><span class="line">        <span class="keyword">int</span> rb  = find(parents, b);</span><br><span class="line">        <span class="keyword">if</span>(ra != rb)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rank[ra] &gt; rank[rb])&#123;</span><br><span class="line">                parents[rb] =  ra;</span><br><span class="line">                rank[ra] += rank[rb];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 parents[rb] =  ra;</span><br><span class="line">                rank[ra] += rank[rb];</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>dfs：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    cnt++; <span class="comment">// 岛屿的个数加一</span></span><br><span class="line">                    infect(grid, i, j, grid.length, grid[<span class="number">0</span>].length); <span class="comment">// 感染函数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 感染函数： 将i， j位置的上下左右位置进行检查，是否为同一个岛屿</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m： 岛屿矩阵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i： 下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j：  下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> R: 行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> C： 列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">infect</span><span class="params">(<span class="keyword">char</span>[][] m, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> R, <span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= R || j &lt; <span class="number">0</span> || j &gt;= C || m[i][j] != <span class="string">'1'</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        m[i][j] = <span class="string">'2'</span>;</span><br><span class="line">        <span class="comment">// 依次感染上下左右位置</span></span><br><span class="line">        infect(m, i+<span class="number">1</span>, j, R, C);</span><br><span class="line">        infect(m, i-<span class="number">1</span>, j, R, C);</span><br><span class="line">        infect(m, i, j-<span class="number">1</span>, R, C);</span><br><span class="line">        infect(m, i, j+<span class="number">1</span>, R, C);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>BFS： 使用队列</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">int</span>[][] d = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="comment">// 广度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid == <span class="keyword">null</span> ||  grid.length == <span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        LinkedList&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n ; j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    q.offer(i * n + j); <span class="comment">//  入队</span></span><br><span class="line">                    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">                    <span class="keyword">int</span> cur = q.poll(); <span class="comment">// 出队</span></span><br><span class="line">                    <span class="keyword">int</span> cx = cur / n;</span><br><span class="line">                    <span class="keyword">int</span> cy = cur % n;</span><br><span class="line">                    grid[cx][cy] = <span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span>[] dd: d)&#123;</span><br><span class="line">                        <span class="keyword">int</span> x = cx + dd[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">int</span> y = cy + dd[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &lt; n &amp;&amp; grid[x][y] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                            q.offer(x * n + y);</span><br><span class="line">                            grid[x][y] = <span class="string">'0'</span>;   <span class="comment">// 要标志已访问，不然会严重超时</span></span><br><span class="line">                        &#125;</span><br><span class="line">                            </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    count++;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dfs" scheme="https://Castile.github.io/tags/dfs/"/>
    
      <category term="并查集" scheme="https://Castile.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="搜索" scheme="https://Castile.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="中等" scheme="https://Castile.github.io/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-695-岛屿的最大面积</title>
    <link href="https://castile.github.io/2020/02/02/leetcode-695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/"/>
    <id>https://castile.github.io/2020/02/02/leetcode-695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/</id>
    <published>2020-02-02T09:44:04.000Z</published>
    <updated>2020-02-02T09:49:39.394Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p><p>示例 1:</p><p>[[0,0,1,0,0,0,0,1,0,0,0,0,0],<br> [0,0,0,0,0,0,0,1,1,1,0,0,0],<br> [0,1,1,0,1,0,0,0,0,0,0,0,0],<br> [0,1,0,0,1,1,0,0,1,0,1,0,0],<br> [0,1,0,0,1,1,0,0,1,1,1,0,0],<br> [0,0,0,0,0,0,0,0,0,0,1,0,0],<br> [0,0,0,0,0,0,0,1,1,1,0,0,0],<br> [0,0,0,0,0,0,0,1,1,0,0,0,0]]<br>对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。</p><p>示例 2:</p><p>[[0,0,0,0,0,0,0,0]]<br>对于上面这个给定的矩阵, 返回 0。</p><p>注意: 给定的矩阵grid 的长度和宽度都不超过 50。</p><p>链接：<a href="https://leetcode-cn.com/problems/max-area-of-island" target="_blank" rel="noopener">https://leetcode-cn.com/problems/max-area-of-island</a></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>dfs： 岛屿问题，看到连通区域，想到dfs来做。 用DFS搜索每个value为1的位置，递归检查相邻的位置，如果访问过，则将value设为0（避免重复访问） </p><p>直接看代码注释</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> search;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hongliang Zhu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-02-02 17:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">leetcode_695_MaxAreaIsland</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span>[][] d = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n ; j++)&#123;</span><br><span class="line">                result = Math.max(result, dfs(grid, i, j)); <span class="comment">//求最大的面积</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    int[][] d = new int[][]&#123;&#123;1, 0&#125;, &#123;0, 1&#125;, &#123;-1, 0&#125;, &#123;0, -1&#125;&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || grid[x][y] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[x][y] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">1</span>; <span class="comment">// 面积加1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123; <span class="comment">//  注意使用不同的变量，如果使用x、y会报错</span></span><br><span class="line">            <span class="keyword">int</span> i = x + d[k][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> j = y + d[k][<span class="number">1</span>];</span><br><span class="line">            c += dfs(grid, i, j);  <span class="comment">// 搜索上下左右</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int[] dd: d)&#123;</span></span><br><span class="line">        <span class="comment">//     c += dfs(grid, x + dd[0], y + dd[1]);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="dfs" scheme="https://Castile.github.io/tags/dfs/"/>
    
      <category term="搜索" scheme="https://Castile.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="中等" scheme="https://Castile.github.io/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-268-缺失的数字</title>
    <link href="https://castile.github.io/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://castile.github.io/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-02-02T02:54:27.000Z</published>
    <updated>2020-02-02T04:07:17.418Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</p><p>示例 1:</p><p>输入: [3,0,1]<br>输出: 2<br>示例 2:</p><p>输入: [9,6,4,2,3,5,7,0,1]<br>输出: 8<br>链接：<a href="https://leetcode-cn.com/problems/missing-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/missing-number</a></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li><p>题目说从0~n的数字，所以直接累加数组得到和为sum， 加入数组没有缺失数据，那么完整数组的元素个数为原数组大小加1，利用等差数列的性质，得到从0~n的和len，然后len - sum 就是缺失的那个数字了。</p><p>时间复杂度：O(n)。求出数组中所有数的和的时间复杂度为 O(n)，等差数列公式的时间复杂度为 O(1)，因此总的时间复杂度为 O(n)。<br>空间复杂度：O(1)。算法中只用到了O(1) 的额外空间，用来存储答案。</p></li><li><p>位操作： 异或</p><p>| a    | b    | 异或结果 |<br>| —— | —— | :———: |<br>| 0    | 0    |    0     |<br>| 0    | 1    |    1     |<br>| 1    | 0    |    1     |<br>| 1    | 1    |    0     |</p><p> 其他数字 与 0 异或都得到它自己。</p><p>此外异或运算满足交换律.  如：</p><p>| 0    | 1    | 2    | 3    |<br>| —— | —— | —— | —— |<br>| 3    | 4    | 0    | 1    |</p><p> 下标与数组值异或操作：  4 ^ 0 ^ 3 ^ 1 ^  4 ^ 2 ^ 0 ^ 3 ^ 1 ( 前面的4是为了添加最后一位数字，为原数组的长度) ——&gt; 可得到缺失的值为2。</p><p>时间复杂度：O(n)。这里假设异或运算的时间复杂度是常数的，总共会进行O(n) 次异或运算，因此总的时间复杂度为 O(n)。<br>空间复杂度：O(1)。算法中只用到了O(1) 的额外空间，用来存储答案。</p></li><li><p>哈希表</p><p>将数组中的元素放入HashSet哈希表中， 插入哈希表的时间复杂度为O(1)， N个数时间复杂度为O(n)， 然后从0到数组放长度区间内遍历， 判断哈希表中是否存在此数字，若不存在， 则此数字就是缺失的数字。遍历时间复杂度为O(n)，  故总体时间复杂度为O(n)。空间复杂度为O(n)。</p></li><li><p>还可以先排序，再找出缺失的数字，但是排序的时间复杂度不是线性时间， 为O(logN)</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>方法一：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>  sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length; i++)&#123; <span class="comment">//数组的和</span></span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 缺失一个数字： 本来的和应该是：  </span></span><br><span class="line">        <span class="keyword">int</span> len = (nums.length + <span class="number">1</span>) * nums.length / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">return</span> len - sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580614821325.png" data-fancybox="group" data-caption="1580614821325" class="fancybox"><img alt="1580614821325" style="zoom:80%;" data-src="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580614821325.png" class="lazyload" title="1580614821325"></a></p><p>位操作：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;  i &lt; nums.length; i++)&#123;</span><br><span class="line">            m ^= i ^ nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580614957343.png" data-fancybox="group" data-caption="1580614957343" class="fancybox"><img alt="1580614957343" style="zoom:80%;" data-src="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580614957343.png" class="lazyload" title="1580614957343"></a></p><p>哈希表：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;nums.length; i++)&#123;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( !set.contains(i))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580615699820.png" data-fancybox="group" data-caption="1580615699820" class="fancybox"><img alt="1580615699820" style="zoom:80%;" data-src="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580615699820.png" class="lazyload" title="1580615699820"></a></p><p>排序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">      Arrays.sort(nums);</span><br><span class="line">      <span class="comment">// 判断末尾</span></span><br><span class="line">      <span class="keyword">if</span>(nums[nums.length - <span class="number">1</span>] !=  nums.length)&#123;</span><br><span class="line">          <span class="keyword">return</span> nums.length;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断0 是否在首位</span></span><br><span class="line">      <span class="keyword">if</span>(nums[<span class="number">0</span>] != <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;nums.length ; i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(i != nums[i])</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><a href="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580616038690.png" data-fancybox="group" data-caption="1580616038690" class="fancybox"><img alt="1580616038690" style="zoom:80%;" data-src="/2020/02/02/leetcode-268-%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/1580616038690.png" class="lazyload" title="1580616038690"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://Castile.github.io/categories/Algorithm/"/>
    
    
      <category term="算法" scheme="https://Castile.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="简单" scheme="https://Castile.github.io/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="位操作" scheme="https://Castile.github.io/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
</feed>
